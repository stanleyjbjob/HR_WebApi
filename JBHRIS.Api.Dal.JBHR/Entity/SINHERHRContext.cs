using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
using Microsoft.AspNetCore.Http;
using System.Linq;
using JBHRIS.Api.Dto;
using System.Security.Claims;
using Newtonsoft.Json;
using Microsoft.Extensions.Configuration;

namespace JBHRIS.Api.Dal.JBHR
{
    public partial class JBHRContext : DbContext
    {
        private readonly HttpContext _httpContext;
        private IConfiguration _configuration;
        public JBHRContext()
        {
        }
        public JBHRContext(DbContextOptions<JBHRContext> options) : base(options)
        {

        }
        public JBHRContext(DbContextOptions<JBHRContext> options,
            IConfiguration configuration, IHttpContextAccessor httpContextAccessor = null)
                : base(options)
        {
            _configuration = configuration;
            _httpContext = httpContextAccessor?.HttpContext;
        }

        [DbFunction("GetTotalYears", "dbo")]
        public static decimal GetTotalYears(string nobr, DateTime dateTime)
        {
            throw new NotImplementedException();
        }
        public class ObjectParameter { }
        public virtual DbSet<Abs> Abs { get; set; }
        public virtual DbSet<Abs1> Abs1 { get; set; }
        public virtual DbSet<Abs1Basetts> Abs1Basetts { get; set; }
        public virtual DbSet<AbsAttend> AbsAttend { get; set; }
        public virtual DbSet<AbsBasetts> AbsBasetts { get; set; }
        public virtual DbSet<AbsExt> AbsExt { get; set; }
        public virtual DbSet<AbsHcode> AbsHcode { get; set; }
        public virtual DbSet<Absc> Absc { get; set; }
        public virtual DbSet<Absd> Absd { get; set; }
        public virtual DbSet<Abspre> Abspre { get; set; }
        public virtual DbSet<Abst> Abst { get; set; }
        public virtual DbSet<Acccd> Acccd { get; set; }
        public virtual DbSet<Acccdattr> Acccdattr { get; set; }
        public virtual DbSet<Accsal> Accsal { get; set; }
        public virtual DbSet<Apgpcd> Apgpcd { get; set; }
        public virtual DbSet<Apgpit> Apgpit { get; set; }
        public virtual DbSet<Apitem> Apitem { get; set; }
        public virtual DbSet<AppConfig> AppConfig { get; set; }
        public virtual DbSet<Appdeptm> Appdeptm { get; set; }
        public virtual DbSet<ApplicationInfo> ApplicationInfo { get; set; }
        public virtual DbSet<ApplicationStructure> ApplicationStructure { get; set; }
        public virtual DbSet<ApplicationUserRule> ApplicationUserRule { get; set; }
        public virtual DbSet<ApplyUpdateBase> ApplyUpdateBase { get; set; }
        public virtual DbSet<Appra> Appra { get; set; }
        public virtual DbSet<Appramt> Appramt { get; set; }
        public virtual DbSet<Appramtt> Appramtt { get; set; }
        public virtual DbSet<Appras> Appras { get; set; }
        public virtual DbSet<Apprl> Apprl { get; set; }
        public virtual DbSet<Apptype> Apptype { get; set; }
        public virtual DbSet<Appwage> Appwage { get; set; }
        public virtual DbSet<Appyear> Appyear { get; set; }
        public virtual DbSet<Aptype> Aptype { get; set; }
        public virtual DbSet<Apvalcd> Apvalcd { get; set; }
        public virtual DbSet<Army> Army { get; set; }
        public virtual DbSet<Assess> Assess { get; set; }
        public virtual DbSet<AssessCat> AssessCat { get; set; }
        public virtual DbSet<Attbak> Attbak { get; set; }
        public virtual DbSet<Attcard> Attcard { get; set; }
        public virtual DbSet<Attend> Attend { get; set; }
        public virtual DbSet<AttendBasetts> AttendBasetts { get; set; }
        public virtual DbSet<AttendTmp> AttendTmp { get; set; }
        public virtual DbSet<Attyear> Attyear { get; set; }
        public virtual DbSet<Award> Award { get; set; }
        public virtual DbSet<Awardcd> Awardcd { get; set; }
        public virtual DbSet<BankCode> BankCode { get; set; }
        public virtual DbSet<Base> Base { get; set; }
        public virtual DbSet<BaseMaTemp> BaseMaTemp { get; set; }
        public virtual DbSet<Basecd> Basecd { get; set; }
        public virtual DbSet<Basetts> Basetts { get; set; }
        public virtual DbSet<Blood> Blood { get; set; }
        public virtual DbSet<BonusGroup> BonusGroup { get; set; }
        public virtual DbSet<CalFreq> CalFreq { get; set; }
        public virtual DbSet<CalType> CalType { get; set; }
        public virtual DbSet<CalcCondition> CalcCondition { get; set; }
        public virtual DbSet<CandidatesWays> CandidatesWays { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<CarRentRecord> CarRentRecord { get; set; }
        public virtual DbSet<Carcd> Carcd { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<CardTemp> CardTemp { get; set; }
        public virtual DbSet<Cardapp> Cardapp { get; set; }
        public virtual DbSet<Cardlosd> Cardlosd { get; set; }
        public virtual DbSet<Cardtmp> Cardtmp { get; set; }
        public virtual DbSet<Cartime> Cartime { get; set; }
        public virtual DbSet<Certifi> Certifi { get; set; }
        public virtual DbSet<CheNobr> CheNobr { get; set; }
        public virtual DbSet<ChkOtNightFood> ChkOtNightFood { get; set; }
        public virtual DbSet<Code> Code { get; set; }
        public virtual DbSet<CodeFilter> CodeFilter { get; set; }
        public virtual DbSet<CodeGroup> CodeGroup { get; set; }
        public virtual DbSet<Comp> Comp { get; set; }
        public virtual DbSet<CompCodeGroup> CompCodeGroup { get; set; }
        public virtual DbSet<CompDatagroup> CompDatagroup { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractType> ContractType { get; set; }
        public virtual DbSet<Cost> Cost { get; set; }
        public virtual DbSet<CostType> CostType { get; set; }
        public virtual DbSet<Countcd> Countcd { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DataPa> DataPa { get; set; }
        public virtual DbSet<DataPass> DataPass { get; set; }
        public virtual DbSet<Datagroup> Datagroup { get; set; }
        public virtual DbSet<Dept> Dept { get; set; }
        public virtual DbSet<DeptSupervisor> DeptSupervisor { get; set; }
        public virtual DbSet<Depta> Depta { get; set; }
        public virtual DbSet<DeptaSupervisor> DeptaSupervisor { get; set; }
        public virtual DbSet<Deptlevel> Deptlevel { get; set; }
        public virtual DbSet<Depts> Depts { get; set; }
        public virtual DbSet<Di> Di { get; set; }
        public virtual DbSet<DisabilityRank> DisabilityRank { get; set; }
        public virtual DbSet<DisabilityType> DisabilityType { get; set; }
        public virtual DbSet<DocItem> DocItem { get; set; }
        public virtual DbSet<DoorGuard> DoorGuard { get; set; }
        public virtual DbSet<Educode> Educode { get; set; }
        public virtual DbSet<EffAgree> EffAgree { get; set; }
        public virtual DbSet<Effect> Effect { get; set; }
        public virtual DbSet<Effemploy> Effemploy { get; set; }
        public virtual DbSet<Efflvl> Efflvl { get; set; }
        public virtual DbSet<EffsAdmin> EffsAdmin { get; set; }
        public virtual DbSet<EffsAppr> EffsAppr { get; set; }
        public virtual DbSet<EffsApprtts> EffsApprtts { get; set; }
        public virtual DbSet<EffsAssignappend> EffsAssignappend { get; set; }
        public virtual DbSet<EffsAttend> EffsAttend { get; set; }
        public virtual DbSet<EffsBase> EffsBase { get; set; }
        public virtual DbSet<EffsCate> EffsCate { get; set; }
        public virtual DbSet<EffsCateitem> EffsCateitem { get; set; }
        public virtual DbSet<EffsDeptNum> EffsDeptNum { get; set; }
        public virtual DbSet<EffsEducate> EffsEducate { get; set; }
        public virtual DbSet<EffsEducateitem> EffsEducateitem { get; set; }
        public virtual DbSet<EffsFun> EffsFun { get; set; }
        public virtual DbSet<EffsGroup> EffsGroup { get; set; }
        public virtual DbSet<EffsGroupitem> EffsGroupitem { get; set; }
        public virtual DbSet<EffsInterview> EffsInterview { get; set; }
        public virtual DbSet<EffsLearnplan> EffsLearnplan { get; set; }
        public virtual DbSet<EffsMangFnums> EffsMangFnums { get; set; }
        public virtual DbSet<EffsMangappend> EffsMangappend { get; set; }
        public virtual DbSet<EffsMangapprcate> EffsMangapprcate { get; set; }
        public virtual DbSet<EffsMangapprwork> EffsMangapprwork { get; set; }
        public virtual DbSet<EffsMangfinishnote> EffsMangfinishnote { get; set; }
        public virtual DbSet<EffsManginterview> EffsManginterview { get; set; }
        public virtual DbSet<EffsManglearnplan> EffsManglearnplan { get; set; }
        public virtual DbSet<EffsMangrate> EffsMangrate { get; set; }
        public virtual DbSet<EffsNote> EffsNote { get; set; }
        public virtual DbSet<EffsNote1> EffsNote1 { get; set; }
        public virtual DbSet<EffsNote2> EffsNote2 { get; set; }
        public virtual DbSet<EffsNote3> EffsNote3 { get; set; }
        public virtual DbSet<EffsNote4> EffsNote4 { get; set; }
        public virtual DbSet<EffsNote5> EffsNote5 { get; set; }
        public virtual DbSet<EffsNote6> EffsNote6 { get; set; }
        public virtual DbSet<EffsNum> EffsNum { get; set; }
        public virtual DbSet<EffsNumitem> EffsNumitem { get; set; }
        public virtual DbSet<EffsOther> EffsOther { get; set; }
        public virtual DbSet<EffsPersonality> EffsPersonality { get; set; }
        public virtual DbSet<EffsPersonalityItem> EffsPersonalityItem { get; set; }
        public virtual DbSet<EffsRecord> EffsRecord { get; set; }
        public virtual DbSet<EffsSMang> EffsSMang { get; set; }
        public virtual DbSet<EffsSelfcate> EffsSelfcate { get; set; }
        public virtual DbSet<EffsSelfedu> EffsSelfedu { get; set; }
        public virtual DbSet<EffsSelfinterview> EffsSelfinterview { get; set; }
        public virtual DbSet<EffsSelflearnplan> EffsSelflearnplan { get; set; }
        public virtual DbSet<EffsSelfplan> EffsSelfplan { get; set; }
        public virtual DbSet<EffsSelfwork> EffsSelfwork { get; set; }
        public virtual DbSet<EffsTemplet> EffsTemplet { get; set; }
        public virtual DbSet<EffsTempletcate> EffsTempletcate { get; set; }
        public virtual DbSet<EffsTempletcateitem> EffsTempletcateitem { get; set; }
        public virtual DbSet<EffsTempletinterview> EffsTempletinterview { get; set; }
        public virtual DbSet<EffsTempletlearnplan> EffsTempletlearnplan { get; set; }
        public virtual DbSet<EffsTemplettype> EffsTemplettype { get; set; }
        public virtual DbSet<EffsTitle> EffsTitle { get; set; }
        public virtual DbSet<EffsTitleitem> EffsTitleitem { get; set; }
        public virtual DbSet<EffsType> EffsType { get; set; }
        public virtual DbSet<EffsUpfile> EffsUpfile { get; set; }
        public virtual DbSet<EffsWorkSet> EffsWorkSet { get; set; }
        public virtual DbSet<EffstempAa> EffstempAa { get; set; }
        public virtual DbSet<EfftempBb> EfftempBb { get; set; }
        public virtual DbSet<Efftype> Efftype { get; set; }
        public virtual DbSet<EmpTts> EmpTts { get; set; }
        public virtual DbSet<Empcd> Empcd { get; set; }
        public virtual DbSet<Encodingtable> Encodingtable { get; set; }
        public virtual DbSet<Enrich> Enrich { get; set; }
        public virtual DbSet<Erpcode> Erpcode { get; set; }
        public virtual DbSet<ExpDept> ExpDept { get; set; }
        public virtual DbSet<Expcomp> Expcomp { get; set; }
        public virtual DbSet<Explab> Explab { get; set; }
        public virtual DbSet<Expsup> Expsup { get; set; }
        public virtual DbSet<ExtHcode> ExtHcode { get; set; }
        public virtual DbSet<ExtendedHolidays> ExtendedHolidays { get; set; }
        public virtual DbSet<Exttable> Exttable { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<FefcToSpmDept> FefcToSpmDept { get; set; }
        public virtual DbSet<FefcToSpmDeptMang> FefcToSpmDeptMang { get; set; }
        public virtual DbSet<FefcToSpmEmp> FefcToSpmEmp { get; set; }
        public virtual DbSet<FileGroup> FileGroup { get; set; }
        public virtual DbSet<FileGroupRole> FileGroupRole { get; set; }
        public virtual DbSet<FileStructure> FileStructure { get; set; }
        public virtual DbSet<FileStructureGroup> FileStructureGroup { get; set; }
        public virtual DbSet<FileStructureRole> FileStructureRole { get; set; }
        public virtual DbSet<Freq> Freq { get; set; }
        public virtual DbSet<FreqStart> FreqStart { get; set; }
        public virtual DbSet<Frm211d> Frm211d { get; set; }
        public virtual DbSet<Frm211dSalcode> Frm211dSalcode { get; set; }
        public virtual DbSet<Frm22> Frm22 { get; set; }
        public virtual DbSet<Frm23> Frm23 { get; set; }
        public virtual DbSet<Frm24> Frm24 { get; set; }
        public virtual DbSet<Frm26> Frm26 { get; set; }
        public virtual DbSet<Frm27> Frm27 { get; set; }
        public virtual DbSet<Frm272> Frm272 { get; set; }
        public virtual DbSet<Frm28> Frm28 { get; set; }
        public virtual DbSet<Frm29> Frm29 { get; set; }
        public virtual DbSet<Frm2b> Frm2b { get; set; }
        public virtual DbSet<Frm2j> Frm2j { get; set; }
        public virtual DbSet<Frm2p> Frm2p { get; set; }
        public virtual DbSet<Frm2t> Frm2t { get; set; }
        public virtual DbSet<Frm41> Frm41 { get; set; }
        public virtual DbSet<Frm42> Frm42 { get; set; }
        public virtual DbSet<Frm43> Frm43 { get; set; }
        public virtual DbSet<Frm46> Frm46 { get; set; }
        public virtual DbSet<Frm46a> Frm46a { get; set; }
        public virtual DbSet<Frm46b> Frm46b { get; set; }
        public virtual DbSet<Frm46c> Frm46c { get; set; }
        public virtual DbSet<Frm47> Frm47 { get; set; }
        public virtual DbSet<Frm48> Frm48 { get; set; }
        public virtual DbSet<Frm49> Frm49 { get; set; }
        public virtual DbSet<Frm4itype> Frm4itype { get; set; }
        public virtual DbSet<Frm4k> Frm4k { get; set; }
        public virtual DbSet<Frm4l> Frm4l { get; set; }
        public virtual DbSet<Frm4pPrinttype> Frm4pPrinttype { get; set; }
        public virtual DbSet<Frm83> Frm83 { get; set; }
        public virtual DbSet<GetHoliCodeList> GetHoliCodeList { get; set; }
        public virtual DbSet<GiftVoucher> GiftVoucher { get; set; }
        public virtual DbSet<GroupType> GroupType { get; set; }
        public virtual DbSet<Grprelcd> Grprelcd { get; set; }
        public virtual DbSet<Harcode> Harcode { get; set; }
        public virtual DbSet<Hcode> Hcode { get; set; }
        public virtual DbSet<HcodeRule> HcodeRule { get; set; }
        public virtual DbSet<HcodeType> HcodeType { get; set; }
        public virtual DbSet<Hcodes> Hcodes { get; set; }
        public virtual DbSet<Hcodesrate> Hcodesrate { get; set; }
        public virtual DbSet<HolDay> HolDay { get; set; }
        public virtual DbSet<Holi> Holi { get; set; }
        public virtual DbSet<Holicd> Holicd { get; set; }
        public virtual DbSet<HrFile> HrFile { get; set; }
        public virtual DbSet<HrPortalAbs> HrPortalAbs { get; set; }
        public virtual DbSet<HrPortalAttend> HrPortalAttend { get; set; }
        public virtual DbSet<HrPortalEmpInfo> HrPortalEmpInfo { get; set; }
        public virtual DbSet<HrPortalEmpInfoLe> HrPortalEmpInfoLe { get; set; }
        public virtual DbSet<HrPortalOt> HrPortalOt { get; set; }
        public virtual DbSet<IdColumnsData> IdColumnsData { get; set; }
        public virtual DbSet<IdTablesData> IdTablesData { get; set; }
        public virtual DbSet<ImportType> ImportType { get; set; }
        public virtual DbSet<InOutLog> InOutLog { get; set; }
        public virtual DbSet<Inholi> Inholi { get; set; }
        public virtual DbSet<Inpolab> Inpolab { get; set; }
        public virtual DbSet<Inscomp> Inscomp { get; set; }
        public virtual DbSet<Inscountry> Inscountry { get; set; }
        public virtual DbSet<Insglv> Insglv { get; set; }
        public virtual DbSet<Insgrf> Insgrf { get; set; }
        public virtual DbSet<Insgrlv> Insgrlv { get; set; }
        public virtual DbSet<Insgrp> Insgrp { get; set; }
        public virtual DbSet<InsgrpTemp> InsgrpTemp { get; set; }
        public virtual DbSet<InsgrpTemp1> InsgrpTemp1 { get; set; }
        public virtual DbSet<InsgrpTemp2> InsgrpTemp2 { get; set; }
        public virtual DbSet<InsgrpTemp3> InsgrpTemp3 { get; set; }
        public virtual DbSet<InsgrpTemp4> InsgrpTemp4 { get; set; }
        public virtual DbSet<Inslab> Inslab { get; set; }
        public virtual DbSet<Insname> Insname { get; set; }
        public virtual DbSet<InsurType> InsurType { get; set; }
        public virtual DbSet<Insurcd> Insurcd { get; set; }
        public virtual DbSet<Insurlv> Insurlv { get; set; }
        public virtual DbSet<Ipcontrol> Ipcontrol { get; set; }
        public virtual DbSet<JbHrAbs> JbHrAbs { get; set; }
        public virtual DbSet<JbHrAbs1> JbHrAbs1 { get; set; }
        public virtual DbSet<JbHrAbsUnion> JbHrAbsUnion { get; set; }
        public virtual DbSet<JbHrAbst> JbHrAbst { get; set; }
        public virtual DbSet<JbHrAttCard> JbHrAttCard { get; set; }
        public virtual DbSet<JbHrAttend> JbHrAttend { get; set; }
        public virtual DbSet<JbHrBase> JbHrBase { get; set; }
        public virtual DbSet<JbHrBaseTts> JbHrBaseTts { get; set; }
        public virtual DbSet<JbHrCard> JbHrCard { get; set; }
        public virtual DbSet<JbHrCardApp> JbHrCardApp { get; set; }
        public virtual DbSet<JbHrDataGroup> JbHrDataGroup { get; set; }
        public virtual DbSet<JbHrDataPa> JbHrDataPa { get; set; }
        public virtual DbSet<JbHrDataPass> JbHrDataPass { get; set; }
        public virtual DbSet<JbHrDept> JbHrDept { get; set; }
        public virtual DbSet<JbHrDeptLevel> JbHrDeptLevel { get; set; }
        public virtual DbSet<JbHrDeptm> JbHrDeptm { get; set; }
        public virtual DbSet<JbHrDepts> JbHrDepts { get; set; }
        public virtual DbSet<JbHrExtTable> JbHrExtTable { get; set; }
        public virtual DbSet<JbHrHcode> JbHrHcode { get; set; }
        public virtual DbSet<JbHrHoli> JbHrHoli { get; set; }
        public virtual DbSet<JbHrHolicd> JbHrHolicd { get; set; }
        public virtual DbSet<JbHrJob> JbHrJob { get; set; }
        public virtual DbSet<JbHrJobl> JbHrJobl { get; set; }
        public virtual DbSet<JbHrLockWage> JbHrLockWage { get; set; }
        public virtual DbSet<JbHrOt> JbHrOt { get; set; }
        public virtual DbSet<JbHrOt1> JbHrOt1 { get; set; }
        public virtual DbSet<JbHrOtRate> JbHrOtRate { get; set; }
        public virtual DbSet<JbHrOtrcd> JbHrOtrcd { get; set; }
        public virtual DbSet<JbHrReason> JbHrReason { get; set; }
        public virtual DbSet<JbHrRote> JbHrRote { get; set; }
        public virtual DbSet<JbHrRotechg> JbHrRotechg { get; set; }
        public virtual DbSet<JbHrRotet> JbHrRotet { get; set; }
        public virtual DbSet<JbHrTmTable> JbHrTmTable { get; set; }
        public virtual DbSet<JbHrTtsCode> JbHrTtsCode { get; set; }
        public virtual DbSet<JbHrTtscd> JbHrTtscd { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<Jobl> Jobl { get; set; }
        public virtual DbSet<Jobo> Jobo { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<JqColumn> JqColumn { get; set; }
        public virtual DbSet<JqCondition> JqCondition { get; set; }
        public virtual DbSet<JqForeignKey> JqForeignKey { get; set; }
        public virtual DbSet<JqPreCondition> JqPreCondition { get; set; }
        public virtual DbSet<JqSetting> JqSetting { get; set; }
        public virtual DbSet<JqSqlQueryField> JqSqlQueryField { get; set; }
        public virtual DbSet<JqTable> JqTable { get; set; }
        public virtual DbSet<JqUserColumn> JqUserColumn { get; set; }
        public virtual DbSet<Larcode> Larcode { get; set; }
        public virtual DbSet<LessonType> LessonType { get; set; }
        public virtual DbSet<Lican> Lican { get; set; }
        public virtual DbSet<Lng> Lng { get; set; }
        public virtual DbSet<LockWage> LockWage { get; set; }
        public virtual DbSet<MaFood> MaFood { get; set; }
        public virtual DbSet<Maildata> Maildata { get; set; }
        public virtual DbSet<Mailqueue> Mailqueue { get; set; }
        public virtual DbSet<Mailrec> Mailrec { get; set; }
        public virtual DbSet<Mailsend> Mailsend { get; set; }
        public virtual DbSet<Mailwait> Mailwait { get; set; }
        public virtual DbSet<MangUser> MangUser { get; set; }
        public virtual DbSet<Marquee> Marquee { get; set; }
        public virtual DbSet<Marry> Marry { get; set; }
        public virtual DbSet<Master> Master { get; set; }
        public virtual DbSet<MeetingRoom> MeetingRoom { get; set; }
        public virtual DbSet<MeetingRoomRentAttendee> MeetingRoomRentAttendee { get; set; }
        public virtual DbSet<MeetingRoomRentRecord> MeetingRoomRentRecord { get; set; }
        public virtual DbSet<Menugroup> Menugroup { get; set; }
        public virtual DbSet<Menustripstructure> Menustripstructure { get; set; }
        public virtual DbSet<MonthType> MonthType { get; set; }
        public virtual DbSet<Mtcode> Mtcode { get; set; }
        public virtual DbSet<Mtdict> Mtdict { get; set; }
        public virtual DbSet<Mtlng> Mtlng { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsBrowsing> NewsBrowsing { get; set; }
        public virtual DbSet<NewsTarget> NewsTarget { get; set; }
        public virtual DbSet<NigFood> NigFood { get; set; }
        public virtual DbSet<Noeat> Noeat { get; set; }
        public virtual DbSet<NotifyApplyUpdateBase> NotifyApplyUpdateBase { get; set; }
        public virtual DbSet<NotifyClass> NotifyClass { get; set; }
        public virtual DbSet<NotifyTemplate> NotifyTemplate { get; set; }
        public virtual DbSet<OilSubsidyType> OilSubsidyType { get; set; }
        public virtual DbSet<Onduty> Onduty { get; set; }
        public virtual DbSet<Ot> Ot { get; set; }
        public virtual DbSet<Ot1> Ot1 { get; set; }
        public virtual DbSet<OtAttend> OtAttend { get; set; }
        public virtual DbSet<OtB> OtB { get; set; }
        public virtual DbSet<OtBasetts> OtBasetts { get; set; }
        public virtual DbSet<Otc> Otc { get; set; }
        public virtual DbSet<Othcode> Othcode { get; set; }
        public virtual DbSet<Othercd> Othercd { get; set; }
        public virtual DbSet<Otherda> Otherda { get; set; }
        public virtual DbSet<Otpre> Otpre { get; set; }
        public virtual DbSet<OtrateType> OtrateType { get; set; }
        public virtual DbSet<Otratecd> Otratecd { get; set; }
        public virtual DbSet<OtratecdRote> OtratecdRote { get; set; }
        public virtual DbSet<Otrcd> Otrcd { get; set; }
        public virtual DbSet<OutPost> OutPost { get; set; }
        public virtual DbSet<Outcd> Outcd { get; set; }
        public virtual DbSet<OvertimeType> OvertimeType { get; set; }
        public virtual DbSet<Parameter> Parameter { get; set; }
        public virtual DbSet<ParameterTree> ParameterTree { get; set; }
        public virtual DbSet<PayDoc> PayDoc { get; set; }
        public virtual DbSet<Provcd> Provcd { get; set; }
        public virtual DbSet<QBaseM> QBaseM { get; set; }
        public virtual DbSet<QBaseS> QBaseS { get; set; }
        public virtual DbSet<QCastM> QCastM { get; set; }
        public virtual DbSet<QCastS> QCastS { get; set; }
        public virtual DbSet<QQuestionaryM> QQuestionaryM { get; set; }
        public virtual DbSet<QQuestionaryS> QQuestionaryS { get; set; }
        public virtual DbSet<QTheme> QTheme { get; set; }
        public virtual DbSet<QTitle> QTitle { get; set; }
        public virtual DbSet<QType> QType { get; set; }
        public virtual DbSet<QaPublished> QaPublished { get; set; }
        public virtual DbSet<Qadetail> Qadetail { get; set; }
        public virtual DbSet<Qamaster> Qamaster { get; set; }
        public virtual DbSet<Qcategory> Qcategory { get; set; }
        public virtual DbSet<Qdetail> Qdetail { get; set; }
        public virtual DbSet<Qqitem> Qqitem { get; set; }
        public virtual DbSet<Qqmcq> Qqmcq { get; set; }
        public virtual DbSet<QqmcqDetail> QqmcqDetail { get; set; }
        public virtual DbSet<QqmcqDetailTpl> QqmcqDetailTpl { get; set; }
        public virtual DbSet<Qqtype> Qqtype { get; set; }
        public virtual DbSet<Qtpl> Qtpl { get; set; }
        public virtual DbSet<QtplCategory> QtplCategory { get; set; }
        public virtual DbSet<RangeSet> RangeSet { get; set; }
        public virtual DbSet<Relaytable> Relaytable { get; set; }
        public virtual DbSet<Relcode> Relcode { get; set; }
        public virtual DbSet<Relishcd> Relishcd { get; set; }
        public virtual DbSet<Repair> Repair { get; set; }
        public virtual DbSet<ReportEntitleExtend> ReportEntitleExtend { get; set; }
        public virtual DbSet<ResponsibilityType> ResponsibilityType { get; set; }
        public virtual DbSet<Retchoo> Retchoo { get; set; }
        public virtual DbSet<Rote> Rote { get; set; }
        public virtual DbSet<RoteBonus> RoteBonus { get; set; }
        public virtual DbSet<Rotechg> Rotechg { get; set; }
        public virtual DbSet<Rotet> Rotet { get; set; }
        public virtual DbSet<Rsadvtp> Rsadvtp { get; set; }
        public virtual DbSet<Rsadvun> Rsadvun { get; set; }
        public virtual DbSet<Rsemp> Rsemp { get; set; }
        public virtual DbSet<Rsemppr> Rsemppr { get; set; }
        public virtual DbSet<Rsempreq> Rsempreq { get; set; }
        public virtual DbSet<Rsepadv> Rsepadv { get; set; }
        public virtual DbSet<Rsepint> Rsepint { get; set; }
        public virtual DbSet<Rsevl> Rsevl { get; set; }
        public virtual DbSet<Rsevlcd> Rsevlcd { get; set; }
        public virtual DbSet<Rsevlgp> Rsevlgp { get; set; }
        public virtual DbSet<Rsevlgpd> Rsevlgpd { get; set; }
        public virtual DbSet<Rsevllvl> Rsevllvl { get; set; }
        public virtual DbSet<Rsintps> Rsintps { get; set; }
        public virtual DbSet<Rsintpsd> Rsintpsd { get; set; }
        public virtual DbSet<Rslican> Rslican { get; set; }
        public virtual DbSet<Rsmaster> Rsmaster { get; set; }
        public virtual DbSet<Rsoktp> Rsoktp { get; set; }
        public virtual DbSet<Rsorgpns> Rsorgpns { get; set; }
        public virtual DbSet<Rsrejob> Rsrejob { get; set; }
        public virtual DbSet<Rsres> Rsres { get; set; }
        public virtual DbSet<Rsresd> Rsresd { get; set; }
        public virtual DbSet<Rsschl> Rsschl { get; set; }
        public virtual DbSet<Rsworks> Rsworks { get; set; }
        public virtual DbSet<Rule> Rule { get; set; }
        public virtual DbSet<Rules> Rules { get; set; }
        public virtual DbSet<Salabs> Salabs { get; set; }
        public virtual DbSet<Saladr> Saladr { get; set; }
        public virtual DbSet<SalaryPassWord> SalaryPassWord { get; set; }
        public virtual DbSet<SalaryTransfer> SalaryTransfer { get; set; }
        public virtual DbSet<Salarycalc> Salarycalc { get; set; }
        public virtual DbSet<Salatt> Salatt { get; set; }
        public virtual DbSet<Salattr> Salattr { get; set; }
        public virtual DbSet<Salbasd> Salbasd { get; set; }
        public virtual DbSet<Salbasd1> Salbasd1 { get; set; }
        public virtual DbSet<Salbase> Salbase { get; set; }
        public virtual DbSet<Salbasnd> Salbasnd { get; set; }
        public virtual DbSet<Salbastd> Salbastd { get; set; }
        public virtual DbSet<Salcode> Salcode { get; set; }
        public virtual DbSet<Salenrich> Salenrich { get; set; }
        public virtual DbSet<Salfunction> Salfunction { get; set; }
        public virtual DbSet<Salpw> Salpw { get; set; }
        public virtual DbSet<Saltycd> Saltycd { get; set; }
        public virtual DbSet<SaltycdDays> SaltycdDays { get; set; }
        public virtual DbSet<SaltycdDiv> SaltycdDiv { get; set; }
        public virtual DbSet<SaltycdHours> SaltycdHours { get; set; }
        public virtual DbSet<Schl> Schl { get; set; }
        public virtual DbSet<Sex> Sex { get; set; }
        public virtual DbSet<SiteMapSalaDr> SiteMapSalaDr { get; set; }
        public virtual DbSet<SosId> SosId { get; set; }
        public virtual DbSet<Spmorganization> Spmorganization { get; set; }
        public virtual DbSet<Sptyp> Sptyp { get; set; }
        public virtual DbSet<Sqlupdatetable> Sqlupdatetable { get; set; }
        public virtual DbSet<Starsing> Starsing { get; set; }
        public virtual DbSet<Statchg> Statchg { get; set; }
        public virtual DbSet<Station> Station { get; set; }
        public virtual DbSet<Subcode> Subcode { get; set; }
        public virtual DbSet<Subs> Subs { get; set; }
        public virtual DbSet<SysDataStructure> SysDataStructure { get; set; }
        public virtual DbSet<SysDefault> SysDefault { get; set; }
        public virtual DbSet<SysLoginPw> SysLoginPw { get; set; }
        public virtual DbSet<SysLoginTime> SysLoginTime { get; set; }
        public virtual DbSet<SysRole> SysRole { get; set; }
        public virtual DbSet<SysUserRole> SysUserRole { get; set; }
        public virtual DbSet<Syslog> Syslog { get; set; }
        public virtual DbSet<TableAtt> TableAtt { get; set; }
        public virtual DbSet<Taxlvl> Taxlvl { get; set; }
        public virtual DbSet<Tbase> Tbase { get; set; }
        public virtual DbSet<Tcode> Tcode { get; set; }
        public virtual DbSet<Temp1> Temp1 { get; set; }
        public virtual DbSet<Temp2> Temp2 { get; set; }
        public virtual DbSet<Temp3> Temp3 { get; set; }
        public virtual DbSet<Temp6> Temp6 { get; set; }
        public virtual DbSet<TmpNobr> TmpNobr { get; set; }
        public virtual DbSet<Tmtable> Tmtable { get; set; }
        public virtual DbSet<TmtableImport> TmtableImport { get; set; }
        public virtual DbSet<TmtableTmp> TmtableTmp { get; set; }
        public virtual DbSet<Tr2docd> Tr2docd { get; set; }
        public virtual DbSet<Traddrcd> Traddrcd { get; set; }
        public virtual DbSet<Tradecd> Tradecd { get; set; }
        public virtual DbSet<Tradmit> Tradmit { get; set; }
        public virtual DbSet<Tradmitt> Tradmitt { get; set; }
        public virtual DbSet<Trapply> Trapply { get; set; }
        public virtual DbSet<Traskcd> Traskcd { get; set; }
        public virtual DbSet<Traskdt> Traskdt { get; set; }
        public virtual DbSet<Trasscode> Trasscode { get; set; }
        public virtual DbSet<Tratt> Tratt { get; set; }
        public virtual DbSet<Trcompy> Trcompy { get; set; }
        public virtual DbSet<Trcos> Trcos { get; set; }
        public virtual DbSet<Trcosc> Trcosc { get; set; }
        public virtual DbSet<Trcoscd> Trcoscd { get; set; }
        public virtual DbSet<Trcosf> Trcosf { get; set; }
        public virtual DbSet<Trcosfee> Trcosfee { get; set; }
        public virtual DbSet<Trcosp> Trcosp { get; set; }
        public virtual DbSet<Trcostr> Trcostr { get; set; }
        public virtual DbSet<Trdud> Trdud { get; set; }
        public virtual DbSet<Trdur> Trdur { get; set; }
        public virtual DbSet<Tremail> Tremail { get; set; }
        public virtual DbSet<Tremlif> Tremlif { get; set; }
        public virtual DbSet<Trfeecd> Trfeecd { get; set; }
        public virtual DbSet<Trjbset> Trjbset { get; set; }
        public virtual DbSet<Trlearned> Trlearned { get; set; }
        public virtual DbSet<Trover> Trover { get; set; }
        public virtual DbSet<Trq> Trq { get; set; }
        public virtual DbSet<Trqg> Trqg { get; set; }
        public virtual DbSet<Trrejet> Trrejet { get; set; }
        public virtual DbSet<Trrejtcd> Trrejtcd { get; set; }
        public virtual DbSet<Trsub> Trsub { get; set; }
        public virtual DbSet<Trtcr> Trtcr { get; set; }
        public virtual DbSet<Trtcrdt> Trtcrdt { get; set; }
        public virtual DbSet<Trtype> Trtype { get; set; }
        public virtual DbSet<Trvalcd> Trvalcd { get; set; }
        public virtual DbSet<Trvalgd> Trvalgd { get; set; }
        public virtual DbSet<Trvalgdg> Trvalgdg { get; set; }
        public virtual DbSet<Tryearpa> Tryearpa { get; set; }
        public virtual DbSet<Ttscd> Ttscd { get; set; }
        public virtual DbSet<Ttscode> Ttscode { get; set; }
        public virtual DbSet<Ttt> Ttt { get; set; }
        public virtual DbSet<TwTax> TwTax { get; set; }
        public virtual DbSet<TwTaxItem> TwTaxItem { get; set; }
        public virtual DbSet<TwTaxSubcode> TwTaxSubcode { get; set; }
        public virtual DbSet<TwTaxSummary> TwTaxSummary { get; set; }
        public virtual DbSet<Twaged> Twaged { get; set; }
        public virtual DbSet<Tyrtax> Tyrtax { get; set; }
        public virtual DbSet<UCode> UCode { get; set; }
        public virtual DbSet<UDatagroup> UDatagroup { get; set; }
        public virtual DbSet<UDataid> UDataid { get; set; }
        public virtual DbSet<UError> UError { get; set; }
        public virtual DbSet<UFilter> UFilter { get; set; }
        public virtual DbSet<UFldlst> UFldlst { get; set; }
        public virtual DbSet<UGroup> UGroup { get; set; }
        public virtual DbSet<ULogin> ULogin { get; set; }
        public virtual DbSet<UOrder> UOrder { get; set; }
        public virtual DbSet<UPrg> UPrg { get; set; }
        public virtual DbSet<UPrgid> UPrgid { get; set; }
        public virtual DbSet<UQuery> UQuery { get; set; }
        public virtual DbSet<USys> USys { get; set; }
        public virtual DbSet<USys1> USys1 { get; set; }
        public virtual DbSet<USys10> USys10 { get; set; }
        public virtual DbSet<USys2> USys2 { get; set; }
        public virtual DbSet<USys3> USys3 { get; set; }
        public virtual DbSet<USys4> USys4 { get; set; }
        public virtual DbSet<USys5> USys5 { get; set; }
        public virtual DbSet<USys6> USys6 { get; set; }
        public virtual DbSet<USys7> USys7 { get; set; }
        public virtual DbSet<USys7a> USys7a { get; set; }
        public virtual DbSet<USys8> USys8 { get; set; }
        public virtual DbSet<USys9> USys9 { get; set; }
        public virtual DbSet<UTts> UTts { get; set; }
        public virtual DbSet<UUser> UUser { get; set; }
        public virtual DbSet<UUsercomp> UUsercomp { get; set; }
        public virtual DbSet<UWkid> UWkid { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UpBaseRecord> UpBaseRecord { get; set; }
        public virtual DbSet<Upfile> Upfile { get; set; }
        public virtual DbSet<Uptype> Uptype { get; set; }
        public virtual DbSet<UserDefine> UserDefine { get; set; }
        public virtual DbSet<Userdefinegroup> Userdefinegroup { get; set; }
        public virtual DbSet<Userdefinelayout> Userdefinelayout { get; set; }
        public virtual DbSet<Userdefinesource> Userdefinesource { get; set; }
        public virtual DbSet<Userdefinevalue> Userdefinevalue { get; set; }
        public virtual DbSet<VBase> VBase { get; set; }
        public virtual DbSet<ViewAbswriteoff> ViewAbswriteoff { get; set; }
        public virtual DbSet<ViewEmployeeLanaguage> ViewEmployeeLanaguage { get; set; }
        public virtual DbSet<ViewRotechg> ViewRotechg { get; set; }
        public virtual DbSet<ViewTwTax> ViewTwTax { get; set; }
        public virtual DbSet<ViewTwTaxItem> ViewTwTaxItem { get; set; }
        public virtual DbSet<ViewTwTaxSummary> ViewTwTaxSummary { get; set; }
        public virtual DbSet<Wage> Wage { get; set; }
        public virtual DbSet<WageB> WageB { get; set; }
        public virtual DbSet<Waged> Waged { get; set; }
        public virtual DbSet<WagedB> WagedB { get; set; }
        public virtual DbSet<WagedSal> WagedSal { get; set; }
        public virtual DbSet<Wagedd> Wagedd { get; set; }
        public virtual DbSet<Wagesos> Wagesos { get; set; }
        public virtual DbSet<Wbsptyp> Wbsptyp { get; set; }
        public virtual DbSet<Wcode> Wcode { get; set; }
        public virtual DbSet<Websalbasd> Websalbasd { get; set; }
        public virtual DbSet<Welf> Welf { get; set; }
        public virtual DbSet<Workcd> Workcd { get; set; }
        public virtual DbSet<Works> Works { get; set; }
        public virtual DbSet<Writerulenobrtable> Writerulenobrtable { get; set; }
        public virtual DbSet<YearHoliday> YearHoliday { get; set; }
        public virtual DbSet<YearRest> YearRest { get; set; }
        public virtual DbSet<Yrermak> Yrermak { get; set; }
        public virtual DbSet<Yrerr> Yrerr { get; set; }
        public virtual DbSet<Yrfomat> Yrfomat { get; set; }
        public virtual DbSet<Yrformat> Yrformat { get; set; }
        public virtual DbSet<Yrforsub> Yrforsub { get; set; }
        public virtual DbSet<Yrhsn> Yrhsn { get; set; }
        public virtual DbSet<Yrid> Yrid { get; set; }
        public virtual DbSet<Yrina> Yrina { get; set; }
        public virtual DbSet<Yrinsur> Yrinsur { get; set; }
        public virtual DbSet<Yrmark> Yrmark { get; set; }
        public virtual DbSet<Yrtax> Yrtax { get; set; }
        public virtual DbSet<Yrwel> Yrwel { get; set; }
        public virtual DbSet<人事系統加班資料表> 人事系統加班資料表 { get; set; }
        public virtual DbSet<人事系統員工基本資料表> 人事系統員工基本資料表 { get; set; }
        public virtual DbSet<人事系統員工基本資料表需加異動日> 人事系統員工基本資料表需加異動日 { get; set; }
        public virtual DbSet<人事系統員工異動資料表> 人事系統員工異動資料表 { get; set; }
        public virtual DbSet<人事系統留停人員報表> 人事系統留停人員報表 { get; set; }
        public virtual DbSet<人事系統留停復職日期> 人事系統留停復職日期 { get; set; }
        public virtual DbSet<SysPage> SysPage { get; set; }
        public virtual DbSet<SysApiVoid> SysApiVoid { get; set; }
        public virtual DbSet<SysPageApiVoid> SysPageApiVoid { get; set; }
        public virtual DbSet<SysRolePage> SysRolePage { get; set; }
        public virtual DbSet<AttendAbnormal> AttendAbnormal { get; set; }
        public virtual DbSet<AttendAbnormalCheck> AttendAbnormalCheck { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<ResetPasswordKey> ResetPasswordKey { get; set; }
        public virtual DbSet<SysApiVoidBlackList> SysApiVoidBlackList { get; set; }
        public virtual DbSet<SysApiVoidWhiteList> SysApiVoidWhiteList { get; set; }
        public virtual DbSet<FileInfo> FileInfo { get; set; }
        public virtual DbSet<DiversionShift> DiversionShift { get; set; }
        public virtual DbSet<DiversionGroup> DiversionGroup { get; set; }
        public virtual DbSet<WorkLog> WorkLog { get; set; }
        public virtual DbSet<TemperoturyReport> TemperoturyReport { get; set; }
        public virtual DbSet<DiversionAttendType> DiversionAttendType { get; set; }
        public virtual DbSet<EmployeeRule> EmployeeRule { get; set; }
        private static UserInfo GetUserInfo(ClaimsPrincipal user)
        {
            UserInfo userInfo = new UserInfo();
            var userData = user.Claims.FirstOrDefault(p => p.Type.Contains("userdata"));
            if (userData != null)
            {
                userInfo = JsonConvert.DeserializeObject<UserInfo>(userData.Value);
            }
            return userInfo;
        }
        public class Connection
        {
            public string Name { get; set; }
            public string ConnectionStrings { get; set; }
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                string Connection = _configuration.GetSection("ConnectionStrings:DefaultConnection").Get<string>().ToString();
                if (_httpContext == null || _httpContext?.User == null)
                {
                    optionsBuilder.UseSqlServer(Connection);
                }
                else
                {
                    UserInfo userInfo = GetUserInfo(_httpContext?.User);
                    string clientClaim = userInfo.Connection;
                    if (clientClaim == null || clientClaim.Trim().Length == 0)
                    {
                        optionsBuilder.UseSqlServer(Connection);
                    }
                    else
                    {
                        List<Connection> SubscriptionConnection = _configuration.GetSection("ConnectionStrings:SubscriptionConnection").Get<Connection[]>().ToList();
                        Connection = SubscriptionConnection.Where(p => p.Name == clientClaim).FirstOrDefault().ConnectionStrings;
                        optionsBuilder.UseSqlServer(Connection);
                    }
                }
            }
            //            if (!optionsBuilder.IsConfigured)
            //            {
            //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            //                optionsBuilder.UseSqlServer("Data Source=192.168.1.12;Initial Catalog=SINHERHR;Persist Security Info=True;User ID=JB2;Password=JB8421");
            //            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDbFunction(
                () => GetTotalYears("", DateTime.Now)).HasName("GetTotalYears").HasSchema("dbo");

            modelBuilder.Entity<Abs>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.HCode });

                entity.ToTable("ABS");

                entity.HasComment("請假資料，包含得假資料及請假資料from holystone db");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Balance).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Guid)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LeaveHours).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nocalc).HasColumnName("nocalc");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.Syscreate1).HasColumnName("SYSCREATE1");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Abs1>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.HCode });

                entity.ToTable("ABS1");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Abord).HasColumnName("ABORD");

                entity.Property(e => e.Bdate2)
                    .HasColumnName("BDATE2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime2)
                    .IsRequired()
                    .HasColumnName("BTIME2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Btime3)
                    .IsRequired()
                    .HasColumnName("BTIME3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CfmMan)
                    .IsRequired()
                    .HasColumnName("CFM_MAN ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cust)
                    .IsRequired()
                    .HasColumnName("CUST")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Edate2)
                    .HasColumnName("EDATE2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime2)
                    .IsRequired()
                    .HasColumnName("ETIME2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime3)
                    .IsRequired()
                    .HasColumnName("ETIME3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoType)
                    .IsRequired()
                    .HasColumnName("GO_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Onetomany).HasColumnName("ONETOMANY");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Target)
                    .IsRequired()
                    .HasColumnName("TARGET")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Abs1Basetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Abs1Basetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsAttend");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<AbsBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsBasetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Flag)
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HCodeDisp)
                    .HasColumnName("H_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotSum).HasColumnName("NOT_SUM");

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsExt>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Hcode });

                entity.ToTable("ABS_EXT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hcode)
                    .HasColumnName("HCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CashHours)
                    .HasColumnName("CASH_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.ExtHours)
                    .HasColumnName("EXT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HName)
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Ntrans).HasColumnName("NTRANS");

                entity.Property(e => e.Ptrans).HasColumnName("PTRANS");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Sno)
                    .HasColumnName("SNO")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AbsHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AbsHcode");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HEname)
                    .IsRequired()
                    .HasColumnName("H_ENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Absc>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("ABSC");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Absd>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("ABSD");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Absadd)
                    .IsRequired()
                    .HasColumnName("ABSADD")
                    .HasMaxLength(50);

                entity.Property(e => e.Abssubtract)
                    .IsRequired()
                    .HasColumnName("ABSSUBTRACT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Usehour)
                    .HasColumnName("USEHOUR")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Abspre>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Btime, e.Etime });

                entity.ToTable("ABSPRE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Abs1Hrs)
                    .HasColumnName("ABS1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Abs2Hrs)
                    .HasColumnName("ABS2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Abst>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Edate, e.HCode });

                entity.ToTable("ABST");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode1)
                    .IsRequired()
                    .HasColumnName("T_CODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode2)
                    .IsRequired()
                    .HasColumnName("T_CODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TCode3)
                    .IsRequired()
                    .HasColumnName("T_CODE3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Acccd>(entity =>
            {
                entity.HasKey(e => e.Acccd1);

                entity.ToTable("ACCCD");

                entity.Property(e => e.Acccd1)
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.AccTr)
                    .IsRequired()
                    .HasColumnName("ACC_TR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AcccdDisp)
                    .HasColumnName("ACCCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Acccr)
                    .IsRequired()
                    .HasColumnName("ACCCR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Accdr)
                    .IsRequired()
                    .HasColumnName("ACCDR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Accname)
                    .IsRequired()
                    .HasColumnName("ACCNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.AccnameE)
                    .IsRequired()
                    .HasColumnName("ACCNAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Acccdattr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACCCDATTR");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Accsal>(entity =>
            {
                entity.HasKey(e => new { e.DNo, e.Acccd })
                    .HasName("PK__ACCSAL__7B4181083A9F1AEC");

                entity.ToTable("ACCSAL");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasComment("費用代碼");

                entity.Property(e => e.Acccd)
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50)
                    .HasComment("科目代碼");

                entity.Property(e => e.CodeC)
                    .HasColumnName("CODE_C")
                    .HasMaxLength(50)
                    .HasComment("貸方科目");

                entity.Property(e => e.CodeD)
                    .HasColumnName("CODE_D")
                    .HasMaxLength(50)
                    .HasComment("借方科目");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasComment("建檔日期");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasComment("建檔人員");
            });

            modelBuilder.Entity<Apgpcd>(entity =>
            {
                entity.HasKey(e => e.Apgrpcd);

                entity.ToTable("APGPCD");

                entity.Property(e => e.Apgrpcd)
                    .HasColumnName("APGRPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Apgnote)
                    .IsRequired()
                    .HasColumnName("APGNOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apgnote1)
                    .IsRequired()
                    .HasColumnName("APGNOTE1")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apgrpname)
                    .IsRequired()
                    .HasColumnName("APGRPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.App1)
                    .IsRequired()
                    .HasColumnName("APP1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.App2)
                    .IsRequired()
                    .HasColumnName("APP2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.App3)
                    .IsRequired()
                    .HasColumnName("APP3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Apgpit>(entity =>
            {
                entity.HasKey(e => e.Apgrpcd);

                entity.ToTable("APGPIT");

                entity.Property(e => e.Apgrpcd)
                    .HasColumnName("APGRPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Itemcd)
                    .IsRequired()
                    .HasColumnName("ITEMCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Apitem>(entity =>
            {
                entity.HasKey(e => e.Itemcd);

                entity.ToTable("APITEM");

                entity.Property(e => e.Itemcd)
                    .HasColumnName("ITEMCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasMaxLength(50);

                entity.Property(e => e.Itemname)
                    .IsRequired()
                    .HasColumnName("ITEMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Tyemcd)
                    .IsRequired()
                    .HasColumnName("TYEMCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valcd)
                    .IsRequired()
                    .HasColumnName("VALCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AppConfig>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code, e.Comp });

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.ControlType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<Appdeptm>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Ser, e.Deptm });

                entity.ToTable("APPDEPTM");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Qty)
                    .HasColumnName("QTY")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ApplicationInfo>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationCategory)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AssemblyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).IsRequired();
            });

            modelBuilder.Entity<ApplicationStructure>(entity =>
            {
                entity.HasKey(e => e.NodeId);

                entity.Property(e => e.NodeId).HasColumnName("NodeID");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ApplicationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomizeSetting).IsRequired();

                entity.Property(e => e.DataAdapterId).HasColumnName("DataAdapterID");

                entity.Property(e => e.Field01).HasMaxLength(50);

                entity.Property(e => e.Field02).HasMaxLength(50);

                entity.Property(e => e.Field03).HasMaxLength(50);

                entity.Property(e => e.Field04).HasMaxLength(50);

                entity.Property(e => e.Field05).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ApplicationUserRule>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.ApplicationType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Field01).HasMaxLength(50);

                entity.Property(e => e.Field02).HasMaxLength(50);

                entity.Property(e => e.Field03).HasMaxLength(50);

                entity.Property(e => e.Field04).HasMaxLength(50);

                entity.Property(e => e.Field05).HasMaxLength(50);

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApplyUpdateBase>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr1IsChanged).HasColumnName("ADDR1_IsChanged");

                entity.Property(e => e.Addr1Old)
                    .IsRequired()
                    .HasColumnName("ADDR1_Old")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr2IsChanged).HasColumnName("ADDR2_IsChanged");

                entity.Property(e => e.Addr2Old)
                    .IsRequired()
                    .HasColumnName("ADDR2_Old")
                    .HasMaxLength(60);

                entity.Property(e => e.ApplyDatetime).HasColumnType("datetime");

                entity.Property(e => e.ApplyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApproveDatetime).HasColumnType("datetime");

                entity.Property(e => e.ApproveMan).HasMaxLength(50);

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.BornAddrIsChanged).HasColumnName("BORN_ADDR_IsChanged");

                entity.Property(e => e.BornAddrOld)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsm2IsChanged).HasColumnName("CONT_GSM2_IsChanged");

                entity.Property(e => e.ContGsm2Old)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContGsmIsChanged).HasColumnName("CONT_GSM_IsChanged");

                entity.Property(e => e.ContGsmOld)
                    .IsRequired()
                    .HasColumnName("CONT_GSM_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContMan2IsChanged).HasColumnName("CONT_MAN2_IsChanged");

                entity.Property(e => e.ContMan2Old)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2_Old")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ContManIsChanged).HasColumnName("CONT_MAN_IsChanged");

                entity.Property(e => e.ContManOld)
                    .IsRequired()
                    .HasColumnName("CONT_MAN_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel1)
                    .IsRequired()
                    .HasColumnName("CONT_REL1")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel1IsChanged).HasColumnName("CONT_REL1_IsChanged");

                entity.Property(e => e.ContRel1Old)
                    .IsRequired()
                    .HasColumnName("CONT_REL1_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel2)
                    .IsRequired()
                    .HasColumnName("CONT_REL2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContRel2IsChanged).HasColumnName("CONT_REL2_IsChanged");

                entity.Property(e => e.ContRel2Old)
                    .IsRequired()
                    .HasColumnName("CONT_REL2_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTel2IsChanged).HasColumnName("CONT_TEL2_IsChanged");

                entity.Property(e => e.ContTel2Old)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.ContTelIsChanged).HasColumnName("CONT_TEL_IsChanged");

                entity.Property(e => e.ContTelOld)
                    .IsRequired()
                    .HasColumnName("CONT_TEL_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.EmailIsChanged).HasColumnName("EMAIL_IsChanged");

                entity.Property(e => e.EmailOld)
                    .IsRequired()
                    .HasColumnName("EMAIL_Old")
                    .HasMaxLength(60);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.GsmIsChanged).HasColumnName("GSM_IsChanged");

                entity.Property(e => e.GsmOld)
                    .IsRequired()
                    .HasColumnName("GSM_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1IsChanged).HasColumnName("POSTCODE1_IsChanged");

                entity.Property(e => e.Postcode1Old)
                    .IsRequired()
                    .HasColumnName("POSTCODE1_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2IsChanged).HasColumnName("POSTCODE2_IsChanged");

                entity.Property(e => e.Postcode2Old)
                    .IsRequired()
                    .HasColumnName("POSTCODE2_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);

                entity.Property(e => e.ProvinceIsChanged).HasColumnName("PROVINCE_IsChanged");

                entity.Property(e => e.ProvinceOld)
                    .IsRequired()
                    .HasColumnName("PROVINCE_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Subtel)
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.SubtelIsChanged).HasColumnName("SUBTEL_IsChanged");

                entity.Property(e => e.SubtelOld)
                    .HasColumnName("SUBTEL_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1IsChanged).HasColumnName("TEL1_IsChanged");

                entity.Property(e => e.Tel1Old)
                    .IsRequired()
                    .HasColumnName("TEL1_Old")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2IsChanged).HasColumnName("TEL2_IsChanged");

                entity.Property(e => e.Tel2Old)
                    .IsRequired()
                    .HasColumnName("TEL2_Old")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appra>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Ser });

                entity.ToTable("APPRA");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Abs)
                    .HasColumnName("ABS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ap)
                    .HasColumnName("AP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Apgrpcd)
                    .IsRequired()
                    .HasColumnName("APGRPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Aptype)
                    .IsRequired()
                    .HasColumnName("APTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vn)
                    .HasColumnName("VN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vp)
                    .IsRequired()
                    .HasColumnName("VP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vr)
                    .IsRequired()
                    .HasColumnName("VR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vt)
                    .HasColumnName("VT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Appramt>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("APPRAMT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Damt)
                    .HasColumnName("DAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Itemcd)
                    .IsRequired()
                    .HasColumnName("ITEMCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.V1).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.V2).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vv)
                    .HasColumnName("VV")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appramtt>(entity =>
            {
                entity.HasKey(e => new { e.Deptm, e.Nobr, e.Yymm, e.Ser });

                entity.ToTable("APPRAMTT");

                entity.Property(e => e.Deptm)
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Absamt)
                    .HasColumnName("ABSAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Abspot)
                    .HasColumnName("ABSPOT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Damt)
                    .HasColumnName("DAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");
            });

            modelBuilder.Entity<Appras>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("APPRAS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Itemcd)
                    .IsRequired()
                    .HasColumnName("ITEMCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.R1).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.R2).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.R3).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.V1).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.V2).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.V3).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Apprl>(entity =>
            {
                entity.HasKey(e => new { e.Yearb, e.Yeare });

                entity.ToTable("APPRL");

                entity.Property(e => e.Yearb)
                    .HasColumnName("YEARB")
                    .HasMaxLength(50);

                entity.Property(e => e.Yeare)
                    .HasColumnName("YEARE")
                    .HasMaxLength(50);

                entity.Property(e => e.Appr)
                    .HasColumnName("APPR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Apptype>(entity =>
            {
                entity.HasKey(e => e.Tyemcd);

                entity.ToTable("APPTYPE");

                entity.Property(e => e.Tyemcd)
                    .HasColumnName("TYEMCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Tyemname)
                    .IsRequired()
                    .HasColumnName("TYEMNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appwage>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("APPWAGE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AAmt)
                    .HasColumnName("A_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BAmt)
                    .HasColumnName("B_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BVt)
                    .HasColumnName("B_VT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DDay)
                    .HasColumnName("D_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DVt)
                    .HasColumnName("D_VT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NDay)
                    .IsRequired()
                    .HasColumnName("N_DAY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PAmt)
                    .HasColumnName("P_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.PDay)
                    .HasColumnName("P_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RAmt)
                    .HasColumnName("R_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RDay)
                    .HasColumnName("R_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAmt)
                    .HasColumnName("S_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SDay)
                    .HasColumnName("S_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TAmt)
                    .HasColumnName("T_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WDay)
                    .HasColumnName("W_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appyear>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("APPYEAR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Efv1)
                    .HasColumnName("EFV1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efv2)
                    .HasColumnName("EFV2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efvt)
                    .HasColumnName("EFVT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Elv1)
                    .HasColumnName("ELV1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Elv2)
                    .HasColumnName("ELV2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Elvt)
                    .HasColumnName("ELVT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Etot)
                    .HasColumnName("ETOT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fv1)
                    .HasColumnName("FV1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fv2)
                    .HasColumnName("FV2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fvt)
                    .HasColumnName("FVT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Lv1)
                    .HasColumnName("LV1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lv2)
                    .HasColumnName("LV2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lvt)
                    .HasColumnName("LVT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Tot)
                    .HasColumnName("TOT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Aptype>(entity =>
            {
                entity.HasKey(e => e.Aptype1);

                entity.ToTable("APTYPE");

                entity.Property(e => e.Aptype1)
                    .HasColumnName("APTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Aptypename)
                    .IsRequired()
                    .HasColumnName("APTYPENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Apvalcd>(entity =>
            {
                entity.HasKey(e => e.Valcd);

                entity.ToTable("APVALCD");

                entity.Property(e => e.Valcd)
                    .HasColumnName("VALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.V1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.V2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.V3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.V4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.V5)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Army>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ARMY");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Assess>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.HasIndex(e => new { e.AssessCatSCode, e.SCode })
                    .HasName("uc_AssessID")
                    .IsUnique();

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.AssessCatSCode)
                    .IsRequired()
                    .HasColumnName("AssessCat_sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasMaxLength(50);

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SFraction)
                    .IsRequired()
                    .HasColumnName("sFraction")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(500);

                entity.Property(e => e.SOrder).HasColumnName("sOrder");
            });

            modelBuilder.Entity<AssessCat>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.HasIndex(e => new { e.STemplateCode, e.SCode })
                    .HasName("uc_AssessCatID")
                    .IsUnique();

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(200);

                entity.Property(e => e.STemplateCode)
                    .IsRequired()
                    .HasColumnName("sTemplateCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Attbak>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("ATTBAK");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Attcard>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.T1 })
                    .HasName("PK_ATTCARD_1");

                entity.ToTable("ATTCARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.T1).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd1)
                    .IsRequired()
                    .HasColumnName("DD1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dd2)
                    .IsRequired()
                    .HasColumnName("DD2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Lost1).HasColumnName("LOST1");

                entity.Property(e => e.Lost2).HasColumnName("LOST2");

                entity.Property(e => e.Nomody).HasColumnName("NOMODY");

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.T2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tt1)
                    .IsRequired()
                    .HasColumnName("TT1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tt2)
                    .IsRequired()
                    .HasColumnName("TT2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Attend>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("ATTEND");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.DelayMins).HasColumnName("DELAY_MINS");

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EarlyMins).HasColumnName("EARLY_MINS");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelHrs)
                    .HasColumnName("REL_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteH)
                    .IsRequired()
                    .HasColumnName("ROTE_H")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt)
                    .HasColumnName("SPECAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specsalcd)
                    .HasColumnName("SPECSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Stationamt)
                    .HasColumnName("STATIONAMT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<AttendBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AttendBasetts");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliCode)
                    .IsRequired()
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AttendTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("attend_tmp");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Attyear>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("ATTYEAR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Attno)
                    .HasColumnName("ATTNO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Award>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate });

                entity.ToTable("AWARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwChk).HasColumnName("AW_CHK");

                entity.Property(e => e.AwChk1).HasColumnName("AW_CHK1");

                entity.Property(e => e.AwChk2).HasColumnName("AW_CHK2");

                entity.Property(e => e.AwChk3).HasColumnName("AW_CHK3");

                entity.Property(e => e.Award1)
                    .HasColumnName("AWARD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award2)
                    .HasColumnName("AWARD2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award3)
                    .HasColumnName("AWARD3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award4)
                    .HasColumnName("AWARD4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Award5).HasColumnName("AWARD5");

                entity.Property(e => e.Award6)
                    .HasColumnName("AWARD6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AwardCode)
                    .IsRequired()
                    .HasColumnName("AWARD_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fault1)
                    .HasColumnName("FAULT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault2)
                    .HasColumnName("FAULT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault3)
                    .HasColumnName("FAULT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault4)
                    .HasColumnName("FAULT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fault5)
                    .HasColumnName("FAULT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Awardcd>(entity =>
            {
                entity.HasKey(e => e.AwardCode);

                entity.ToTable("AWARDCD");

                entity.Property(e => e.AwardCode)
                    .HasColumnName("AWARD_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AwardCodeDisp)
                    .HasColumnName("AWARD_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BankCode>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Codepage)
                    .HasColumnName("CODEPAGE")
                    .HasDefaultValueSql("((950))");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Base>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("BASE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountMa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_MA")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNa)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NA")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdditionDate).HasColumnType("datetime");

                entity.Property(e => e.AdditionNo)
                    .HasColumnName("AdditionNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdmitDate).HasColumnType("datetime");

                entity.Property(e => e.Army)
                    .IsRequired()
                    .HasColumnName("ARMY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ArmyType)
                    .IsRequired()
                    .HasColumnName("ARMY_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasColumnName("BANK_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Basecd)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Bbcall)
                    .IsRequired()
                    .HasColumnName("BBCALL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Blood)
                    .IsRequired()
                    .HasColumnName("BLOOD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CandidateWays).HasMaxLength(50);

                entity.Property(e => e.ContGsm)
                    .IsRequired()
                    .HasColumnName("CONT_GSM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContGsm2)
                    .IsRequired()
                    .HasColumnName("CONT_GSM2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContMan)
                    .IsRequired()
                    .HasColumnName("CONT_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContMan2)
                    .IsRequired()
                    .HasColumnName("CONT_MAN2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContRel1)
                    .IsRequired()
                    .HasColumnName("CONT_REL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContRel2)
                    .IsRequired()
                    .HasColumnName("CONT_REL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContTel)
                    .IsRequired()
                    .HasColumnName("CONT_TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContTel2)
                    .IsRequired()
                    .HasColumnName("CONT_TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gift).HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdType)
                    .IsRequired()
                    .HasColumnName("ID_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Introductor).HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'''')");

                entity.Property(e => e.Matno)
                    .IsRequired()
                    .HasColumnName("MATNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NNobr)
                    .IsRequired()
                    .HasColumnName("N_NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NobrB)
                    .IsRequired()
                    .HasColumnName("NOBR_B")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Photo)
                    .HasColumnName("PHOTO")
                    .HasColumnType("image");

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pretax)
                    .HasColumnName("PRETAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ProAddr1)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProAddr2)
                    .IsRequired()
                    .HasColumnName("PRO_ADDR2")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProId1)
                    .IsRequired()
                    .HasColumnName("PRO_ID1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProId2)
                    .IsRequired()
                    .HasColumnName("PRO_ID2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProMan1)
                    .IsRequired()
                    .HasColumnName("PRO_MAN1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProMan2)
                    .IsRequired()
                    .HasColumnName("PRO_MAN2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProTel1)
                    .IsRequired()
                    .HasColumnName("PRO_TEL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProTel2)
                    .IsRequired()
                    .HasColumnName("PRO_TEL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subtel)
                    .IsRequired()
                    .HasColumnName("SUBTEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Taxcnt)
                    .HasColumnName("TAXCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Up1File)
                    .HasColumnName("up1_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up1Name)
                    .HasColumnName("up1_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up2File)
                    .HasColumnName("up2_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up2Name)
                    .HasColumnName("up2_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up3File)
                    .HasColumnName("up3_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up3Name)
                    .HasColumnName("up3_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up4File)
                    .HasColumnName("up4_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up4Name)
                    .HasColumnName("up4_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Up5File)
                    .HasColumnName("up5_file")
                    .HasColumnType("image");

                entity.Property(e => e.Up5Name)
                    .HasColumnName("up5_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BaseMaTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("base_ma_temp");

                entity.Property(e => e.Name英文姓名)
                    .HasColumnName("Name 英文姓名")
                    .HasMaxLength(255);

                entity.Property(e => e.中文姓名).HasMaxLength(255);

                entity.Property(e => e.入境日期).HasColumnType("datetime");

                entity.Property(e => e.工作期限).HasMaxLength(255);

                entity.Property(e => e.工號).HasMaxLength(255);

                entity.Property(e => e.新統一編號).HasMaxLength(255);

                entity.Property(e => e.期滿日期).HasColumnType("datetime");

                entity.Property(e => e.護照到期).HasColumnType("datetime");

                entity.Property(e => e.護照號碼).HasMaxLength(255);
            });

            modelBuilder.Entity<Basecd>(entity =>
            {
                entity.HasKey(e => e.Basecd1);

                entity.ToTable("BASECD");

                entity.Property(e => e.Basecd1)
                    .HasColumnName("BASECD")
                    .HasMaxLength(50);

                entity.Property(e => e.Basecdname)
                    .HasColumnName("BASECDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Basetts>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ttscode })
                    .HasName("PK_BASETTS_1");

                entity.ToTable("BASETTS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ttscode)
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApDate)
                    .HasColumnName("AP_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Apgrpcd)
                    .IsRequired()
                    .HasColumnName("APGRPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AssessManage1).HasMaxLength(50);

                entity.Property(e => e.AssessManage2).HasMaxLength(50);

                entity.Property(e => e.AuditDate).HasColumnType("datetime");

                entity.Property(e => e.Calabs).HasColumnName("CALABS");

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Carcd)
                    .IsRequired()
                    .HasColumnName("CARCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Card)
                    .IsRequired()
                    .HasColumnName("CARD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CardId)
                    .HasColumnName("CardID")
                    .HasMaxLength(50);

                entity.Property(e => e.CardJobEnName).HasMaxLength(50);

                entity.Property(e => e.CardJobName).HasMaxLength(50);

                entity.Property(e => e.Cindt)
                    .HasColumnName("CINDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CountPass).HasColumnName("COUNT_PASS");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DoorGuard).HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fixrate).HasColumnName("FIXRATE");

                entity.Property(e => e.Fulatt).HasColumnName("FULATT");

                entity.Property(e => e.GrpAmt)
                    .HasColumnName("GRP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HoliCode)
                    .IsRequired()
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InsgType)
                    .IsRequired()
                    .HasColumnName("INSG_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsSelfout).HasColumnName("IS_SELFOUT");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobo)
                    .IsRequired()
                    .HasColumnName("JOBO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.Mang1).HasColumnName("MANG1");

                entity.Property(e => e.Mange).HasColumnName("MANGE");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(180)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nocard).HasColumnName("NOCARD");

                entity.Property(e => e.Noeat).HasColumnName("NOEAT");

                entity.Property(e => e.Nooldret).HasColumnName("NOOLDRET");

                entity.Property(e => e.Noot).HasColumnName("NOOT");

                entity.Property(e => e.Noret).HasColumnName("NORET");

                entity.Property(e => e.Nospamt).HasColumnName("NOSPAMT");

                entity.Property(e => e.Nospec).HasColumnName("NOSPEC");

                entity.Property(e => e.Noter).HasColumnName("NOTER");

                entity.Property(e => e.Notlate).HasColumnName("NOTLATE");

                entity.Property(e => e.Nowage).HasColumnName("NOWAGE");

                entity.Property(e => e.Nowel).HasColumnName("NOWEL");

                entity.Property(e => e.OilSubsidy).HasMaxLength(50);

                entity.Property(e => e.OldSaladr).HasMaxLength(50);

                entity.Property(e => e.Onlyontime).HasColumnName("ONLYONTIME");

                entity.Property(e => e.Oudt)
                    .HasColumnName("OUDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OutPost).HasMaxLength(50);

                entity.Property(e => e.Outcd)
                    .IsRequired()
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PassDate)
                    .HasColumnName("PASS_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PassType)
                    .HasColumnName("PASS_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.ReinstateDate).HasColumnType("datetime");

                entity.Property(e => e.Retchoo)
                    .IsRequired()
                    .HasColumnName("RETCHOO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Retdate)
                    .HasColumnName("RETDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Retdate1)
                    .HasColumnName("RETDATE1")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Retrate)
                    .HasColumnName("RETRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saltp)
                    .IsRequired()
                    .HasColumnName("SALTP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Station)
                    .HasColumnName("STATION")
                    .HasMaxLength(50);

                entity.Property(e => e.Stdt)
                    .HasColumnName("STDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stindt)
                    .HasColumnName("STINDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stoudt)
                    .HasColumnName("STOUDT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TaxDate)
                    .HasColumnName("TAX_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TaxEdate)
                    .HasColumnName("TAX_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ttscd)
                    .IsRequired()
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YrDays)
                    .HasColumnName("YR_DAYS")
                    .HasColumnType("decimal(16, 2)");

                //entity.Property(e => e.Ytaxcn)
                //    .HasColumnName("YTAXCN")
                //    .HasMaxLength(50);
            });

            modelBuilder.Entity<Blood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BLOOD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<BonusGroup>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Temp1).HasMaxLength(50);

                entity.Property(e => e.Temp2).HasMaxLength(50);

                entity.Property(e => e.Temp3).HasMaxLength(50);
            });

            modelBuilder.Entity<CalFreq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CAL_FREQ");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<CalType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CAL_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<CalcCondition>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("CALC_CONDITION");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CondType)
                    .IsRequired()
                    .HasColumnName("COND_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Condition)
                    .IsRequired()
                    .HasColumnName("CONDITION")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Value1)
                    .IsRequired()
                    .HasColumnName("VALUE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Value2)
                    .IsRequired()
                    .HasColumnName("VALUE2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CandidatesWays>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("CANDIDATES_WAYS");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.WayName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Car>(entity =>
            {
                entity.Property(e => e.CanRent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CarId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LicensePlate).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CarRentRecord>(entity =>
            {
                entity.Property(e => e.Canceler).HasMaxLength(50);

                entity.Property(e => e.Contents).HasMaxLength(2000);

                entity.Property(e => e.Destination).HasMaxLength(1000);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.WritedBy).HasMaxLength(50);

                entity.Property(e => e.WritedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Carcd>(entity =>
            {
                entity.HasKey(e => e.Carcd1);

                entity.ToTable("CARCD");

                entity.Property(e => e.Carcd1)
                    .HasColumnName("CARCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Carname)
                    .IsRequired()
                    .HasColumnName("CARNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Card>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Ontime });

                entity.ToTable("CARD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ontime)
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CardTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("card_temp");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Cardapp>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Cardno, e.Bdate });

                entity.ToTable("CARDAPP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno)
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Temps).HasColumnName("TEMPS");
            });

            modelBuilder.Entity<Cardlosd>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("CARDLOSD");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Cardtmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARDTMP");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardno1)
                    .IsRequired()
                    .HasColumnName("CARDNO1")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Warn)
                    .IsRequired()
                    .HasColumnName("WARN")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<Cartime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARTIME");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carcd)
                    .IsRequired()
                    .HasColumnName("CARCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Certifi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CERTIFI");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasMaxLength(80);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.EffDate)
                    .HasColumnName("EFF_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LffDate)
                    .HasColumnName("LFF_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Private).HasColumnName("PRIVATE");
            });

            modelBuilder.Entity<CheNobr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CHE_NOBR");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewNobr)
                    .IsRequired()
                    .HasColumnName("NEW_NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldNobr)
                    .IsRequired()
                    .HasColumnName("OLD_NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ChkOtNightFood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chk_OT_night_food");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AftNightamt)
                    .HasColumnName("AFT_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates)
                    .HasColumnName("ALLLATES")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates1)
                    .HasColumnName("ALLLATES1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AttEnd)
                    .IsRequired()
                    .HasColumnName("ATT_END")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bcolor)
                    .HasColumnName("BCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BefNightamt)
                    .HasColumnName("BEF_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50);

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Dd)
                    .IsRequired()
                    .HasColumnName("DD")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DkHrs)
                    .HasColumnName("DK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Earaward).HasColumnName("EARAWARD");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr11).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr4).HasColumnType("datetime");

                entity.Property(e => e.Expr6).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Expr7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Expr9).HasColumnType("datetime");

                entity.Property(e => e.Fcolor)
                    .HasColumnName("FCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamto)
                    .HasColumnName("FOODAMTO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodrule)
                    .IsRequired()
                    .HasColumnName("FOODRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Helf).HasColumnName("HELF");

                entity.Property(e => e.HoliMins)
                    .HasColumnName("HOLI_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MoHrs)
                    .HasColumnName("MO_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Night).HasColumnName("NIGHT");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt1)
                    .HasColumnName("NIGHTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightrule)
                    .IsRequired()
                    .HasColumnName("NIGHTRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightsalcd)
                    .IsRequired()
                    .HasColumnName("NIGHTSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notfood).HasColumnName("NOTFOOD");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OffTime)
                    .IsRequired()
                    .HasColumnName("OFF_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Offtime2)
                    .IsRequired()
                    .HasColumnName("OFFTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.OnTime)
                    .IsRequired()
                    .HasColumnName("ON_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.OtBegin)
                    .IsRequired()
                    .HasColumnName("OT_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.OverTime)
                    .IsRequired()
                    .HasColumnName("OVER_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Overday).HasColumnName("OVERDAY");

                entity.Property(e => e.Rate2).HasColumnName("RATE2");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.ResB1Time)
                    .IsRequired()
                    .HasColumnName("RES_B1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB2Time)
                    .IsRequired()
                    .HasColumnName("RES_B2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB3Time)
                    .IsRequired()
                    .HasColumnName("RES_B3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB4Time)
                    .IsRequired()
                    .HasColumnName("RES_B4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResBTime)
                    .IsRequired()
                    .HasColumnName("RES_B_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE1Time)
                    .IsRequired()
                    .HasColumnName("RES_E1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE2Time)
                    .IsRequired()
                    .HasColumnName("RES_E2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE3Time)
                    .IsRequired()
                    .HasColumnName("RES_E3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE4Time)
                    .IsRequired()
                    .HasColumnName("RES_E4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResETime)
                    .IsRequired()
                    .HasColumnName("RES_E_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Specamt)
                    .HasColumnName("SPECAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt1)
                    .HasColumnName("SPECAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt2)
                    .HasColumnName("SPECAMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specrule)
                    .IsRequired()
                    .HasColumnName("SPECRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Specsalcd)
                    .IsRequired()
                    .HasColumnName("SPECSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.StrTime)
                    .IsRequired()
                    .HasColumnName("STR_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsa)
                    .HasColumnName("WK_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsb)
                    .HasColumnName("WK_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsa)
                    .HasColumnName("WR_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsb)
                    .HasColumnName("WR_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.實際金額).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.差異金額).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.應給金額).HasColumnType("numeric(27, 8)");
            });

            modelBuilder.Entity<Code>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Type });

                entity.ToTable("code");

                entity.Property(e => e.Key)
                    .HasColumnName("key")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CodeFilter>(entity =>
            {
                entity.HasKey(e => new { e.Source, e.Code, e.Codegroup });

                entity.ToTable("CODE_FILTER");

                entity.Property(e => e.Source)
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Codegroup)
                    .HasColumnName("CODEGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CodeGroup>(entity =>
            {
                entity.HasKey(e => e.Codegroup1);

                entity.ToTable("CODE_GROUP");

                entity.Property(e => e.Codegroup1)
                    .HasColumnName("CODEGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupname)
                    .IsRequired()
                    .HasColumnName("GROUPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Comp>(entity =>
            {
                entity.HasKey(e => e.Comp1);

                entity.ToTable("COMP");

                entity.Property(e => e.Comp1)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasColumnName("ACCOUNT")
                    .HasMaxLength(50);

                entity.Property(e => e.Accr)
                    .IsRequired()
                    .HasColumnName("ACCR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(120);

                entity.Property(e => e.Chairman)
                    .IsRequired()
                    .HasColumnName("CHAIRMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Compename)
                    .HasColumnName("COMPENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .IsRequired()
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dblcnt).HasColumnName("DBLCNT");

                entity.Property(e => e.Defa).HasColumnName("DEFA");

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Houseid)
                    .IsRequired()
                    .HasColumnName("HOUSEID")
                    .HasMaxLength(50);

                entity.Property(e => e.Inscomp)
                    .IsRequired()
                    .HasColumnName("INSCOMP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupid).HasColumnName("MENUGROUPID");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Taxid)
                    .IsRequired()
                    .HasColumnName("TAXID")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CompCodeGroup>(entity =>
            {
                entity.HasKey(e => new { e.Comp, e.Codegroup });

                entity.ToTable("COMP_CODE_GROUP");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Codegroup)
                    .HasColumnName("CODEGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CompDatagroup>(entity =>
            {
                entity.HasKey(e => new { e.Comp, e.Datagroup });

                entity.ToTable("COMP_DATAGROUP");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Datagroup)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.HasOne(d => d.CompNavigation)
                    .WithMany(p => p.CompDatagroup)
                    .HasForeignKey(d => d.Comp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COMP_DATAGROUP_COMP");

                entity.HasOne(d => d.DatagroupNavigation)
                    .WithMany(p => p.CompDatagroup)
                    .HasForeignKey(d => d.Datagroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COMP_DATAGROUP_DATAGROUP");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.Adate).HasColumnType("datetime");

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NotifyMessageGuid).HasMaxLength(50);

                entity.Property(e => e.WorkAdr)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ContractTypeNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.ContractType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_ContractType1");

                entity.HasOne(d => d.NobrNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.Nobr)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_BASE");
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_ContractType_1");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Cost>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Depts });

                entity.ToTable("COST");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Cadate)
                    .HasColumnName("CADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cddate)
                    .HasColumnName("CDDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<CostType>(entity =>
            {
                entity.HasKey(e => e.CostTypeCode);

                entity.Property(e => e.CostTypeCode).HasMaxLength(50);

                entity.Property(e => e.CostTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Countcd>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("COUNTCD");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("COUNTRY");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Country1)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DataPa>(entity =>
            {
                if (Database.ProviderName == "Microsoft.EntityFrameworkCore.InMemory")
                {
                    entity.HasKey(e => new { e.DataPass, e.Saladr });
                }
                else
                {
                    entity.HasNoKey();
                }

                entity.ToTable("DATA_PA");

                entity.Property(e => e.DataPass)
                    .HasColumnName("DATA_PASS")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<DataPass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATA_PASS");

                entity.Property(e => e.DataPass1)
                    .HasColumnName("DATA_PASS")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDat4e)
                    .HasColumnName("KEY_DAT4E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Datagroup>(entity =>
            {
                entity.HasKey(e => e.Datagroup1);

                entity.ToTable("DATAGROUP");

                entity.Property(e => e.Datagroup1)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.FlowGo)
                    .HasColumnName("FLOW_GO")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupname)
                    .IsRequired()
                    .HasColumnName("GROUPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrB1)
                    .HasColumnName("NOBR_B1")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrB2)
                    .HasColumnName("NOBR_B2")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrE1)
                    .HasColumnName("NOBR_E1")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrE2)
                    .HasColumnName("NOBR_E2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Dept>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPT");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DEname)
                    .IsRequired()
                    .HasColumnName("D_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewDept)
                    .HasColumnName("NEW_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pns)
                    .HasColumnName("PNS")
                    .HasColumnType("decimal(16, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Res)
                    .HasColumnName("RES")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DeptSupervisor>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AddOrDel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_No")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.SupervisorNobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Depta>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPTA");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DEname)
                    .IsRequired()
                    .HasColumnName("D_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeptCate)
                    .HasColumnName("DEPT_CATE")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptGroup)
                    .HasColumnName("DEPT_GROUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptTree)
                    .HasColumnName("DEPT_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mangemail)
                    .HasColumnName("MANGEMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SignGroup)
                    .HasColumnName("SIGN_GROUP")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeptaSupervisor>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AddOrDel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_No")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.SupervisorNobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Deptlevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEPTLEVEL");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sorting).HasColumnName("SORTING");
            });

            modelBuilder.Entity<Depts>(entity =>
            {
                entity.HasKey(e => e.DNo);

                entity.ToTable("DEPTS");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrAcno)
                    .HasColumnName("CR_ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DCode)
                    .HasColumnName("D_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DrAcno)
                    .HasColumnName("DR_ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ICode)
                    .HasColumnName("I_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldDept)
                    .HasColumnName("OLD_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Subs)
                    .HasColumnName("SUBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Di>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DI");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<DisabilityRank>(entity =>
            {
                entity.HasKey(e => e.DisabilityRankCode);

                entity.Property(e => e.DisabilityRankCode).HasMaxLength(50);

                entity.Property(e => e.DisabilityRankName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DisabilityType>(entity =>
            {
                entity.HasKey(e => e.DisabilityCode);

                entity.Property(e => e.DisabilityCode).HasMaxLength(50);

                entity.Property(e => e.DisabilityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DocItem>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("DOC_ITEM");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CateGory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DoorGuard>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DoorName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Educode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EDUCODE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<EffAgree>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFF_agree");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Agree).HasColumnName("agree");

                entity.Property(e => e.AgreeDate)
                    .HasColumnName("agree_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AgreeNote).HasColumnName("agree_note");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("key_man")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<Effect>(entity =>
            {
                entity.HasKey(e => e.Apcd);

                entity.ToTable("EFFECT");

                entity.Property(e => e.Apcd)
                    .HasColumnName("APCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Apcdname)
                    .IsRequired()
                    .HasColumnName("APCDNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Effb)
                    .HasColumnName("EFFB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Effe)
                    .HasColumnName("EFFE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Effemploy>(entity =>
            {
                entity.HasKey(e => e.Autokey)
                    .HasName("PK__EFFEMPLO__FE925FC15B3B2C31");

                entity.ToTable("EFFEMPLOY");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Efflvl)
                    .IsRequired()
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effscore)
                    .HasColumnName("EFFSCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efftype)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Efflvl>(entity =>
            {
                entity.HasKey(e => e.Efflvl1)
                    .HasName("PK__EFFLVL__C4D0AFD273AA4E69");

                entity.ToTable("EFFLVL");

                entity.Property(e => e.Efflvl1)
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effb)
                    .HasColumnName("EFFB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Effe)
                    .HasColumnName("EFFE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EfflvlDisp)
                    .IsRequired()
                    .HasColumnName("EFFLVL_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.EfflvlName)
                    .IsRequired()
                    .HasColumnName("EFFLVL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsAdmin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_Admin");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("auto_key")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsAppr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_APPR");

                entity.Property(e => e.Appr)
                    .HasColumnName("appr")
                    .HasColumnType("ntext");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bespeak)
                    .HasColumnName("bespeak")
                    .HasColumnType("ntext");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(10);

                entity.Property(e => e.Included).HasColumnName("included");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.MangcheckDate)
                    .HasColumnName("mangcheckDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasMaxLength(50);

                entity.Property(e => e.Reality)
                    .HasColumnName("reality")
                    .HasMaxLength(200);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Standard)
                    .HasColumnName("standard")
                    .HasColumnType("ntext");

                entity.Property(e => e.Works)
                    .HasColumnName("works")
                    .HasColumnType("ntext");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsApprtts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_APPRTTS");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Appr)
                    .HasColumnName("appr")
                    .HasColumnType("ntext");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bespeak)
                    .HasColumnName("bespeak")
                    .HasMaxLength(200);

                entity.Property(e => e.Ddate)
                    .HasColumnName("ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffSApprid).HasColumnName("EffS_APPRID");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Original)
                    .HasColumnName("original")
                    .HasMaxLength(10);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasMaxLength(50);

                entity.Property(e => e.Reality)
                    .HasColumnName("reality")
                    .HasMaxLength(200);

                entity.Property(e => e.Standard)
                    .HasColumnName("standard")
                    .HasMaxLength(200);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(10);

                entity.Property(e => e.Works)
                    .HasColumnName("works")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsAssignappend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_ASSIGNAPPEND");

                entity.Property(e => e.Assignnobr)
                    .HasColumnName("assignnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Extendday).HasColumnName("extendday");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_ATTEND");

                entity.Property(e => e.AttAdate)
                    .HasColumnName("att_adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDdate)
                    .HasColumnName("att_ddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NSeq).HasColumnName("n_seq");

                entity.Property(e => e.NYy).HasColumnName("n_yy");

                entity.Property(e => e.SSeq).HasColumnName("s_seq");

                entity.Property(e => e.SYy).HasColumnName("s_yy");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.StdDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(10);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsBase>(entity =>
            {
                entity.HasKey(e => e.EffbaseId);

                entity.ToTable("EFFS_BASE");

                entity.Property(e => e.EffbaseId)
                    .HasColumnName("effbaseID")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Depta)
                    .HasColumnName("depta")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptorder)
                    .HasColumnName("deptorder")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .HasColumnName("depts")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsfinally)
                    .HasColumnName("effsfinally")
                    .HasMaxLength(50);

                entity.Property(e => e.EffsgroupId)
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Firstdate)
                    .HasColumnName("firstdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isdeff).HasColumnName("isdeff");

                entity.Property(e => e.Job)
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobplan)
                    .HasColumnName("jobplan")
                    .HasColumnType("ntext");

                entity.Property(e => e.Mangfinish).HasColumnName("mangfinish");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(1);

                entity.Property(e => e.Stddate)
                    .HasColumnName("stddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsCate>(entity =>
            {
                entity.HasKey(e => e.EffcateId);

                entity.ToTable("EFFS_CATE");

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffcateName)
                    .IsRequired()
                    .HasColumnName("effcateName")
                    .HasMaxLength(200);

                entity.Property(e => e.Effcatenote)
                    .HasColumnName("effcatenote")
                    .HasColumnType("ntext");

                entity.Property(e => e.TypeId)
                    .HasColumnName("TypeID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsCateitem>(entity =>
            {
                entity.HasKey(e => e.EffsId);

                entity.ToTable("EFFS_CATEITEM");

                entity.Property(e => e.EffsId)
                    .HasColumnName("effsID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.Effnote)
                    .HasColumnName("effnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.EffsName)
                    .HasColumnName("effsName")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsDeptNum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effs_DeptNum");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsEducate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_EDUCATE");

                entity.Property(e => e.CateName)
                    .HasColumnName("cateName")
                    .HasMaxLength(200);

                entity.Property(e => e.EduCateId)
                    .IsRequired()
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsEducateitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_EDUCATEITEM");

                entity.Property(e => e.CateItemName).HasMaxLength(200);

                entity.Property(e => e.EduCateId)
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);

                entity.Property(e => e.EduCateItemId)
                    .IsRequired()
                    .HasColumnName("eduCateItemID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsFun>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_Fun");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("auto_key")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Fun1).HasColumnName("fun1");

                entity.Property(e => e.Fun10).HasColumnName("fun10");

                entity.Property(e => e.Fun11).HasColumnName("fun11");

                entity.Property(e => e.Fun12).HasColumnName("fun12");

                entity.Property(e => e.Fun13).HasColumnName("fun13");

                entity.Property(e => e.Fun14).HasColumnName("fun14");

                entity.Property(e => e.Fun15).HasColumnName("fun15");

                entity.Property(e => e.Fun1Name)
                    .HasColumnName("fun1_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun2).HasColumnName("fun2");

                entity.Property(e => e.Fun2Name)
                    .HasColumnName("fun2_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun3).HasColumnName("fun3");

                entity.Property(e => e.Fun3Name)
                    .HasColumnName("fun3_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun4).HasColumnName("fun4");

                entity.Property(e => e.Fun4Name)
                    .HasColumnName("fun4_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun5).HasColumnName("fun5");

                entity.Property(e => e.Fun5Name)
                    .HasColumnName("fun5_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun6).HasColumnName("fun6");

                entity.Property(e => e.Fun6Name)
                    .HasColumnName("fun6_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun7).HasColumnName("fun7");

                entity.Property(e => e.Fun7Name)
                    .HasColumnName("fun7_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun8).HasColumnName("fun8");

                entity.Property(e => e.Fun8Name)
                    .HasColumnName("fun8_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Fun9).HasColumnName("fun9");

                entity.Property(e => e.Fun9Name)
                    .HasColumnName("fun9_name")
                    .HasMaxLength(100);

                entity.Property(e => e.Selfcheck).HasColumnName("selfcheck");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsGroup>(entity =>
            {
                entity.ToTable("EFFS_GROUP");

                entity.Property(e => e.EffsgroupId)
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsgroup1)
                    .HasColumnName("effsgroup")
                    .HasMaxLength(50);

                entity.Property(e => e.Effsgroupname)
                    .HasColumnName("effsgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.IsmangRate).HasColumnName("ismangRate");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsGroupitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_GROUPITEM");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EffsgroupId)
                    .HasColumnName("effsgroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .HasColumnName("jobl")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsInterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_INTERVIEW");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Interview)
                    .IsRequired()
                    .HasColumnName("interview")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsLearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_LEARNPLAN");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<EffsMangFnums>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MangFNums");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1).HasColumnType("ntext");

                entity.Property(e => e.O2).HasColumnType("ntext");

                entity.Property(e => e.Sql).HasColumnName("sql");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangappend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPEND");

                entity.Property(e => e.AppendType).HasColumnName("appendType");

                entity.Property(e => e.Appenddate)
                    .HasColumnName("appenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Appendfinish).HasColumnName("appendfinish");

                entity.Property(e => e.Appstddate)
                    .HasColumnName("appstddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Apptype)
                    .HasColumnName("apptype")
                    .HasMaxLength(10);

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangapprcate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPRCATE");

                entity.Property(e => e.ApprId)
                    .HasColumnName("apprID")
                    .HasMaxLength(10);

                entity.Property(e => e.AuotKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.O5)
                    .HasColumnName("o5")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangapprwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGAPPRWORK");

                entity.Property(e => e.ApprId).HasColumnName("apprID");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(100);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangfinishnote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGFINISHNOTE");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .HasColumnName("job")
                    .HasMaxLength(50);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsManginterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGINTERVIEW");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Interid)
                    .HasColumnName("INTERID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsManglearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGLEARNPLAN");

                entity.Property(e => e.AuotKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Mangdept)
                    .HasColumnName("mangdept")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangjob)
                    .HasColumnName("mangjob")
                    .HasMaxLength(10);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note1)
                    .HasColumnName("note1")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note2)
                    .HasColumnName("note2")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note3)
                    .HasColumnName("note3")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note4)
                    .HasColumnName("note4")
                    .HasMaxLength(1000);

                entity.Property(e => e.Note5)
                    .HasColumnName("note5")
                    .HasMaxLength(1000);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsMangrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_MANGRATE");

                entity.Property(e => e.Arrprate)
                    .HasColumnName("arrprate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Caterate)
                    .HasColumnName("caterate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NOTE");

                entity.Property(e => e.App)
                    .HasColumnName("app")
                    .HasMaxLength(50);

                entity.Property(e => e.AuotKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsNote1>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_Note_1");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Cate)
                    .HasColumnName("cate")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("note");

                entity.Property(e => e.NoteMang).HasColumnName("note_mang");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsNote2>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_Note_2");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasMaxLength(50);

                entity.Property(e => e.AmtOther)
                    .HasColumnName("AMT_OTHER")
                    .HasMaxLength(50);

                entity.Property(e => e.Chb1).HasColumnName("chb1");

                entity.Property(e => e.Chb2).HasColumnName("chb2");

                entity.Property(e => e.Chb3).HasColumnName("chb3");

                entity.Property(e => e.Chb4).HasColumnName("chb4");

                entity.Property(e => e.Jobl)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobo)
                    .HasColumnName("JOBO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("Key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("Key_Man")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Other)
                    .HasColumnName("OTHER")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<EffsNote3>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_Note_3");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasMaxLength(50);

                entity.Property(e => e.AmtOther)
                    .HasColumnName("AMT_OTHER")
                    .HasMaxLength(50);

                entity.Property(e => e.Chb1).HasColumnName("chb1");

                entity.Property(e => e.Chb2).HasColumnName("chb2");

                entity.Property(e => e.Chb3).HasColumnName("chb3");

                entity.Property(e => e.Chb4).HasColumnName("chb4");

                entity.Property(e => e.Jobl)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobo)
                    .HasColumnName("JOBO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("Key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("Key_Man")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Other)
                    .HasColumnName("OTHER")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<EffsNote4>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("EFFS_Note_4");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1).HasColumnName("note1");

                entity.Property(e => e.Note2).HasColumnName("note2");

                entity.Property(e => e.Num1)
                    .HasColumnName("num1")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Num2)
                    .HasColumnName("num2")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsNote5>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_Note_5");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangnobr)
                    .HasColumnName("mangnobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsNote6>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("EFFS_Note_6");

                entity.Property(e => e.Autokey).HasColumnName("autokey");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsNum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NUM");

                entity.Property(e => e.NumDesc)
                    .HasColumnName("numDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.NumId)
                    .IsRequired()
                    .HasColumnName("numID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsNumitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_NUMITEM");

                entity.Property(e => e.AutoKey).HasColumnName("autoKey");

                entity.Property(e => e.MaxNum)
                    .HasColumnName("maxNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MaxRate)
                    .HasColumnName("maxRate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MinNum)
                    .HasColumnName("minNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MinRate)
                    .HasColumnName("minRate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.NumId)
                    .IsRequired()
                    .HasColumnName("numID")
                    .HasMaxLength(4);

                entity.Property(e => e.NumName)
                    .IsRequired()
                    .HasColumnName("numName")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsOther>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effs_other");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cate)
                    .HasColumnName("cate")
                    .HasMaxLength(500);

                entity.Property(e => e.KeyData)
                    .HasColumnName("key_data")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsPersonality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_personality");

                entity.Property(e => e.EffcateId)
                    .IsRequired()
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffcateName)
                    .IsRequired()
                    .HasColumnName("effcateName")
                    .HasMaxLength(200);

                entity.Property(e => e.Effcatenote)
                    .HasColumnName("effcatenote")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsPersonalityItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_personalityITEM");

                entity.Property(e => e.EffcateId)
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.Effnote)
                    .HasColumnName("effnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.EffsId)
                    .IsRequired()
                    .HasColumnName("effsID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffsName)
                    .HasColumnName("effsName")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<EffsRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_RECORD");

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Effscate)
                    .HasColumnName("effscate")
                    .HasMaxLength(10);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangname)
                    .HasColumnName("mangname")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.Record)
                    .HasColumnName("record")
                    .HasColumnType("ntext");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<EffsSMang>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effs_s_mang");

                entity.Property(e => e.Autokey)
                    .HasColumnName("autokey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EffsSelfcate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFCATE");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.CateId)
                    .HasColumnName("cateID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.O1)
                    .HasColumnName("o1")
                    .HasColumnType("ntext");

                entity.Property(e => e.O2)
                    .HasColumnName("o2")
                    .HasColumnType("ntext");

                entity.Property(e => e.O3)
                    .HasColumnName("o3")
                    .HasColumnType("ntext");

                entity.Property(e => e.O4)
                    .HasColumnName("o4")
                    .HasColumnType("ntext");

                entity.Property(e => e.O5)
                    .HasColumnName("o5")
                    .HasColumnType("ntext");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfedu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFEDU");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.EduCateId)
                    .HasColumnName("eduCateID")
                    .HasMaxLength(10);

                entity.Property(e => e.EduCateItemId)
                    .HasColumnName("eduCateItemID")
                    .HasMaxLength(10);

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Other)
                    .HasColumnName("other")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfinterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFINTERVIEW");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Interid)
                    .HasColumnName("INTERID")
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("keyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelflearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFLEARNPLAN");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.LearnplanId)
                    .HasColumnName("learnplanID")
                    .HasMaxLength(10);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFPlan");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasColumnType("ntext");

                entity.Property(e => e.Note1)
                    .HasColumnName("note1")
                    .HasColumnType("ntext");

                entity.Property(e => e.Note2)
                    .HasColumnName("note2")
                    .HasColumnType("ntext");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsSelfwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_SELFWORK");

                entity.Property(e => e.ApprId).HasColumnName("apprID");

                entity.Property(e => e.AutoKey).ValueGeneratedOnAdd();

                entity.Property(e => e.Keydate)
                    .HasColumnName("keydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MangCheck).HasColumnName("mangCheck");

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsTemplet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLET");

                entity.Property(e => e.IsTitle).HasColumnName("isTitle");

                entity.Property(e => e.TempletId)
                    .IsRequired()
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TempletName)
                    .IsRequired()
                    .HasColumnName("templetName")
                    .HasMaxLength(30);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTempletcate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETCATE");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EffcateId)
                    .IsRequired()
                    .HasColumnName("effcateID")
                    .HasMaxLength(4);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.TempletId)
                    .IsRequired()
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTempletcateitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETCATEITEM");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EffsCateId)
                    .HasColumnName("effsCateID")
                    .HasMaxLength(50);

                entity.Property(e => e.EffsId)
                    .IsRequired()
                    .HasColumnName("effsID")
                    .HasMaxLength(4);

                entity.Property(e => e.EffsMaxNum)
                    .HasColumnName("effsMaxNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EffsMinNum)
                    .HasColumnName("effsMinNum")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TempletId)
                    .IsRequired()
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EffsTempletinterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETINTERVIEW");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interviewID")
                    .HasMaxLength(4);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTempletlearnplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETLEARNPLAN");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LearnplanId)
                    .HasColumnName("learnplanID")
                    .HasMaxLength(10);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffsTemplettype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TEMPLETTYPE");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cateitemname)
                    .HasColumnName("cateitemname")
                    .HasColumnType("ntext");

                entity.Property(e => e.Cateitemnote)
                    .HasColumnName("cateitemnote")
                    .HasColumnType("ntext");

                entity.Property(e => e.Catename)
                    .HasColumnName("catename")
                    .HasColumnType("ntext");

                entity.Property(e => e.Catenote)
                    .HasColumnName("catenote")
                    .HasColumnType("ntext");

                entity.Property(e => e.Effsmode)
                    .HasColumnName("effsmode")
                    .HasMaxLength(50);

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Showcateitemname).HasColumnName("showcateitemname");

                entity.Property(e => e.Showcateitemnote).HasColumnName("showcateitemnote");

                entity.Property(e => e.Showcatename).HasColumnName("showcatename");

                entity.Property(e => e.Showcatenote).HasColumnName("showcatenote");

                entity.Property(e => e.TempletId)
                    .HasColumnName("templetID")
                    .HasMaxLength(4);

                entity.Property(e => e.TitleId)
                    .HasColumnName("titleID")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTitle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TITLE");

                entity.Property(e => e.TitleDesc)
                    .IsRequired()
                    .HasColumnName("titleDesc")
                    .HasMaxLength(100);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsTitleitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TITLEITEM");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(10);

                entity.Property(e => e.TitleId)
                    .IsRequired()
                    .HasColumnName("titleID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<EffsType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_TYPE");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeName)
                    .HasColumnName("typeName")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<EffsUpfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EFFS_UPFILE");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Filedesc)
                    .HasColumnName("filedesc")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Filesize)
                    .HasColumnName("filesize")
                    .HasMaxLength(100);

                entity.Property(e => e.Filetype)
                    .HasColumnName("filetype")
                    .HasMaxLength(200);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Serverfilename)
                    .HasColumnName("serverfilename")
                    .HasMaxLength(500);

                entity.Property(e => e.Upfiledate)
                    .HasColumnName("upfiledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upfilename)
                    .HasColumnName("upfilename")
                    .HasMaxLength(500);

                entity.Property(e => e.Yy).HasColumnName("yy");
            });

            modelBuilder.Entity<EffsWorkSet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Effs_WorkSet");

                entity.Property(e => e.AutoKey)
                    .HasColumnName("autoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isopen).HasColumnName("isopen");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(200);

                entity.Property(e => e.Seq)
                    .HasColumnName("seq")
                    .HasMaxLength(50);

                entity.Property(e => e.Yy)
                    .HasColumnName("yy")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<EffstempAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("effstemp_aa");

                entity.Property(e => e._94年考核)
                    .HasColumnName("94年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e._95年考核)
                    .HasColumnName("95年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考核1)
                    .HasColumnName("96年_考核1")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考核2)
                    .HasColumnName("96年_考核2")
                    .HasMaxLength(255);

                entity.Property(e => e._97年考核)
                    .HasColumnName("97年_考核")
                    .HasMaxLength(255);

                entity.Property(e => e.姓名).HasMaxLength(255);

                entity.Property(e => e.工號).HasMaxLength(255);

                entity.Property(e => e.職稱).HasMaxLength(255);

                entity.Property(e => e.職稱1).HasMaxLength(255);

                entity.Property(e => e.部門代碼).HasMaxLength(255);

                entity.Property(e => e.部門單位).HasMaxLength(255);
            });

            modelBuilder.Entity<EfftempBb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("efftemp_bb");

                entity.Property(e => e._94年考評)
                    .HasColumnName("94年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._95年考評)
                    .HasColumnName("95年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._96年考評)
                    .HasColumnName("96年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e._97年考評)
                    .HasColumnName("97年_考評")
                    .HasMaxLength(255);

                entity.Property(e => e.員工編號).HasMaxLength(255);
            });

            modelBuilder.Entity<Efftype>(entity =>
            {
                entity.HasKey(e => e.Efftype1)
                    .HasName("PK__EFFTYPE__18D17E13EC91A0AB");

                entity.ToTable("EFFTYPE");

                entity.Property(e => e.Efftype1)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.EfftypeDisp)
                    .IsRequired()
                    .HasColumnName("EFFTYPE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.EfftypeName)
                    .IsRequired()
                    .HasColumnName("EFFTYPE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EmpTts>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Adate)
                    .HasColumnName("adate")
                    .HasMaxLength(255);

                entity.Property(e => e.Cate)
                    .HasColumnName("cate")
                    .HasMaxLength(255);

                entity.Property(e => e.Itme)
                    .HasColumnName("itme")
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.NewItme)
                    .HasColumnName("new_itme")
                    .HasMaxLength(255);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(255);

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(255);

                entity.Property(e => e.OldItme)
                    .HasColumnName("old_itme")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Empcd>(entity =>
            {
                entity.HasKey(e => e.Empcd1);

                entity.ToTable("EMPCD");

                entity.Property(e => e.Empcd1)
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.EmpcdB)
                    .IsRequired()
                    .HasColumnName("EMPCD_B")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .IsRequired()
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Formal).HasColumnName("FORMAL");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nempcd)
                    .IsRequired()
                    .HasColumnName("NEMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Oldempcd)
                    .IsRequired()
                    .HasColumnName("OLDEMPCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Encodingtable>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("ENCODINGTABLE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Codedsp)
                    .IsRequired()
                    .HasColumnName("CODEDSP")
                    .HasMaxLength(50);

                entity.Property(e => e.Codename)
                    .IsRequired()
                    .HasColumnName("CODENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Codepage).HasColumnName("CODEPAGE");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Enrich>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("ENRICH");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Erpcode>(entity =>
            {
                entity.HasKey(e => e.ErpCode1);

                entity.ToTable("ERPCODE");

                entity.Property(e => e.ErpCode1)
                    .HasColumnName("ERP_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.ErpName)
                    .IsRequired()
                    .HasColumnName("ERP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ExpDept>(entity =>
            {
                entity.HasKey(e => e.DNo)
                    .HasName("PK__EXP_DEPT__76B9266E41C39AF1");

                entity.ToTable("EXP_DEPT");

                entity.Property(e => e.DNo)
                    .HasColumnName("D_NO")
                    .HasMaxLength(50)
                    .HasComment("費用代碼");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50)
                    .HasComment("費用名稱");

                entity.Property(e => e.DNoDisp)
                    .HasColumnName("D_NO_DISP")
                    .HasMaxLength(50)
                    .HasComment("費用代碼");

                entity.Property(e => e.DSum)
                    .HasColumnName("D_SUM")
                    .HasComment("加總欄位");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasComment("建檔日期");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasComment("建檔人員");
            });

            modelBuilder.Entity<Expcomp>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.SNo, e.LEmp });

                entity.ToTable("EXPCOMP");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SNo)
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LEmp)
                    .HasColumnName("L_EMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HEmp)
                    .HasColumnName("H_EMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HExp)
                    .HasColumnName("H_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LExp)
                    .HasColumnName("L_EXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Explab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.Yymm, e.InsurType });

                entity.ToTable("EXPLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.InsurType)
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fundamt)
                    .HasColumnName("FUNDAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Jobamt)
                    .HasColumnName("JOBAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Expsup>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("EXPSUP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.InsHamt)
                    .HasColumnName("INS_HAMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.PayAmt)
                    .HasColumnName("PAY_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.PayDate)
                    .HasColumnName("PAY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.TotalAmt)
                    .HasColumnName("TOTAL_AMT")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<ExtHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXT_HCODE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ExtendedHolidays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXTENDED_HOLIDAYS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Exttable>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("EXTTABLE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Columndesc)
                    .HasColumnName("COLUMNDESC")
                    .HasMaxLength(200);

                entity.Property(e => e.Columnname)
                    .IsRequired()
                    .HasColumnName("COLUMNNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Columnvalue)
                    .IsRequired()
                    .HasColumnName("COLUMNVALUE")
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Keycolumnname)
                    .IsRequired()
                    .HasColumnName("KEYCOLUMNNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Keycolumnvalue)
                    .IsRequired()
                    .HasColumnName("KEYCOLUMNVALUE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tablename)
                    .IsRequired()
                    .HasColumnName("TABLENAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.HasKey(e => new { e.FaIdno, e.Nobr });

                entity.ToTable("FAMILY");

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Autoinsgrf)
                    .HasColumnName("AUTOINSGRF")
                    .HasComputedColumnSql("([dbo].[CheckFaInsgrf]([nobr],[fa_idno],getdate()))");

                entity.Property(e => e.Autoinslab)
                    .HasColumnName("AUTOINSLAB")
                    .HasComputedColumnSql("([dbo].[CheckFaInslab]([nobr],[fa_idno],getdate()))");

                entity.Property(e => e.Bbc)
                    .IsRequired()
                    .HasColumnName("BBC")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Compny)
                    .HasColumnName("COMPNY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Educode)
                    .IsRequired()
                    .HasColumnName("EDUCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaBirdt)
                    .HasColumnName("FA_BIRDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.FaName)
                    .IsRequired()
                    .HasColumnName("FA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Famforn)
                    .HasColumnName("FAMFORN")
                    .HasComputedColumnSql("([dbo].[CheckFaInsgrf]([nobr],[fa_idno],getdate()))");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Live).HasColumnName("LIVE");

                entity.Property(e => e.RelCode)
                    .IsRequired()
                    .HasColumnName("REL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FefcToSpmDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_Dept");

                entity.Property(e => e.BossDept)
                    .HasColumnName("boss_dept")
                    .HasMaxLength(50);

                entity.Property(e => e.Cost)
                    .IsRequired()
                    .HasColumnName("cost_")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Manageradid)
                    .HasColumnName("manageradid")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitCname)
                    .IsRequired()
                    .HasColumnName("unit_cname")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitEname)
                    .IsRequired()
                    .HasColumnName("unit_ename")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasColumnName("unit_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FefcToSpmDeptMang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_DeptMang");

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FefcToSpmEmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FEFC_ToSPM_Emp");

                entity.Property(e => e.Adid)
                    .HasColumnName("adid")
                    .HasMaxLength(50);

                entity.Property(e => e.Cellphone)
                    .IsRequired()
                    .HasColumnName("cellphone")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Deptm)
                    .IsRequired()
                    .HasColumnName("DEPTM")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(60);

                entity.Property(e => e.Employeid)
                    .IsRequired()
                    .HasColumnName("employeid_")
                    .HasMaxLength(50);

                entity.Property(e => e.Extension)
                    .IsRequired()
                    .HasColumnName("extension")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupid)
                    .IsRequired()
                    .HasColumnName("groupid")
                    .HasMaxLength(50);

                entity.Property(e => e.JobEname)
                    .HasColumnName("JOB_ENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JoblName)
                    .IsRequired()
                    .HasColumnName("JOBL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name_")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Pwd)
                    .IsRequired()
                    .HasColumnName("pwd")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportline)
                    .IsRequired()
                    .HasColumnName("reportline")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FileGroup>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FileGroupRole>(entity =>
            {
                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FileStructure>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.NoticeTitle).HasMaxLength(100);

                entity.Property(e => e.SDescription)
                    .HasColumnName("sDescription")
                    .HasMaxLength(200);

                entity.Property(e => e.SFileName)
                    .HasColumnName("sFileName")
                    .HasMaxLength(255);

                entity.Property(e => e.SFileTitle)
                    .HasColumnName("sFileTitle")
                    .HasMaxLength(50);

                entity.Property(e => e.SIconName)
                    .HasColumnName("sIconName")
                    .HasMaxLength(255);

                entity.Property(e => e.SIconPath)
                    .HasColumnName("sIconPath")
                    .HasMaxLength(255);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SParentKey)
                    .IsRequired()
                    .HasColumnName("sParentKey")
                    .HasMaxLength(200);

                entity.Property(e => e.SPath)
                    .HasColumnName("sPath")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<FileStructureGroup>(entity =>
            {
                entity.Property(e => e.FileStructureCode)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<FileStructureRole>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.FileStructureKey)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Freq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FREQ");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<FreqStart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FREQ_START");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Frm211d>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM211D");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm211dSalcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM211D_SALCODE");

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Basic).HasColumnName("BASIC");

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<Frm22>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM22");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Temps).HasColumnName("TEMPS");
            });

            modelBuilder.Entity<Frm23>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM23");

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm24>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM24");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardno)
                    .IsRequired()
                    .HasColumnName("CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Descr)
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Ipadd)
                    .IsRequired()
                    .HasColumnName("IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Los).HasColumnName("LOS");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotTran).HasColumnName("NOT_TRAN");

                entity.Property(e => e.Ontime)
                    .IsRequired()
                    .HasColumnName("ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm26>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM26");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd1)
                    .IsRequired()
                    .HasColumnName("DD1")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd2)
                    .IsRequired()
                    .HasColumnName("DD2")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lost1).HasColumnName("LOST1");

                entity.Property(e => e.Lost2).HasColumnName("LOST2");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nomody).HasColumnName("NOMODY");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.T1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.T2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tt1)
                    .IsRequired()
                    .HasColumnName("TT1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tt2)
                    .IsRequired()
                    .HasColumnName("TT2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm27>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM27");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttHrs)
                    .HasColumnName("ATT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.EMins)
                    .HasColumnName("E_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Forget)
                    .HasColumnName("FORGET")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LateMins)
                    .HasColumnName("LATE_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nigamt)
                    .HasColumnName("NIGAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NightHrs)
                    .HasColumnName("NIGHT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteH)
                    .IsRequired()
                    .HasColumnName("ROTE_H")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .HasColumnName("SER")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Frm272>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM272");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm28>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM28");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Syscreate).HasColumnName("SYSCREATE");

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("UNITNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm29>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM29");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IsHoli).HasColumnName("isHoli");

                entity.Property(e => e.Jobs)
                    .IsRequired()
                    .HasColumnName("JOBS")
                    .HasMaxLength(50);

                entity.Property(e => e.JobsName)
                    .HasColumnName("Jobs_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtDeptname)
                    .HasColumnName("OT_DEPTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrname)
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rotename)
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotet)
                    .IsRequired()
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2B");

                entity.Property(e => e.Abord).HasColumnName("ABORD");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bdate2)
                    .HasColumnName("BDATE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Btime2)
                    .IsRequired()
                    .HasColumnName("BTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.Btime3)
                    .IsRequired()
                    .HasColumnName("BTIME3")
                    .HasMaxLength(50);

                entity.Property(e => e.CfmMan)
                    .IsRequired()
                    .HasColumnName("CFM_MAN ")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Compname)
                    .IsRequired()
                    .HasColumnName("COMPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cust)
                    .IsRequired()
                    .HasColumnName("CUST")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DsNo)
                    .IsRequired()
                    .HasColumnName("DS_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Edate2)
                    .HasColumnName("EDATE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime2)
                    .IsRequired()
                    .HasColumnName("ETIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime3)
                    .IsRequired()
                    .HasColumnName("ETIME3")
                    .HasMaxLength(50);

                entity.Property(e => e.GoType)
                    .IsRequired()
                    .HasColumnName("GO_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Onetomany).HasColumnName("ONETOMANY");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Target)
                    .IsRequired()
                    .HasColumnName("TARGET")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("UNITNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2j>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2J");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Ot1Hrs)
                    .HasColumnName("OT1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot2Hrs)
                    .HasColumnName("OT2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Tranp).HasColumnName("TRANP");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2p>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2P");

                entity.Property(e => e.Abs1Hrs)
                    .HasColumnName("ABS1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Abs2Hrs)
                    .HasColumnName("ABS2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AbsHrs)
                    .HasColumnName("ABS_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm2t>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM2T");

                entity.Property(e => e.AName)
                    .IsRequired()
                    .HasColumnName("A_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode1)
                    .IsRequired()
                    .HasColumnName("T_CODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode2)
                    .IsRequired()
                    .HasColumnName("T_CODE2")
                    .HasMaxLength(50);

                entity.Property(e => e.TCode3)
                    .IsRequired()
                    .HasColumnName("T_CODE3")
                    .HasMaxLength(50);

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Frm41>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM41");

                entity.Property(e => e.AccTr)
                    .IsRequired()
                    .HasColumnName("ACC_TR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccTrname)
                    .IsRequired()
                    .HasColumnName("ACC_TRNAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Acccr)
                    .IsRequired()
                    .HasColumnName("ACCCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Accdr)
                    .IsRequired()
                    .HasColumnName("ACCDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Accname)
                    .IsRequired()
                    .HasColumnName("ACCNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm42>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM42");

                entity.Property(e => e.Define1)
                    .HasColumnName("DEFINE1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define2)
                    .HasColumnName("DEFINE2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define3)
                    .HasColumnName("DEFINE3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Para1)
                    .IsRequired()
                    .HasColumnName("PARA1")
                    .HasMaxLength(50);

                entity.Property(e => e.Para2)
                    .IsRequired()
                    .HasColumnName("PARA2")
                    .HasMaxLength(50);

                entity.Property(e => e.Para3)
                    .IsRequired()
                    .HasColumnName("PARA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltycd)
                    .IsRequired()
                    .HasColumnName("SALTYCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm43>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM43");

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.AttrName)
                    .IsRequired()
                    .HasColumnName("ATTR_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Oldretire).HasColumnName("OLDRETIRE");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCodeDisp)
                    .HasColumnName("SAL_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salbasd1).HasColumnName("SALBASD1");

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<Frm46>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46A");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46B");

                entity.Property(e => e.ADate)
                    .HasColumnName("A_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.APer)
                    .HasColumnName("A_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AType).HasColumnName("A_TYPE");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasColumnName("ACNO")
                    .HasMaxLength(50);

                entity.Property(e => e.CDate)
                    .HasColumnName("C_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeAdd)
                    .IsRequired()
                    .HasColumnName("DE_ADD")
                    .HasMaxLength(60);

                entity.Property(e => e.DeDept)
                    .IsRequired()
                    .HasColumnName("DE_DEPT")
                    .HasMaxLength(200);

                entity.Property(e => e.DeMan)
                    .IsRequired()
                    .HasColumnName("DE_MAN")
                    .HasMaxLength(200);

                entity.Property(e => e.DeTel)
                    .IsRequired()
                    .HasColumnName("DE_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dispatch)
                    .IsRequired()
                    .HasColumnName("DISPATCH")
                    .HasMaxLength(50);

                entity.Property(e => e.FAmt)
                    .HasColumnName("F_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FDate)
                    .HasColumnName("F_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawDept)
                    .IsRequired()
                    .HasColumnName("LAW_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.LawMan)
                    .IsRequired()
                    .HasColumnName("LAW_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawTel)
                    .IsRequired()
                    .HasColumnName("LAW_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.MinCostLiving)
                    .HasColumnName("MIN_COST_LIVING")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.PAmt)
                    .HasColumnName("P_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.PDate)
                    .HasColumnName("P_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PPer)
                    .HasColumnName("P_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TAmt)
                    .HasColumnName("T_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TDate)
                    .HasColumnName("T_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.YymmB)
                    .IsRequired()
                    .HasColumnName("YYMM_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YymmE)
                    .IsRequired()
                    .HasColumnName("YYMM_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm46c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM46C");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasColumnName("ACNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm47>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM47");

                entity.Property(e => e.AttRote)
                    .HasColumnName("ATT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptsName)
                    .HasColumnName("DEPTS_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliType)
                    .HasColumnName("HOLI_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IsHoli).HasColumnName("isHoli");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtType)
                    .HasColumnName("OT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm48>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM48");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salseq)
                    .IsRequired()
                    .HasColumnName("SALSEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm49>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM49");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.FaName)
                    .IsRequired()
                    .HasColumnName("FA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fundamt)
                    .HasColumnName("FUNDAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.InsurType)
                    .IsRequired()
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobamt)
                    .HasColumnName("JOBAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Notedit).HasColumnName("NOTEDIT");

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalYymm)
                    .IsRequired()
                    .HasColumnName("SAL_YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm4itype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4ITYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Frm4k>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4K");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm4l>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4L");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Frm4pPrinttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM4P_PRINTTYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Frm83>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRM83");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.DNo)
                    .IsRequired()
                    .HasColumnName("D_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasColumnName("DEPT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Efflvl)
                    .IsRequired()
                    .HasColumnName("EFFLVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Effscore)
                    .HasColumnName("EFFSCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Efftype)
                    .HasColumnName("EFFTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GetHoliCodeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GetHoliCodeList");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GiftVoucher>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.GiftName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GroupType>(entity =>
            {
                entity.HasKey(e => e.GroupCode);

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Grprelcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GRPRELCD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Harcode>(entity =>
            {
                entity.HasKey(e => e.RateCode);

                entity.ToTable("HARCODE");

                entity.Property(e => e.RateCode)
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Compcharge)
                    .HasColumnName("COMPCHARGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FixAmt)
                    .HasColumnName("FIX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nopaytop)
                    .HasColumnName("NOPAYTOP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Partial)
                    .HasColumnName("PARTIAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RateName)
                    .IsRequired()
                    .HasColumnName("RATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Selfcharge)
                    .HasColumnName("SELFCHARGE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Hcode>(entity =>
            {
                entity.HasKey(e => e.HCode1);

                entity.ToTable("HCODE");

                entity.HasComment("假別代碼");

                entity.Property(e => e.HCode1)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50)
                    .HasComment("假別代碼");

                entity.Property(e => e.Absunit)
                    .HasColumnName("ABSUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.Calot).HasColumnName("CALOT");

                entity.Property(e => e.Che).HasColumnName("CHE");

                entity.Property(e => e.Datemin)
                    .HasColumnName("DATEMIN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Dateunit)
                    .IsRequired()
                    .HasColumnName("DATEUNIT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dcode)
                    .IsRequired()
                    .HasColumnName("DCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DisApp)
                    .HasColumnName("DIS_APP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Discontent).HasColumnName("DISCONTENT");

                entity.Property(e => e.Displayform).HasColumnName("DISPLAYFORM");

                entity.Property(e => e.EfNight).HasColumnName("EF_NIGHT");

                entity.Property(e => e.EffFood).HasColumnName("EFF_FOOD");

                entity.Property(e => e.Flag)
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.FlowFinal)
                    .HasColumnName("FLOW_FINAL")
                    .HasMaxLength(50);

                entity.Property(e => e.FlowGo)
                    .HasColumnName("FLOW_GO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.GroupCode)
                    .HasColumnName("GROUP_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HCodeDisp)
                    .HasColumnName("H_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.HEname)
                    .IsRequired()
                    .HasColumnName("H_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50)
                    .HasComment("假別名稱");

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InHoli).HasColumnName("IN_HOLI");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.MaxNum)
                    .HasColumnName("MAX_NUM")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinNum)
                    .HasColumnName("MIN_NUM")
                    .HasColumnType("decimal(16, 2)")
                    .HasComment("最小單位");

                entity.Property(e => e.Noaward).HasColumnName("NOAWARD");

                entity.Property(e => e.NotDel).HasColumnName("NOT_DEL");

                entity.Property(e => e.NotSum).HasColumnName("NOT_SUM");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Station)
                    .HasColumnName("STATION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50)
                    .HasComment("單位");

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HcodeRule>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Custom).HasMaxLength(500);

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.Value1).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Value2).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<HcodeType>(entity =>
            {
                entity.HasKey(e => e.Htype);

                entity.Property(e => e.Htype)
                    .HasColumnName("HTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpireCode).HasMaxLength(50);

                entity.Property(e => e.ExtendCode).HasMaxLength(50);

                entity.Property(e => e.GetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasColumnName("TYPE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearMax)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Hcodes>(entity =>
            {
                entity.HasKey(e => new { e.HCode, e.SalCode });

                entity.ToTable("HCODES");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .IsRequired()
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Hcodesrate>(entity =>
            {
                entity.HasKey(e => new { e.HCode, e.SalCode, e.YearB, e.DayB });

                entity.ToTable("HCODESRATE");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.YearB)
                    .HasColumnName("YEAR_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DayB)
                    .HasColumnName("DAY_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DayE)
                    .HasColumnName("DAY_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YearE)
                    .HasColumnName("YEAR_E")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<HolDay>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.HoliCode, e.Rote });

                entity.ToTable("HOL_DAY");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Atype)
                    .IsRequired()
                    .HasColumnName("ATYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Otratecd)
                    .IsRequired()
                    .HasColumnName("OTRATECD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Holi>(entity =>
            {
                entity.HasKey(e => new { e.HDate, e.HoliCode });

                entity.ToTable("HOLI");

                entity.Property(e => e.HDate)
                    .HasColumnName("H_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AttCode)
                    .IsRequired()
                    .HasColumnName("ATT_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Holi1).HasColumnName("HOLI");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Othcode)
                    .IsRequired()
                    .HasColumnName("OTHCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Holicd>(entity =>
            {
                entity.HasKey(e => e.HoliCode);

                entity.ToTable("HOLICD");

                entity.Property(e => e.HoliCode)
                    .HasColumnName("HOLI_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.DateCode)
                    .IsRequired()
                    .HasColumnName("DATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliCodeDisp)
                    .HasColumnName("HOLI_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.HoliName)
                    .IsRequired()
                    .HasColumnName("HOLI_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Noset).HasColumnName("NOSET");
            });

            modelBuilder.Entity<HrFile>(entity =>
            {
                entity.ToTable("HR_File");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FileDesc).HasMaxLength(500);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FileNameExt).HasMaxLength(10);

                entity.Property(e => e.FileType).HasMaxLength(200);

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasColumnName("GroupID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsStoredInDb)
                    .IsRequired()
                    .HasColumnName("IsStoredInDB")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Path).HasMaxLength(1000);
            });

            modelBuilder.Entity<HrPortalAbs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Abs");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.HCode)
                    .IsRequired()
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.HName)
                    .IsRequired()
                    .HasColumnName("H_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.TolDay)
                    .HasColumnName("TOL_DAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TolHours)
                    .HasColumnName("TOL_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRest)
                    .IsRequired()
                    .HasColumnName("YEAR_REST")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Attend");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotename)
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalEmpInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_EmpInfo");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalEmpInfoLe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_EmpInfo_Le");

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Empdescr)
                    .HasColumnName("EMPDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Mang).HasColumnName("MANG");

                entity.Property(e => e.NameAd)
                    .HasColumnName("NAME_AD")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrPortalOt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HR_Portal_Ot");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.DName)
                    .HasColumnName("D_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Otrname)
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<IdColumnsData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("idColumnsData");

                entity.Property(e => e.BEmptyOrNull).HasColumnName("bEmptyOrNull");

                entity.Property(e => e.BEmptyToNull).HasColumnName("bEmptyToNull");

                entity.Property(e => e.BFk).HasColumnName("bFK");

                entity.Property(e => e.BPk).HasColumnName("bPK");

                entity.Property(e => e.ColumnTypeSCode)
                    .IsRequired()
                    .HasColumnName("ColumnType_sCode")
                    .HasMaxLength(129);

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAutoKey)
                    .IsRequired()
                    .HasColumnName("iAutoKey")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IColumnLength).HasColumnName("iColumnLength");

                entity.Property(e => e.IColumnOrder).HasColumnName("iColumnOrder");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.ImportTypeSCode)
                    .IsRequired()
                    .HasColumnName("ImportType_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IpTablesSCode)
                    .IsRequired()
                    .HasColumnName("ipTables_sCode")
                    .HasMaxLength(128);

                entity.Property(e => e.ReplaceSCode)
                    .IsRequired()
                    .HasColumnName("Replace_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SCode)
                    .HasColumnName("sCode")
                    .HasMaxLength(128);

                entity.Property(e => e.SFkcode).HasColumnName("sFKCode");

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(128);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SSetValue).HasColumnName("sSetValue");

                entity.Property(e => e.SSourceCode)
                    .HasColumnName("sSourceCode")
                    .HasMaxLength(128);

                entity.Property(e => e.STargetCode)
                    .HasColumnName("sTargetCode")
                    .HasMaxLength(128);

                entity.Property(e => e.SpecialIf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialSet)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ValueSCode)
                    .IsRequired()
                    .HasColumnName("Value_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdTablesData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("idTablesData");

                entity.Property(e => e.BEssential).HasColumnName("bEssential");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAutoKey)
                    .IsRequired()
                    .HasColumnName("iAutoKey")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IImportSort).HasColumnName("iImportSort");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.ImportTypeSCode)
                    .IsRequired()
                    .HasColumnName("ImportType_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReplaceSCode)
                    .IsRequired()
                    .HasColumnName("Replace_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SCode).HasColumnName("sCode");

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(128);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SSourceCode)
                    .IsRequired()
                    .HasColumnName("sSourceCode")
                    .HasMaxLength(128);

                entity.Property(e => e.STargetCode)
                    .IsRequired()
                    .HasColumnName("sTargetCode")
                    .HasMaxLength(128);

                entity.Property(e => e.TableCateorgySCode)
                    .IsRequired()
                    .HasColumnName("TableCateorgy_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableTypeSCode)
                    .IsRequired()
                    .HasColumnName("TableType_sCode")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImportType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IMPORT_TYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<InOutLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasColumnName("EmployeeID")
                    .HasMaxLength(20);

                entity.Property(e => e.InOutTime).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateBy)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Inholi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INHOLI");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Inpolab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.Yymm, e.InsurType });

                entity.ToTable("INPOLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.InsurType)
                    .HasColumnName("INSUR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Days)
                    .HasColumnName("DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp)
                    .HasColumnName("EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inscd)
                    .HasColumnName("INSCD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RateCode)
                    .IsRequired()
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Inscomp>(entity =>
            {
                entity.HasKey(e => e.SNo);

                entity.ToTable("INSCOMP");

                entity.Property(e => e.SNo)
                    .HasColumnName("S_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Defa).HasColumnName("DEFA");

                entity.Property(e => e.Insaddr)
                    .IsRequired()
                    .HasColumnName("INSADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Insidno)
                    .IsRequired()
                    .HasColumnName("INSIDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Insman)
                    .IsRequired()
                    .HasColumnName("INSMAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Insname)
                    .IsRequired()
                    .HasColumnName("INSNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Insno)
                    .IsRequired()
                    .HasColumnName("INSNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Inspo)
                    .IsRequired()
                    .HasColumnName("INSPO")
                    .HasMaxLength(50);

                entity.Property(e => e.Inssub)
                    .IsRequired()
                    .HasColumnName("INSSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.Instel)
                    .IsRequired()
                    .HasColumnName("INSTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobaccrate)
                    .HasColumnName("JOBACCRATE")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RelMan)
                    .IsRequired()
                    .HasColumnName("REL_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelTel)
                    .IsRequired()
                    .HasColumnName("REL_TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SNoDisp)
                    .HasColumnName("S_NO_DISP")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Inscountry>(entity =>
            {
                entity.HasKey(e => e.SNo);

                entity.ToTable("INSCOUNTRY");

                entity.Property(e => e.SNo)
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("S_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Insglv>(entity =>
            {
                entity.HasKey(e => e.InsType);

                entity.ToTable("INSGLV");

                entity.Property(e => e.InsType)
                    .HasColumnName("INS_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CancerA)
                    .HasColumnName("CANCER_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerB)
                    .HasColumnName("CANCER_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerC)
                    .HasColumnName("CANCER_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CancerD)
                    .HasColumnName("CANCER_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceA)
                    .HasColumnName("CHANCE_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceB)
                    .HasColumnName("CHANCE_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceC)
                    .HasColumnName("CHANCE_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ChanceD)
                    .HasColumnName("CHANCE_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpA)
                    .HasColumnName("EXP_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpB)
                    .HasColumnName("EXP_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpC)
                    .HasColumnName("EXP_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ExpD)
                    .HasColumnName("EXP_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalA)
                    .HasColumnName("HOSPITAL_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalB)
                    .HasColumnName("HOSPITAL_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalC)
                    .HasColumnName("HOSPITAL_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HospitalD)
                    .HasColumnName("HOSPITAL_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LifeA)
                    .HasColumnName("LIFE_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeB)
                    .HasColumnName("LIFE_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeC)
                    .HasColumnName("LIFE_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LifeD)
                    .HasColumnName("LIFE_D")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatA)
                    .HasColumnName("OUTPAT_A")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatB)
                    .HasColumnName("OUTPAT_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatC)
                    .HasColumnName("OUTPAT_C")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OutpatD)
                    .HasColumnName("OUTPAT_D")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Insgrf>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate })
                    .HasName("PK_INSGRF_1");

                entity.ToTable("INSGRF");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Insgrlv>(entity =>
            {
                entity.HasKey(e => e.PlanNo)
                    .HasName("PK_INSGRLV_1");

                entity.ToTable("INSGRLV");

                entity.Property(e => e.PlanNo)
                    .HasColumnName("PLAN_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.AcciAmt)
                    .HasColumnName("ACCI_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.BAmt)
                    .HasColumnName("B_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExpa)
                    .HasColumnName("COM_EXPA")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExpb)
                    .HasColumnName("COM_EXPB")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExpc)
                    .HasColumnName("COM_EXPC")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExpd)
                    .HasColumnName("COM_EXPD")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExta)
                    .HasColumnName("COM_EXTA")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExtb)
                    .HasColumnName("COM_EXTB")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExtc)
                    .HasColumnName("COM_EXTC")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ComExtd)
                    .HasColumnName("COM_EXTD")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.EAmt)
                    .HasColumnName("E_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ExpAmt)
                    .HasColumnName("EXP_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Expa)
                    .HasColumnName("EXPA")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Expb)
                    .HasColumnName("EXPB")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Expc)
                    .HasColumnName("EXPC")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Expd)
                    .HasColumnName("EXPD")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.ExtAmt)
                    .HasColumnName("EXT_AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Exta)
                    .HasColumnName("EXTA")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Extb)
                    .HasColumnName("EXTB")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Extc)
                    .HasColumnName("EXTC")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Extd)
                    .HasColumnName("EXTD")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.PlanNoDisp)
                    .IsRequired()
                    .HasColumnName("PLAN_NO_DISP")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Insgrp>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate, e.OutDate });

                entity.ToTable("INSGRP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<InsgrpTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("insgrp_temp");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<InsgrpTemp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("insgrp_temp1");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<InsgrpTemp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("insgrp_temp2");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<InsgrpTemp3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("insgrp_temp3");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<InsgrpTemp4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("insgrp_temp4");

                entity.Property(e => e.Amt1)
                    .HasColumnName("AMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt2)
                    .HasColumnName("AMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt3)
                    .HasColumnName("AMT3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt4)
                    .HasColumnName("AMT4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt5)
                    .HasColumnName("AMT5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amt6)
                    .HasColumnName("AMT6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cop1)
                    .HasColumnName("COP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop2)
                    .HasColumnName("COP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop3)
                    .HasColumnName("COP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop4)
                    .HasColumnName("COP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop5)
                    .HasColumnName("COP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Cop6)
                    .HasColumnName("COP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Copexp)
                    .HasColumnName("COPEXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1)
                    .HasColumnName("EXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp1cal).HasColumnName("EXP1CAL");

                entity.Property(e => e.Exp2)
                    .HasColumnName("EXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp2cal).HasColumnName("EXP2CAL");

                entity.Property(e => e.Exp3)
                    .HasColumnName("EXP3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp3cal).HasColumnName("EXP3CAL");

                entity.Property(e => e.Exp4)
                    .HasColumnName("EXP4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp5)
                    .HasColumnName("EXP5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Exp6)
                    .HasColumnName("EXP6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.GrpType)
                    .IsRequired()
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pan)
                    .IsRequired()
                    .HasColumnName("PAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Totexp)
                    .HasColumnName("TOTEXP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Inslab>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.FaIdno, e.InDate })
                    .HasName("PK_INSLAB_1");

                entity.ToTable("INSLAB");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasColumnName("CODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HAmt)
                    .HasColumnName("H_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HrateCode)
                    .IsRequired()
                    .HasColumnName("HRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LAmt)
                    .HasColumnName("L_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.LrateCode)
                    .IsRequired()
                    .HasColumnName("LRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutDate)
                    .HasColumnName("OUT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.RAmt)
                    .HasColumnName("R_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RoutDate)
                    .HasColumnName("ROUT_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SNo)
                    .IsRequired()
                    .HasColumnName("S_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sptyp)
                    .IsRequired()
                    .HasColumnName("SPTYP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Wbsptyp)
                    .IsRequired()
                    .HasColumnName("WBSPTYP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Insname>(entity =>
            {
                entity.HasKey(e => e.No);

                entity.ToTable("INSNAME");

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.No1)
                    .IsRequired()
                    .HasColumnName("NO1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<InsurType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSUR_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Insurcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSURCD");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Insurlv>(entity =>
            {
                entity.HasKey(e => e.Amt)
                    .HasName("PK_INSURLV_1");

                entity.ToTable("INSURLV");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.EffDateh)
                    .HasColumnName("EFF_DATEH")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffDatel)
                    .HasColumnName("EFF_DATEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffDater)
                    .HasColumnName("EFF_DATER")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EffRate)
                    .HasColumnName("EFF_RATE")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LffDateh)
                    .HasColumnName("LFF_DATEH")
                    .HasColumnType("datetime");

                entity.Property(e => e.LffDatel)
                    .HasColumnName("LFF_DATEL")
                    .HasColumnType("datetime");

                entity.Property(e => e.LffDater)
                    .HasColumnName("LFF_DATER")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Ipcontrol>(entity =>
            {
                entity.HasKey(e => e.Ipadd);

                entity.ToTable("IPCONTROL");

                entity.Property(e => e.Ipadd)
                    .HasColumnName("IPADD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ipname)
                    .IsRequired()
                    .HasColumnName("IPNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abs");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .HasColumnName("sAname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .HasColumnName("sSerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbs1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abs1");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .IsRequired()
                    .HasColumnName("sAname")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .HasColumnName("sSerNo")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbsUnion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_AbsUnion");

                entity.Property(e => e.BChe).HasColumnName("bChe");

                entity.Property(e => e.BDiscontent).HasColumnName("bDiscontent");

                entity.Property(e => e.BDisplayform).HasColumnName("bDisplayform");

                entity.Property(e => e.BInHoli).HasColumnName("bInHoli");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IInterval)
                    .HasColumnName("iInterval")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMax)
                    .HasColumnName("iMax")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMin)
                    .HasColumnName("iMin")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IUse)
                    .HasColumnName("iUse")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SDcode)
                    .HasColumnName("sDcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliName)
                    .HasColumnName("sHoliName")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerno)
                    .IsRequired()
                    .HasColumnName("sSerno")
                    .HasMaxLength(50);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SUint)
                    .HasColumnName("sUint")
                    .HasMaxLength(50);

                entity.Property(e => e.SYearRest)
                    .HasColumnName("sYearRest")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAbst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Abst");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITolHours)
                    .HasColumnName("iTolHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAname)
                    .HasColumnName("sAname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.ST1code)
                    .HasColumnName("sT1Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ST2code)
                    .HasColumnName("sT2Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ST3code)
                    .HasColumnName("sT3Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAttCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_AttCard");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.ST1)
                    .HasColumnName("sT1")
                    .HasMaxLength(50);

                entity.Property(e => e.ST2)
                    .HasColumnName("sT2")
                    .HasMaxLength(50);

                entity.Property(e => e.STt1)
                    .HasColumnName("sTT1")
                    .HasMaxLength(50);

                entity.Property(e => e.STt2)
                    .HasColumnName("sTT2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Attend");

                entity.Property(e => e.BAbs).HasColumnName("bAbs");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IEmins)
                    .HasColumnName("iEMins")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IForget)
                    .HasColumnName("iForget")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ILateMins)
                    .HasColumnName("iLateMins")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Base");

                entity.Property(e => e.BCalAbs).HasColumnName("bCalAbs");

                entity.Property(e => e.BCountMa).HasColumnName("bCountMa");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BMang1).HasColumnName("bMang1");

                entity.Property(e => e.BNoTer).HasColumnName("bNoTer");

                entity.Property(e => e.BOnlyOnTime).HasColumnName("bOnlyOnTime");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DBirdt)
                    .HasColumnName("dBirdt")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DInDate)
                    .HasColumnName("dInDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DOuDate)
                    .HasColumnName("dOuDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCalOt)
                    .HasColumnName("sCalOt")
                    .HasMaxLength(50);

                entity.Property(e => e.SCarcd)
                    .HasColumnName("sCarcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SCard)
                    .HasColumnName("sCard")
                    .HasMaxLength(50);

                entity.Property(e => e.SComp)
                    .HasColumnName("sComp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptmCode)
                    .HasColumnName("sDeptmCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptsCode)
                    .HasColumnName("sDeptsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDi)
                    .HasColumnName("sDI")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmail)
                    .HasColumnName("sEmail")
                    .HasMaxLength(60);

                entity.Property(e => e.SEmpcd)
                    .HasColumnName("sEmpcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SGsm)
                    .HasColumnName("sGsm")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SIdno)
                    .HasColumnName("sIdno")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblCode)
                    .HasColumnName("sJoblCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobsCode)
                    .HasColumnName("sJobsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(101);

                entity.Property(e => e.SNameC)
                    .HasColumnName("sNameC")
                    .HasMaxLength(50);

                entity.Property(e => e.SNameE)
                    .HasColumnName("sNameE")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SPassWord)
                    .HasColumnName("sPassWord")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.SSubTel)
                    .HasColumnName("sSubTel")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SWrokcd)
                    .HasColumnName("sWrokcd")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrBaseTts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_BaseTts");

                entity.Property(e => e.BCalAbs).HasColumnName("bCalAbs");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BMang1).HasColumnName("bMang1");

                entity.Property(e => e.BNoTer).HasColumnName("bNoTer");

                entity.Property(e => e.BOnlyOnTime).HasColumnName("bOnlyOnTime");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DOuDate)
                    .HasColumnName("dOuDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCalOt)
                    .HasColumnName("sCalOt")
                    .HasMaxLength(50);

                entity.Property(e => e.SCarcd)
                    .HasColumnName("sCarcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SCard)
                    .HasColumnName("sCard")
                    .HasMaxLength(50);

                entity.Property(e => e.SComp)
                    .HasColumnName("sComp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptmCode)
                    .HasColumnName("sDeptmCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptsCode)
                    .HasColumnName("sDeptsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDi)
                    .HasColumnName("sDI")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmpcd)
                    .HasColumnName("sEmpcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblCode)
                    .HasColumnName("sJoblCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobsCode)
                    .HasColumnName("sJobsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Card");

                entity.Property(e => e.BLos).HasColumnName("bLos");

                entity.Property(e => e.BNotTran).HasColumnName("bNotTran");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCode)
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SIp)
                    .HasColumnName("sIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SMeno)
                    .HasColumnName("sMeno")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SOnTime)
                    .HasColumnName("sOnTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SReasonCode)
                    .HasColumnName("sReasonCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .IsRequired()
                    .HasColumnName("sSerNo")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JbHrCardApp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_CardApp");

                entity.Property(e => e.BTemps).HasColumnName("bTemps");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.SCardNo)
                    .HasColumnName("sCardNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDataGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DataGroup");

                entity.Property(e => e.SComp)
                    .HasColumnName("sComp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDataGroup)
                    .IsRequired()
                    .HasColumnName("sDataGroup")
                    .HasMaxLength(50);

                entity.Property(e => e.SEmail)
                    .IsRequired()
                    .HasColumnName("sEmail")
                    .HasMaxLength(50);

                entity.Property(e => e.SFlowGo)
                    .IsRequired()
                    .HasColumnName("sFlowGo")
                    .HasMaxLength(50);

                entity.Property(e => e.SGroupName)
                    .IsRequired()
                    .HasColumnName("sGroupName")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrB1)
                    .IsRequired()
                    .HasColumnName("sNobrB1")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrB2)
                    .IsRequired()
                    .HasColumnName("sNobrB2")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrE1)
                    .IsRequired()
                    .HasColumnName("sNobrE1")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobrE2)
                    .IsRequired()
                    .HasColumnName("sNobrE2")
                    .HasMaxLength(50);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<JbHrDataPa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DataPa");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDataPass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DataPass");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Dept");

                entity.Property(e => e.BRes).HasColumnName("bRes");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptCodeDisp)
                    .HasColumnName("sDeptCodeDisp")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptParent)
                    .HasColumnName("sDeptParent")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptPathCode)
                    .IsRequired()
                    .HasColumnName("sDeptPathCode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptPathName)
                    .IsRequired()
                    .HasColumnName("sDeptPathName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptTree)
                    .HasColumnName("sDeptTree")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDeptLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_DeptLevel");

                entity.Property(e => e.ISorting).HasColumnName("iSorting");

                entity.Property(e => e.SDeptLevelCode)
                    .IsRequired()
                    .HasColumnName("sDeptLevelCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDeptm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Deptm");

                entity.Property(e => e.DDateA)
                    .HasColumnName("dDateA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateD)
                    .HasColumnName("dDateD")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptParent)
                    .HasColumnName("sDeptParent")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptPathCode)
                    .IsRequired()
                    .HasColumnName("sDeptPathCode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptPathName)
                    .IsRequired()
                    .HasColumnName("sDeptPathName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SDeptTree)
                    .HasColumnName("sDeptTree")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSignGroup)
                    .IsRequired()
                    .HasColumnName("sSignGroup")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrDepts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Depts");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDdate)
                    .HasColumnName("dDdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDeptCode)
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrExtTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_ExtTable");

                entity.Property(e => e.SColumnDesc)
                    .HasColumnName("sColumnDesc")
                    .HasMaxLength(200);

                entity.Property(e => e.SColumnName)
                    .IsRequired()
                    .HasColumnName("sColumnName")
                    .HasMaxLength(50);

                entity.Property(e => e.SColumnValue)
                    .IsRequired()
                    .HasColumnName("sColumnValue")
                    .HasMaxLength(200);

                entity.Property(e => e.SKeyColumnName)
                    .IsRequired()
                    .HasColumnName("sKeyColumnName")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyColumnValue)
                    .IsRequired()
                    .HasColumnName("sKeyColumnValue")
                    .HasMaxLength(50);

                entity.Property(e => e.STableName)
                    .IsRequired()
                    .HasColumnName("sTableName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Hcode");

                entity.Property(e => e.BCalOt).HasColumnName("bCalOt");

                entity.Property(e => e.BCheck).HasColumnName("bCheck");

                entity.Property(e => e.BDisplayForm).HasColumnName("bDisplayForm");

                entity.Property(e => e.BInHoli).HasColumnName("bInHoli");

                entity.Property(e => e.BMang).HasColumnName("bMang");

                entity.Property(e => e.BNotDel).HasColumnName("bNotDel");

                entity.Property(e => e.IAbsUint)
                    .HasColumnName("iAbsUint")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMax)
                    .HasColumnName("iMax")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IMin)
                    .HasColumnName("iMin")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SDcode)
                    .HasColumnName("sDcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SFlowFinal)
                    .IsRequired()
                    .HasColumnName("sFlowFinal")
                    .HasMaxLength(50);

                entity.Property(e => e.SFlowGo)
                    .IsRequired()
                    .HasColumnName("sFlowGo")
                    .HasMaxLength(50);

                entity.Property(e => e.SGroupCode)
                    .IsRequired()
                    .HasColumnName("sGroupCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHcode)
                    .HasColumnName("sHcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHname)
                    .HasColumnName("sHname")
                    .HasMaxLength(50);

                entity.Property(e => e.SHnameE)
                    .HasColumnName("sHnameE")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(101);

                entity.Property(e => e.SSex)
                    .HasColumnName("sSex")
                    .HasMaxLength(50);

                entity.Property(e => e.SUnit)
                    .HasColumnName("sUnit")
                    .HasMaxLength(50);

                entity.Property(e => e.SYearRest)
                    .HasColumnName("sYearRest")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHoli>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Holi");

                entity.Property(e => e.BHoli).HasColumnName("bHoli");

                entity.Property(e => e.DDate)
                    .HasColumnName("dDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SAttCode)
                    .HasColumnName("sAttCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtHcode)
                    .HasColumnName("sOtHcode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrHolicd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Holicd");

                entity.Property(e => e.BNoSet).HasColumnName("bNoSet");

                entity.Property(e => e.SDateCode)
                    .HasColumnName("sDateCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliCode)
                    .HasColumnName("sHoliCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SHoliName)
                    .HasColumnName("sHoliName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrJob>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Job");

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobName)
                    .HasColumnName("sJobName")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobTree)
                    .HasColumnName("sJobTree")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrJobl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Jobl");

                entity.Property(e => e.SJobCode)
                    .HasColumnName("sJobCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobName)
                    .HasColumnName("sJobName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrLockWage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_LockWage");

                entity.Property(e => e.SSaladr)
                    .HasColumnName("sSaladr")
                    .HasMaxLength(50);

                entity.Property(e => e.SSeq)
                    .HasColumnName("sSeq")
                    .HasMaxLength(2);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<JbHrOt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Ot");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOtCar)
                    .HasColumnName("iOtCar")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.IOtHrs)
                    .HasColumnName("iOtHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IRestHrs)
                    .HasColumnName("iRestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ITotHours)
                    .HasColumnName("iTotHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(200);

                entity.Property(e => e.SOtDept)
                    .HasColumnName("sOtDept")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRote)
                    .HasColumnName("sOtRote")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtrcd)
                    .HasColumnName("sOtrcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .IsRequired()
                    .HasColumnName("sSerNo")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .IsRequired()
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrOt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Ot1");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOtCar)
                    .HasColumnName("iOtCar")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.IOtHrs)
                    .HasColumnName("iOtHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IRestHrs)
                    .HasColumnName("iRestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ITotHours)
                    .HasColumnName("iTotHours")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasMaxLength(200);

                entity.Property(e => e.SOtDept)
                    .HasColumnName("sOtDept")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRote)
                    .HasColumnName("sOtRote")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtrcd)
                    .HasColumnName("sOtrcd")
                    .HasMaxLength(50);

                entity.Property(e => e.SSerNo)
                    .IsRequired()
                    .HasColumnName("sSerNo")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STimeB)
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50);

                entity.Property(e => e.STimeE)
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .IsRequired()
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrOtRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_OtRate");

                entity.Property(e => e.IOtUnit).HasColumnName("iOtUnit");

                entity.Property(e => e.SOtRateCode)
                    .HasColumnName("sOtRateCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRateName)
                    .HasColumnName("sOtRateName")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtRateTypew)
                    .HasColumnName("sOtRateTypew")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrOtrcd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Otrcd");

                entity.Property(e => e.BDisplay).HasColumnName("bDisplay");

                entity.Property(e => e.BNoCalc).HasColumnName("bNoCalc");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SOtrCode)
                    .HasColumnName("sOtrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtrName)
                    .HasColumnName("sOtrName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Reason");

                entity.Property(e => e.BAtt).HasColumnName("bAtt");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.SReasonCode)
                    .HasColumnName("sReasonCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SReasonName)
                    .HasColumnName("sReasonName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rote");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAlllates)
                    .HasColumnName("iAlllates")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IAlllates1)
                    .HasColumnName("iAlllates1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IDkHrs)
                    .HasColumnName("iDkHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IHoliDayAddMin).HasColumnName("iHoliDayAddMin");

                entity.Property(e => e.IMoHrs)
                    .HasColumnName("iMoHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISort).HasColumnName("iSort");

                entity.Property(e => e.IWkHrs)
                    .HasColumnName("iWkHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IYrrestHrs)
                    .HasColumnName("iYrrestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SAttEnd)
                    .HasColumnName("sAttEnd")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(204);

                entity.Property(e => e.SOffTime)
                    .HasColumnName("sOffTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SOffTime2)
                    .HasColumnName("sOffTime2")
                    .HasMaxLength(50);

                entity.Property(e => e.SOnTime)
                    .HasColumnName("sOnTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SOtBegin)
                    .HasColumnName("sOtBegin")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB1time)
                    .HasColumnName("sResB1Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB2time)
                    .HasColumnName("sResB2Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB3time)
                    .HasColumnName("sResB3Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResB4time)
                    .HasColumnName("sResB4Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResBtime)
                    .HasColumnName("sResBTime")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE1time)
                    .HasColumnName("sResE1Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE2time)
                    .HasColumnName("sResE2Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE3time)
                    .HasColumnName("sResE3Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResE4time)
                    .HasColumnName("sResE4Time")
                    .HasMaxLength(50);

                entity.Property(e => e.SResEtime)
                    .HasColumnName("sResETime")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteName)
                    .HasColumnName("sRoteName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRotechg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rotechg");

                entity.Property(e => e.DAdate)
                    .HasColumnName("dAdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SRoteCode)
                    .HasColumnName("sRoteCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrRotet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Rotet");

                entity.Property(e => e.IFreqDate)
                    .HasColumnName("iFreqDate")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ISalHrs)
                    .HasColumnName("iSalHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IYrrestHrs)
                    .HasColumnName("iYrrestHrs")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SFreq)
                    .HasColumnName("sFreq")
                    .HasMaxLength(50);

                entity.Property(e => e.SFreqStart)
                    .HasColumnName("sFreqStart")
                    .HasMaxLength(50);

                entity.Property(e => e.SInHoli)
                    .HasColumnName("sInHoli")
                    .HasMaxLength(50);

                entity.Property(e => e.SR1)
                    .HasColumnName("sR1")
                    .HasMaxLength(50);

                entity.Property(e => e.SR10)
                    .HasColumnName("sR10")
                    .HasMaxLength(50);

                entity.Property(e => e.SR2)
                    .HasColumnName("sR2")
                    .HasMaxLength(50);

                entity.Property(e => e.SR3)
                    .HasColumnName("sR3")
                    .HasMaxLength(50);

                entity.Property(e => e.SR4)
                    .HasColumnName("sR4")
                    .HasMaxLength(50);

                entity.Property(e => e.SR5)
                    .HasColumnName("sR5")
                    .HasMaxLength(50);

                entity.Property(e => e.SR6)
                    .HasColumnName("sR6")
                    .HasMaxLength(50);

                entity.Property(e => e.SR7)
                    .HasColumnName("sR7")
                    .HasMaxLength(50);

                entity.Property(e => e.SR8)
                    .HasColumnName("sR8")
                    .HasMaxLength(50);

                entity.Property(e => e.SR9)
                    .HasColumnName("sR9")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotet)
                    .HasColumnName("sRotet")
                    .HasMaxLength(50);

                entity.Property(e => e.SRotetName)
                    .HasColumnName("sRotetName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrTmTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_TmTable");

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IFreqNo)
                    .HasColumnName("iFreqNo")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IHolis)
                    .HasColumnName("iHolis")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.INo)
                    .HasColumnName("iNo")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SNobr)
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JbHrTtsCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_TtsCode");

                entity.Property(e => e.STtsCode)
                    .HasColumnName("sTtsCode")
                    .HasMaxLength(50);

                entity.Property(e => e.STtsName)
                    .HasColumnName("sTtsName")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<JbHrTtscd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JB_HR_Ttscd");

                entity.Property(e => e.SCode)
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCodeDisp)
                    .HasColumnName("sCodeDisp")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => e.Job1);

                entity.ToTable("JOB");

                entity.Property(e => e.Job1)
                    .HasColumnName("JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobDisp)
                    .HasColumnName("JOB_DISP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobEname)
                    .IsRequired()
                    .HasColumnName("JOB_ENAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobTree)
                    .HasColumnName("JOB_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jobl)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Joblb)
                    .HasColumnName("JOBLB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Joble)
                    .HasColumnName("JOBLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldJob)
                    .HasColumnName("OLD_JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Workamt)
                    .HasColumnName("WORKAMT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Jobl>(entity =>
            {
                entity.HasKey(e => e.Jobl1);

                entity.ToTable("JOBL");

                entity.Property(e => e.Jobl1)
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.BSal)
                    .HasColumnName("B_SAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BSal1)
                    .HasColumnName("B_SAL1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BSal2)
                    .HasColumnName("B_SAL2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal)
                    .HasColumnName("E_SAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal1)
                    .HasColumnName("E_SAL1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ESal2)
                    .HasColumnName("E_SAL2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JoblDisp)
                    .HasColumnName("JOBL_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.JoblGrup)
                    .IsRequired()
                    .HasColumnName("JOBL_GRUP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldJobl)
                    .IsRequired()
                    .HasColumnName("OLD_JOBL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Jobo>(entity =>
            {
                entity.HasKey(e => e.Jobo1);

                entity.ToTable("JOBO");

                entity.Property(e => e.Jobo1)
                    .HasColumnName("JOBO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobTree)
                    .IsRequired()
                    .HasColumnName("JOB_TREE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Jobs>(entity =>
            {
                entity.HasKey(e => e.Jobs1);

                entity.ToTable("JOBS");

                entity.Property(e => e.Jobs1)
                    .HasColumnName("JOBS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.JobsDisp)
                    .HasColumnName("JOBS_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqColumn>(entity =>
            {
                entity.ToTable("jqColumn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqCondition>(entity =>
            {
                entity.ToTable("jqCondition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comparison)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(50);

                entity.Property(e => e.Value).IsRequired();

                entity.Property(e => e.Value1).IsRequired();
            });

            modelBuilder.Entity<JqForeignKey>(entity =>
            {
                entity.ToTable("jqForeignKey");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChildColumn)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ChildId).HasColumnName("ChildID");

                entity.Property(e => e.ChildTable)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentColumn)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ParentTable)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");
            });

            modelBuilder.Entity<JqPreCondition>(entity =>
            {
                entity.ToTable("jqPreCondition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comparison)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Value).IsRequired();
            });

            modelBuilder.Entity<JqSetting>(entity =>
            {
                entity.ToTable("jqSetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ConnectString)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerWhere)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PageSize).HasDefaultValueSql("((1000))");

                entity.Property(e => e.QueryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuerySetting)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("((1))");

                entity.Property(e => e.SourceType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqSqlQueryField>(entity =>
            {
                entity.ToTable("jqSqlQueryField");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomQuery)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.QueryType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqTable>(entity =>
            {
                entity.ToTable("jqTable");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<JqUserColumn>(entity =>
            {
                entity.ToTable("jqUserColumn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BottomSummaryFormatString)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BottomSummaryOption)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopSummaryFormatString)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TopSummaryOption)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Larcode>(entity =>
            {
                entity.HasKey(e => e.RateCode);

                entity.ToTable("LARCODE");

                entity.Property(e => e.RateCode)
                    .HasColumnName("RATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Compcharge)
                    .HasColumnName("COMPCHARGE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Jobaccrate)
                    .HasColumnName("JOBACCRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Losjobrate)
                    .HasColumnName("LOSJOBRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Normalrate)
                    .HasColumnName("NORMALRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Partial)
                    .HasColumnName("PARTIAL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RateName)
                    .IsRequired()
                    .HasColumnName("RATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Selfcharge)
                    .HasColumnName("SELFCHARGE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<LessonType>(entity =>
            {
                entity.HasKey(e => e.LessonCode);

                entity.Property(e => e.LessonCode).HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LessonName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Lican>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Descs });

                entity.ToTable("LICAN");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Descs)
                    .HasColumnName("DESCS")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LicNo)
                    .IsRequired()
                    .HasColumnName("LIC_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LicNote)
                    .IsRequired()
                    .HasColumnName("LIC_NOTE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LicPass).HasColumnName("LIC_PASS");

                entity.Property(e => e.LicanId).HasColumnName("lican_id");

                entity.Property(e => e.Mdate)
                    .HasColumnName("MDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Owner).HasColumnName("OWNER");
            });

            modelBuilder.Entity<Lng>(entity =>
            {
                entity.HasKey(e => e.Lng1);

                entity.ToTable("LNG");

                entity.Property(e => e.Lng1)
                    .HasColumnName("LNG")
                    .HasMaxLength(50);

                entity.Property(e => e.Font)
                    .IsRequired()
                    .HasColumnName("FONT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LngName)
                    .IsRequired()
                    .HasColumnName("LNG_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LockWage>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Saladr });

                entity.ToTable("LOCK_WAGE");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(10);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(2);

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MaFood>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("MA_FOOD");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MaAmt)
                    .HasColumnName("MA_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotRote).HasColumnName("NOT_ROTE");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Maildata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILDATA");

                entity.Property(e => e.Adate)
                    .IsRequired()
                    .HasColumnName("ADATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formno)
                    .IsRequired()
                    .HasColumnName("FORMNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrRec)
                    .IsRequired()
                    .HasColumnName("NOBR_REC")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrSend)
                    .IsRequired()
                    .HasColumnName("NOBR_SEND")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkStat)
                    .IsRequired()
                    .HasColumnName("OK_STAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkTime)
                    .HasColumnName("OK_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SendTime)
                    .HasColumnName("SEND_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Mailqueue>(entity =>
            {
                entity.ToTable("MAILQUEUE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnName("BODY");

                entity.Property(e => e.FreezeTime)
                    .HasColumnName("FREEZE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromAddr)
                    .IsRequired()
                    .HasColumnName("FROM_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.FromName)
                    .HasColumnName("FROM_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Retry).HasColumnName("RETRY");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnName("SUBJECT")
                    .HasMaxLength(500);

                entity.Property(e => e.Success).HasColumnName("SUCCESS");

                entity.Property(e => e.Suspend).HasColumnName("SUSPEND");

                entity.Property(e => e.ToAddr)
                    .IsRequired()
                    .HasColumnName("TO_ADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.ToName)
                    .HasColumnName("TO_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Mailrec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILREC");

                entity.Property(e => e.Adate)
                    .IsRequired()
                    .HasColumnName("ADATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formno)
                    .IsRequired()
                    .HasColumnName("FORMNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrRec)
                    .IsRequired()
                    .HasColumnName("NOBR_REC")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrSend)
                    .IsRequired()
                    .HasColumnName("NOBR_SEND")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkStat)
                    .IsRequired()
                    .HasColumnName("OK_STAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkTime)
                    .HasColumnName("OK_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SendTime)
                    .HasColumnName("SEND_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Mailsend>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILSEND");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Formname)
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Formno)
                    .HasColumnName("FORMNO")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NobrRec)
                    .HasColumnName("NOBR_REC")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NobrSend)
                    .HasColumnName("NOBR_SEND")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OkStat)
                    .HasColumnName("OK_STAT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OkTime)
                    .HasColumnName("OK_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.SendTime)
                    .HasColumnName("SEND_TIME")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Mailwait>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILWAIT");

                entity.Property(e => e.Adate)
                    .IsRequired()
                    .HasColumnName("ADATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formno)
                    .IsRequired()
                    .HasColumnName("FORMNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrRec)
                    .IsRequired()
                    .HasColumnName("NOBR_REC")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NobrSend)
                    .IsRequired()
                    .HasColumnName("NOBR_SEND")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkStat)
                    .IsRequired()
                    .HasColumnName("OK_STAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OkTime)
                    .HasColumnName("OK_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SendTime)
                    .HasColumnName("SEND_TIME")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MangUser>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.Property(e => e.Nobr)
                    .HasColumnName("nobr")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("key_man")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("name_c")
                    .HasMaxLength(50);

                entity.Property(e => e.Pwd)
                    .IsRequired()
                    .HasMaxLength(110)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Marquee>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DisplayText)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Enable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Marry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MARRY");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Master>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Master1 });

                entity.ToTable("MASTER");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Master1)
                    .HasColumnName("MASTER")
                    .HasMaxLength(50);

                entity.Property(e => e.Corporation)
                    .IsRequired()
                    .HasColumnName("CORPORATION")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasColumnName("LANGUAGE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MasterId).HasColumnName("master_id");

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(500);

                entity.Property(e => e.Relish)
                    .IsRequired()
                    .HasColumnName("RELISH")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelishCode)
                    .IsRequired()
                    .HasColumnName("RELISH_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MeetingRoom>(entity =>
            {
                entity.Property(e => e.CanRent)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MeetingRoomRentAttendee>(entity =>
            {
                entity.Property(e => e.EmpNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MeetingRoomRentRecord>(entity =>
            {
                entity.Property(e => e.Canceler).HasMaxLength(50);

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.Topic).HasMaxLength(1000);

                entity.Property(e => e.WritedBy).HasMaxLength(50);

                entity.Property(e => e.WritedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Menugroup>(entity =>
            {
                entity.ToTable("MENUGROUP");

                entity.Property(e => e.Menugroupid)
                    .HasColumnName("MENUGROUPID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ak)
                    .HasColumnName("AK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupname)
                    .IsRequired()
                    .HasColumnName("MENUGROUPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Menustripstructure>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("MENUSTRIPSTRUCTURE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Assemblyname)
                    .HasColumnName("ASSEMBLYNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Commonitem).HasColumnName("COMMONITEM");

                entity.Property(e => e.Enable).HasColumnName("ENABLE");

                entity.Property(e => e.Itemindex).HasColumnName("ITEMINDEX");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Menugroupid).HasColumnName("MENUGROUPID");

                entity.Property(e => e.Menustripid).HasColumnName("MENUSTRIPID");

                entity.Property(e => e.Menustripname)
                    .IsRequired()
                    .HasColumnName("MENUSTRIPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Menustriptext)
                    .IsRequired()
                    .HasColumnName("MENUSTRIPTEXT")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentid).HasColumnName("PARENTID");

                entity.Property(e => e.Shortcutkeys)
                    .HasColumnName("SHORTCUTKEYS")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MonthType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MONTH_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Mtcode>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code });

                entity.ToTable("MTCODE");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasColumnName("DISPLAY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Mtdict>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code, e.Language });

                entity.ToTable("MTDICT");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Language)
                    .HasColumnName("LANGUAGE")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Disp).HasColumnName("DISP");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Mtlng>(entity =>
            {
                entity.HasKey(e => new { e.Category, e.Code, e.Language });

                entity.ToTable("MTLNG");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Language)
                    .HasColumnName("LANGUAGE")
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnName("DISPLAY_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.ToTable("news");

                entity.HasKey(e => e.IAutoKey);

                entity.HasIndex(e => new { e.NewsId })
                    .HasName("IX_news_1")
                    .IsUnique();

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);

                entity.Property(e => e.IsOn).HasColumnName("is_on");

                entity.Property(e => e.LatestSendMailDate).HasColumnType("datetime");

                entity.Property(e => e.NewsBody)
                    .IsRequired()
                    .HasColumnName("news_body")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewsHead)
                    .IsRequired()
                    .HasColumnName("news_head")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Newsfileid)
                    .IsRequired()
                    .HasColumnName("newsfileid")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostDate)
                    .HasColumnName("post_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PostDeadline)
                    .HasColumnName("post_deadline")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NewsBrowsing>(entity =>
            {
                entity.Property(e => e.BrowsingTime).HasColumnType("datetime");

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NewsTarget>(entity =>
            {
                entity.Property(e => e.DetpCode).HasMaxLength(50);

                entity.Property(e => e.EmpNo).HasMaxLength(50);

                entity.Property(e => e.NewsId)
                    .IsRequired()
                    .HasColumnName("news_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NigFood>(entity =>
            {
                entity.HasKey(e => new { e.Comp, e.Rote, e.Btime });

                entity.ToTable("NIG_FOOD");

                entity.Property(e => e.Comp)
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Noeat>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm });

                entity.ToTable("NOEAT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NotifyApplyUpdateBase>(entity =>
            {
                entity.Property(e => e.DataGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NotifyClass>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Comp })
                    .HasName("PK_NotifyType");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.AssemblyName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.Notifyday).HasColumnName("NOTIFYDAY");

                entity.Property(e => e.Relationapp)
                    .HasColumnName("RELATIONAPP")
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NotifyTemplate>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NotifyType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Target)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TargetType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OilSubsidyType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OilSubsidyType1)
                    .IsRequired()
                    .HasColumnName("OilSubsidyType")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Onduty>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Yymm });

                entity.ToTable("ONDUTY");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Ot>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AllHrs)
                    .HasColumnName("ALL_HRS")
                    .HasColumnType("decimal(16, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Ot1>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT1");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OtAttend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtAttend");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtB>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime, e.Otrcd });

                entity.ToTable("OT_B");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrcd)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.AllHrs)
                    .HasColumnName("ALL_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.CantAdj).HasColumnName("CANT_ADJ");

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eat).HasColumnName("EAT");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.FixAmt).HasColumnName("FIX_AMT");

                entity.Property(e => e.FoodCnt)
                    .HasColumnName("FOOD_CNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FoodPri)
                    .HasColumnName("FOOD_PRI")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FstHours)
                    .HasColumnName("FST_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot133)
                    .HasColumnName("HOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot166)
                    .HasColumnName("HOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Hot200)
                    .HasColumnName("HOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.Nofood1).HasColumnName("NOFOOD1");

                entity.Property(e => e.NopH100)
                    .HasColumnName("NOP_H_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH133)
                    .HasColumnName("NOP_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH167)
                    .HasColumnName("NOP_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopH200)
                    .HasColumnName("NOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW100)
                    .HasColumnName("NOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW133)
                    .HasColumnName("NOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW167)
                    .HasColumnName("NOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NopW200)
                    .HasColumnName("NOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotExp)
                    .HasColumnName("NOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH133)
                    .HasColumnName("NOT_H_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH167)
                    .HasColumnName("NOT_H_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotH200)
                    .HasColumnName("NOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW100)
                    .HasColumnName("NOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW133)
                    .HasColumnName("NOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW167)
                    .HasColumnName("NOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NotW200)
                    .HasColumnName("NOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(200);

                entity.Property(e => e.Notmodi).HasColumnName("NOTMODI");

                entity.Property(e => e.OtCar)
                    .HasColumnName("OT_CAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtEdate)
                    .HasColumnName("OT_EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.OtFood)
                    .HasColumnName("OT_FOOD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFood1)
                    .HasColumnName("OT_FOOD1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh)
                    .HasColumnName("OT_FOODH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtFoodh1)
                    .HasColumnName("OT_FOODH1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otno)
                    .IsRequired()
                    .HasColumnName("OTNO")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateCode)
                    .IsRequired()
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rec)
                    .HasColumnName("REC")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Res).HasColumnName("RES");

                entity.Property(e => e.RestExp)
                    .HasColumnName("REST_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salary)
                    .HasColumnName("SALARY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("SUM");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.Syscreat1).HasColumnName("SYSCREAT1");

                entity.Property(e => e.TopH200)
                    .HasColumnName("TOP_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW100)
                    .HasColumnName("TOP_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW133)
                    .HasColumnName("TOP_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW167)
                    .HasColumnName("TOP_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TopW200)
                    .HasColumnName("TOP_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotExp)
                    .HasColumnName("TOT_EXP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotH200)
                    .HasColumnName("TOT_H_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW100)
                    .HasColumnName("TOT_W_100")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW133)
                    .HasColumnName("TOT_W_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW167)
                    .HasColumnName("TOT_W_167")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotW200)
                    .HasColumnName("TOT_W_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot133)
                    .HasColumnName("WOT_133")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot166)
                    .HasColumnName("WOT_166")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wot200)
                    .HasColumnName("WOT_200")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtBasetts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtBasetts");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.CountMa).HasColumnName("COUNT_MA");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Depts)
                    .IsRequired()
                    .HasColumnName("DEPTS")
                    .HasMaxLength(50);

                entity.Property(e => e.Di)
                    .IsRequired()
                    .HasColumnName("DI")
                    .HasMaxLength(50);

                entity.Property(e => e.Empcd)
                    .IsRequired()
                    .HasColumnName("EMPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Workcd)
                    .IsRequired()
                    .HasColumnName("WORKCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Otc>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("OTC");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .IsRequired()
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(3500);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Serno)
                    .IsRequired()
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.TotHours)
                    .HasColumnName("TOT_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Othcode>(entity =>
            {
                entity.HasKey(e => e.Othcode1);

                entity.ToTable("OTHCODE");

                entity.Property(e => e.Othcode1)
                    .HasColumnName("OTHCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Othcolor)
                    .HasColumnName("OTHCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Othholi).HasColumnName("OTHHOLI");

                entity.Property(e => e.Othname)
                    .IsRequired()
                    .HasColumnName("OTHNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Stdholi).HasColumnName("STDHOLI");
            });

            modelBuilder.Entity<Othercd>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("OTHERCD");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Otherda>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("OTHERDA");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Otpre>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Btime, e.Etime });

                entity.ToTable("OTPRE");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(200);

                entity.Property(e => e.Ot1Hrs)
                    .HasColumnName("OT1_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot2Hrs)
                    .HasColumnName("OT2_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtDept)
                    .IsRequired()
                    .HasColumnName("OT_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRote)
                    .IsRequired()
                    .HasColumnName("OT_ROTE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otrcd)
                    .IsRequired()
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.RestHrs)
                    .HasColumnName("REST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SugHrs)
                    .HasColumnName("SUG_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");

                entity.Property(e => e.Tranp).HasColumnName("TRANP");

                entity.Property(e => e.Trans).HasColumnName("TRANS");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtrateType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OTRATE_TYPE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Otratecd>(entity =>
            {
                entity.HasKey(e => e.OtrateCode);

                entity.ToTable("OTRATECD");

                entity.Property(e => e.OtrateCode)
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixper).HasColumnName("FIXPER");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(8);

                entity.Property(e => e.MinHours)
                    .HasColumnName("MIN_HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133hamt)
                    .HasColumnName("OT133HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133hrate)
                    .HasColumnName("OT133HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133htimeB)
                    .HasColumnName("OT133HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133htimeE)
                    .HasColumnName("OT133HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133namt)
                    .HasColumnName("OT133NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133nrate)
                    .HasColumnName("OT133NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133ntimeB)
                    .HasColumnName("OT133NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133ntimeE)
                    .HasColumnName("OT133NTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133ramt)
                    .HasColumnName("OT133RAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133rrate)
                    .HasColumnName("OT133RRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133rtimeB)
                    .HasColumnName("OT133RTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133rtimeE)
                    .HasColumnName("OT133RTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wamt)
                    .HasColumnName("OT133WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wrate)
                    .HasColumnName("OT133WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeB)
                    .HasColumnName("OT133WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeE)
                    .HasColumnName("OT133WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167hamt)
                    .HasColumnName("OT167HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167hrate)
                    .HasColumnName("OT167HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167htimeB)
                    .HasColumnName("OT167HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167htimeE)
                    .HasColumnName("OT167HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167namt)
                    .HasColumnName("OT167NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167nrate)
                    .HasColumnName("OT167NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167ntimeB)
                    .HasColumnName("OT167NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167ntimeE)
                    .HasColumnName("OT167NTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167ramt)
                    .HasColumnName("OT167RAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167rrate)
                    .HasColumnName("OT167RRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167rtimeB)
                    .HasColumnName("OT167RTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167rtimeE)
                    .HasColumnName("OT167RTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wamt)
                    .HasColumnName("OT167WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wrate)
                    .HasColumnName("OT167WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeB)
                    .HasColumnName("OT167WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeE)
                    .HasColumnName("OT167WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200hamt)
                    .HasColumnName("OT200HAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200hrate)
                    .HasColumnName("OT200HRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200htimeB)
                    .HasColumnName("OT200HTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200htimeE)
                    .HasColumnName("OT200HTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200namt)
                    .HasColumnName("OT200NAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200nrate)
                    .HasColumnName("OT200NRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200ntimeB)
                    .HasColumnName("OT200NTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200ntimeE)
                    .HasColumnName("OT200NTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200ramt)
                    .HasColumnName("OT200RAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200rrate)
                    .HasColumnName("OT200RRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200rtimeB)
                    .HasColumnName("OT200RTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200rtimeE)
                    .HasColumnName("OT200RTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wamt)
                    .HasColumnName("OT200WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wrate)
                    .HasColumnName("OT200WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeB)
                    .HasColumnName("OT200WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeE)
                    .HasColumnName("OT200WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours1)
                    .HasColumnName("OT_REST_HOURS1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours2)
                    .HasColumnName("OT_REST_HOURS2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours3)
                    .HasColumnName("OT_REST_HOURS3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB1)
                    .HasColumnName("OT_REST_TIME_B1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB2)
                    .HasColumnName("OT_REST_TIME_B2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB3)
                    .HasColumnName("OT_REST_TIME_B3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE1)
                    .HasColumnName("OT_REST_TIME_E1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE2)
                    .HasColumnName("OT_REST_TIME_E2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE3)
                    .HasColumnName("OT_REST_TIME_E3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OthGetrest).HasColumnName("OTH_GETREST");

                entity.Property(e => e.OthNoot).HasColumnName("OTH_NOOT");

                entity.Property(e => e.OthRestHours1)
                    .HasColumnName("OTH_REST_HOURS1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OthRestTimeB1)
                    .HasColumnName("OTH_REST_TIME_B1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OthRestTimeE1)
                    .HasColumnName("OTH_REST_TIME_E1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtnGetrest).HasColumnName("OTN_GETREST");

                entity.Property(e => e.OtnRestHours1)
                    .HasColumnName("OTN_REST_HOURS1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtnRestTimeB1)
                    .HasColumnName("OTN_REST_TIME_B1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtnRestTimeE1)
                    .HasColumnName("OTN_REST_TIME_E1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtrateName)
                    .IsRequired()
                    .HasColumnName("OTRATE_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OtrateTypeh)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEH")
                    .HasMaxLength(1);

                entity.Property(e => e.OtrateTypen)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateTyper)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrateTypew)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEW")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit).HasColumnName("OTUNIT");
            });

            modelBuilder.Entity<OtratecdRote>(entity =>
            {
                entity.HasKey(e => new { e.OtrateCode, e.Rote });

                entity.ToTable("OTRATECD_ROTE");

                entity.Property(e => e.OtrateCode)
                    .HasColumnName("OTRATE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.IsHoli).HasColumnName("IS_HOLI");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(8);

                entity.Property(e => e.Ot133wamt)
                    .HasColumnName("OT133WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wrate)
                    .HasColumnName("OT133WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeB)
                    .HasColumnName("OT133WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot133wtimeE)
                    .HasColumnName("OT133WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wamt)
                    .HasColumnName("OT167WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wrate)
                    .HasColumnName("OT167WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeB)
                    .HasColumnName("OT167WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot167wtimeE)
                    .HasColumnName("OT167WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wamt)
                    .HasColumnName("OT200WAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wrate)
                    .HasColumnName("OT200WRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeB)
                    .HasColumnName("OT200WTIME_B")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ot200wtimeE)
                    .HasColumnName("OT200WTIME_E")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours1)
                    .HasColumnName("OT_REST_HOURS1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours2)
                    .HasColumnName("OT_REST_HOURS2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestHours3)
                    .HasColumnName("OT_REST_HOURS3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB1)
                    .HasColumnName("OT_REST_TIME_B1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB2)
                    .HasColumnName("OT_REST_TIME_B2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeB3)
                    .HasColumnName("OT_REST_TIME_B3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE1)
                    .HasColumnName("OT_REST_TIME_E1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE2)
                    .HasColumnName("OT_REST_TIME_E2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtRestTimeE3)
                    .HasColumnName("OT_REST_TIME_E3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OtrateTypeh)
                    .IsRequired()
                    .HasColumnName("OTRATE_TYPEH")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Otrcd>(entity =>
            {
                entity.HasKey(e => e.Otrcd1);

                entity.ToTable("OTRCD");

                entity.Property(e => e.Otrcd1)
                    .HasColumnName("OTRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Callin).HasColumnName("CALLIN");

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nocalc).HasColumnName("NOCALC");

                entity.Property(e => e.Nofood).HasColumnName("NOFOOD");

                entity.Property(e => e.OtrcdDisp)
                    .HasColumnName("OTRCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Otrname)
                    .IsRequired()
                    .HasColumnName("OTRNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.SysOt).HasColumnName("SYS_OT");
            });

            modelBuilder.Entity<OutPost>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.OutPostName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Outcd>(entity =>
            {
                entity.HasKey(e => e.Outcd1);

                entity.ToTable("OUTCD");

                entity.Property(e => e.Outcd1)
                    .HasColumnName("OUTCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Outname)
                    .IsRequired()
                    .HasColumnName("OUTNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OvertimeType>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_OVERTIME_TYPE_1");

                entity.ToTable("OVERTIME_TYPE");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.ComLeave).HasColumnName("COM_LEAVE");

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Frequency)
                    .HasColumnName("FREQUENCY")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IsOt).HasColumnName("IS_OT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meal).HasColumnName("MEAL");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasColumnName("TYPE_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Parameter>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PARAMETER");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.ParmgroupAuto).HasColumnName("PARMGROUP_AUTO");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ParameterTree>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PARAMETER_TREE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<PayDoc>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("PAY_DOC");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.DocItem).HasColumnName("DOC_ITEM");

                entity.Property(e => e.FinalDate)
                    .HasColumnName("FINAL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.PayDate)
                    .HasColumnName("PAY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Payed).HasColumnName("PAYED");
            });

            modelBuilder.Entity<Provcd>(entity =>
            {
                entity.HasKey(e => e.ProvCode);

                entity.ToTable("PROVCD");

                entity.Property(e => e.ProvCode)
                    .HasColumnName("PROV_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QBaseM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qBaseM");

                entity.Property(e => e.DAmountDate)
                    .HasColumnName("dAmountDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DSchoolDateB)
                    .HasColumnName("dSchoolDateB")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DSchoolDateE)
                    .HasColumnName("dSchoolDateE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DWriteDate)
                    .HasColumnName("dWriteDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ITotalFraction).HasColumnName("iTotalFraction");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCourseCode)
                    .IsRequired()
                    .HasColumnName("sCourseCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCourseName)
                    .IsRequired()
                    .HasColumnName("sCourseName")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SDeptCode)
                    .IsRequired()
                    .HasColumnName("sDeptCode")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SDeptName)
                    .IsRequired()
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SDocentCode)
                    .IsRequired()
                    .HasColumnName("sDocentCode")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SDocentName)
                    .IsRequired()
                    .HasColumnName("sDocentName")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.SNatureCode)
                    .IsRequired()
                    .HasColumnName("sNatureCode")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SNatureName)
                    .IsRequired()
                    .HasColumnName("sNatureName")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SPw)
                    .IsRequired()
                    .HasColumnName("sPW")
                    .HasMaxLength(50);

                entity.Property(e => e.SSer)
                    .IsRequired()
                    .HasColumnName("sSer")
                    .HasMaxLength(50);

                entity.Property(e => e.STypeCode)
                    .IsRequired()
                    .HasColumnName("sTypeCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SYymm)
                    .IsRequired()
                    .HasColumnName("sYYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QBaseS>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qBaseS");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IFraction).HasColumnName("iFraction");

                entity.Property(e => e.SBaseCode)
                    .IsRequired()
                    .HasColumnName("sBaseCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCastCode)
                    .IsRequired()
                    .HasColumnName("sCastCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCate)
                    .IsRequired()
                    .HasColumnName("sCate")
                    .HasMaxLength(50);

                entity.Property(e => e.SFraction)
                    .HasColumnName("sFraction")
                    .HasColumnType("ntext");

                entity.Property(e => e.SQuestionaryCode)
                    .IsRequired()
                    .HasColumnName("sQuestionaryCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SThemeCode)
                    .HasColumnName("sThemeCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QCastM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qCastM");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCate)
                    .IsRequired()
                    .HasColumnName("sCate")
                    .HasMaxLength(50);

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SContent)
                    .IsRequired()
                    .HasColumnName("sContent")
                    .HasColumnType("ntext");

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QCastS>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qCastS");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SThemeCode)
                    .IsRequired()
                    .HasColumnName("sThemeCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QQuestionaryM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qQuestionaryM");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SContent)
                    .IsRequired()
                    .HasColumnName("sContent")
                    .HasColumnType("ntext");

                entity.Property(e => e.SFooter)
                    .HasColumnName("sFooter")
                    .HasColumnType("ntext");

                entity.Property(e => e.SHeader)
                    .HasColumnName("sHeader")
                    .HasColumnType("ntext");

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QQuestionaryS>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qQuestionaryS");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCastCode)
                    .IsRequired()
                    .HasColumnName("sCastCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QTheme>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qTheme");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SContent)
                    .IsRequired()
                    .HasColumnName("sContent")
                    .HasColumnType("ntext");

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.STitleCode)
                    .IsRequired()
                    .HasColumnName("sTitleCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QTitle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qTitle");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SFraction1)
                    .IsRequired()
                    .HasColumnName("sFraction1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SFraction2)
                    .IsRequired()
                    .HasColumnName("sFraction2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SFraction3)
                    .IsRequired()
                    .HasColumnName("sFraction3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SFraction4)
                    .IsRequired()
                    .HasColumnName("sFraction4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SFraction5)
                    .IsRequired()
                    .HasColumnName("sFraction5")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("qType");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IAutoKey)
                    .HasColumnName("iAutoKey")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ITotalFraction).HasColumnName("iTotalFraction");

                entity.Property(e => e.SCode)
                    .IsRequired()
                    .HasColumnName("sCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.SQuestionaryCode)
                    .IsRequired()
                    .HasColumnName("sQuestionaryCode")
                    .HasMaxLength(50);

                entity.Property(e => e.SQuestionaryName)
                    .IsRequired()
                    .HasColumnName("sQuestionaryName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QaPublished>(entity =>
            {
                entity.ToTable("QA_Published");

                entity.Property(e => e.FillFormDatetimeB).HasColumnType("datetime");

                entity.Property(e => e.FillFormDatetimeE).HasColumnType("datetime");

                entity.Property(e => e.PublishDatetime).HasColumnType("datetime");

                entity.Property(e => e.QtplCode)
                    .IsRequired()
                    .HasColumnName("QTplCode")
                    .HasMaxLength(50);

                entity.Property(e => e.WritedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<Qadetail>(entity =>
            {
                entity.ToTable("QADetail");

                entity.Property(e => e.McqStringValue).HasMaxLength(50);

                entity.Property(e => e.QamasterId).HasColumnName("QAMasterId");

                entity.Property(e => e.QqitemId).HasColumnName("QQItemId");

                entity.Property(e => e.SaqValue).HasMaxLength(2000);
            });

            modelBuilder.Entity<Qamaster>(entity =>
            {
                entity.ToTable("QAMaster");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FillFormDatetimeB).HasColumnType("datetime");

                entity.Property(e => e.FillFormDatetimeE).HasColumnType("datetime");

                entity.Property(e => e.FillInBy).HasMaxLength(50);

                entity.Property(e => e.FillerCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.QaPublishedId).HasColumnName("QA_PublishedID");

                entity.Property(e => e.SysRole).HasColumnName("sysRole");

                entity.Property(e => e.WriteDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Qcategory>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QCategory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qdetail>(entity =>
            {
                entity.ToTable("QDetail");

                entity.Property(e => e.QqitemId).HasColumnName("QQItemId");

                entity.Property(e => e.QtplCategoryId).HasColumnName("QTplCategoryId");
            });

            modelBuilder.Entity<Qqitem>(entity =>
            {
                entity.ToTable("QQItem");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.IsRequired)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.McqDisplayHorizontal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QuestionText)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TypeCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qqmcq>(entity =>
            {
                entity.ToTable("QQMcq");

                entity.Property(e => e.IsValueInt)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QqmcqDetail>(entity =>
            {
                entity.ToTable("QQMcqDetail");

                entity.Property(e => e.QqmcqId).HasColumnName("QQMcqId");

                entity.Property(e => e.StringValue).HasMaxLength(50);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QqmcqDetailTpl>(entity =>
            {
                entity.ToTable("QQMcqDetailTpl");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StringValue).HasMaxLength(50);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qqtype>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QQType");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Qtpl>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("QTpl");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.FillerCategory)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QtplCategory>(entity =>
            {
                entity.ToTable("QTplCategory");

                entity.Property(e => e.QcategoryCode)
                    .IsRequired()
                    .HasColumnName("QCategoryCode")
                    .HasMaxLength(50);

                entity.Property(e => e.QtplCode)
                    .IsRequired()
                    .HasColumnName("QTplCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RangeSet>(entity =>
            {
                entity.ToTable("RANGE_SET");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RangeBegin)
                    .IsRequired()
                    .HasColumnName("RANGE_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.RangeEnd)
                    .IsRequired()
                    .HasColumnName("RANGE_END")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relaytable>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("RELAYTABLE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Childbsource)
                    .IsRequired()
                    .HasColumnName("CHILDBSOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Childkey)
                    .IsRequired()
                    .HasColumnName("CHILDKEY")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("CREATEDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createman)
                    .IsRequired()
                    .HasColumnName("CREATEMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentkey)
                    .IsRequired()
                    .HasColumnName("PARENTKEY")
                    .HasMaxLength(50);

                entity.Property(e => e.Parentsource)
                    .IsRequired()
                    .HasColumnName("PARENTSOURCE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relcode>(entity =>
            {
                entity.HasKey(e => e.RelCode1);

                entity.ToTable("RELCODE");

                entity.Property(e => e.RelCode1)
                    .HasColumnName("REL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Grprelcd)
                    .IsRequired()
                    .HasColumnName("GRPRELCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasColumnName("REL_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Relishcd>(entity =>
            {
                entity.HasKey(e => e.RelishCode);

                entity.ToTable("RELISHCD");

                entity.Property(e => e.RelishCode)
                    .HasColumnName("RELISH_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Relish)
                    .IsRequired()
                    .HasColumnName("RELISH")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Repair>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Bdate, e.Btime });

                entity.ToTable("REPAIR");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Etime)
                    .IsRequired()
                    .HasColumnName("ETIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Improve)
                    .IsRequired()
                    .HasColumnName("IMPROVE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtHrs)
                    .HasColumnName("OT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Place)
                    .IsRequired()
                    .HasColumnName("PLACE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TrAmt)
                    .HasColumnName("TR_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.ViAmt)
                    .HasColumnName("VI_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Works)
                    .IsRequired()
                    .HasColumnName("WORKS")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ReportEntitleExtend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportEntitleExtend");

                entity.Property(e => e.假別代碼).HasMaxLength(50);

                entity.Property(e => e.假別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.假別種類)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.剩餘).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.單位)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.失效日期).HasColumnType("datetime");

                entity.Property(e => e.已請).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.得假).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.生效日期).HasColumnType("datetime");

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.編號).HasMaxLength(50);
            });

            modelBuilder.Entity<ResponsibilityType>(entity =>
            {
                entity.HasKey(e => e.ResponsibilityCode);

                entity.Property(e => e.ResponsibilityCode).HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResponsibilityName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Retchoo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RETCHOO");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Rote>(entity =>
            {
                entity.HasKey(e => e.Rote1);

                entity.ToTable("ROTE");

                entity.Property(e => e.Rote1)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.AftNightamt)
                    .HasColumnName("AFT_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates)
                    .HasColumnName("ALLLATES")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Alllates1)
                    .HasColumnName("ALLLATES1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AttEnd)
                    .IsRequired()
                    .HasColumnName("ATT_END")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bcolor)
                    .HasColumnName("BCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.BefNightamt)
                    .HasColumnName("BEF_NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Calot)
                    .IsRequired()
                    .HasColumnName("CALOT")
                    .HasMaxLength(50);

                entity.Property(e => e.Dd)
                    .IsRequired()
                    .HasColumnName("DD")
                    .HasMaxLength(50);

                entity.Property(e => e.DkHrs)
                    .HasColumnName("DK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Earaward).HasColumnName("EARAWARD");

                entity.Property(e => e.Fcolor)
                    .HasColumnName("FCOLOR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamto)
                    .HasColumnName("FOODAMTO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodrule)
                    .IsRequired()
                    .HasColumnName("FOODRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Foodsalcd)
                    .IsRequired()
                    .HasColumnName("FOODSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Helf).HasColumnName("HELF");

                entity.Property(e => e.HoliMins)
                    .HasColumnName("HOLI_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HolidayAddmin)
                    .HasColumnName("HOLIDAY_ADDMIN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.MoHrs)
                    .HasColumnName("MO_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Night).HasColumnName("NIGHT");

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightamt1)
                    .HasColumnName("NIGHTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightrule)
                    .IsRequired()
                    .HasColumnName("NIGHTRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightsalcd)
                    .IsRequired()
                    .HasColumnName("NIGHTSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfood).HasColumnName("NOTFOOD");

                entity.Property(e => e.OffTime)
                    .IsRequired()
                    .HasColumnName("OFF_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Offtime2)
                    .IsRequired()
                    .HasColumnName("OFFTIME2")
                    .HasMaxLength(50);

                entity.Property(e => e.OnTime)
                    .IsRequired()
                    .HasColumnName("ON_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.OtBegin)
                    .IsRequired()
                    .HasColumnName("OT_BEGIN")
                    .HasMaxLength(50);

                entity.Property(e => e.OverTime)
                    .IsRequired()
                    .HasColumnName("OVER_TIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Overday).HasColumnName("OVERDAY");

                entity.Property(e => e.Rate2).HasColumnName("RATE2");

                entity.Property(e => e.ResB1Time)
                    .IsRequired()
                    .HasColumnName("RES_B1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB2Time)
                    .IsRequired()
                    .HasColumnName("RES_B2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB3Time)
                    .IsRequired()
                    .HasColumnName("RES_B3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResB4Time)
                    .IsRequired()
                    .HasColumnName("RES_B4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResBTime)
                    .IsRequired()
                    .HasColumnName("RES_B_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE1Time)
                    .IsRequired()
                    .HasColumnName("RES_E1_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE2Time)
                    .IsRequired()
                    .HasColumnName("RES_E2_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE3Time)
                    .IsRequired()
                    .HasColumnName("RES_E3_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResE4Time)
                    .IsRequired()
                    .HasColumnName("RES_E4_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ResETime)
                    .IsRequired()
                    .HasColumnName("RES_E_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteDisp)
                    .HasColumnName("ROTE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteSname)
                    .IsRequired()
                    .HasColumnName("ROTE_SNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rotename)
                    .IsRequired()
                    .HasColumnName("ROTENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort)
                    .HasColumnName("SORT")
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.Specamt)
                    .HasColumnName("SPECAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt1)
                    .HasColumnName("SPECAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specamt2)
                    .HasColumnName("SPECAMT2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specrule)
                    .IsRequired()
                    .HasColumnName("SPECRULE")
                    .HasMaxLength(50);

                entity.Property(e => e.Specsalcd)
                    .IsRequired()
                    .HasColumnName("SPECSALCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StrTime)
                    .IsRequired()
                    .HasColumnName("STR_TIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WkHrs)
                    .HasColumnName("WK_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsa)
                    .HasColumnName("WK_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkHrsb)
                    .HasColumnName("WK_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsa)
                    .HasColumnName("WR_HRSA")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WrHrsb)
                    .HasColumnName("WR_HRSB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<RoteBonus>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_ROTE_BONUS_1");

                entity.ToTable("ROTE_BONUS");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Check1).HasColumnName("CHECK1");

                entity.Property(e => e.Check2).HasColumnName("CHECK2");

                entity.Property(e => e.Check3).HasColumnName("CHECK3");

                entity.Property(e => e.Check4).HasColumnName("CHECK4");

                entity.Property(e => e.Check5).HasColumnName("CHECK5");

                entity.Property(e => e.Check6).HasColumnName("CHECK6");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salfunction)
                    .HasColumnName("SALFUNCTION")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.StrB)
                    .IsRequired()
                    .HasColumnName("STR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.StrE)
                    .IsRequired()
                    .HasColumnName("STR_E")
                    .HasMaxLength(50);

                entity.Property(e => e.Value1)
                    .HasColumnName("VALUE1")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Value2)
                    .HasColumnName("VALUE2")
                    .HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.RoteNavigation)
                    .WithMany(p => p.RoteBonus)
                    .HasForeignKey(d => d.Rote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ROTE_BONUS_ROTE");

                entity.HasOne(d => d.SalCodeNavigation)
                    .WithMany(p => p.RoteBonus)
                    .HasForeignKey(d => d.SalCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ROTE_BONUS_SALCODE");
            });

            modelBuilder.Entity<Rotechg>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr });

                entity.ToTable("ROTECHG");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Autokey)
                    .HasColumnName("AUTOKEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rotet>(entity =>
            {
                entity.HasKey(e => e.Rotet1);

                entity.ToTable("ROTET");

                entity.Property(e => e.Rotet1)
                    .HasColumnName("ROTET")
                    .HasMaxLength(50);

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt)
                    .HasColumnName("FOODAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodamt1)
                    .HasColumnName("FOODAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Freq)
                    .IsRequired()
                    .HasColumnName("FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.FreqDate)
                    .HasColumnName("FREQ_DATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FreqStart)
                    .IsRequired()
                    .HasColumnName("FREQ_START")
                    .HasMaxLength(50);

                entity.Property(e => e.Inholi)
                    .IsRequired()
                    .HasColumnName("INHOLI")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nightamt)
                    .HasColumnName("NIGHTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nightsalcode)
                    .HasColumnName("NIGHTSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.R1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R10)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.R10t).HasColumnName("R10T");

                entity.Property(e => e.R1t).HasColumnName("R1T");

                entity.Property(e => e.R2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R2t).HasColumnName("R2T");

                entity.Property(e => e.R3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R3t).HasColumnName("R3T");

                entity.Property(e => e.R4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R4t).HasColumnName("R4T");

                entity.Property(e => e.R5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R5t).HasColumnName("R5T");

                entity.Property(e => e.R6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R6t).HasColumnName("R6T");

                entity.Property(e => e.R7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R7t).HasColumnName("R7T");

                entity.Property(e => e.R8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.R8t).HasColumnName("R8T");

                entity.Property(e => e.R9)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.R9t).HasColumnName("R9T");

                entity.Property(e => e.RotetDisp)
                    .HasColumnName("ROTET_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Rotetname)
                    .IsRequired()
                    .HasColumnName("ROTETNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SalHrs)
                    .HasColumnName("SAL_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YrrestHrs)
                    .HasColumnName("YRREST_HRS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Rsadvtp>(entity =>
            {
                entity.HasKey(e => e.Advtpcd);

                entity.ToTable("RSADVTP");

                entity.Property(e => e.Advtpcd)
                    .HasColumnName("ADVTPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advtpname)
                    .IsRequired()
                    .HasColumnName("ADVTPNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsadvun>(entity =>
            {
                entity.HasKey(e => e.Advuncd);

                entity.ToTable("RSADVUN");

                entity.Property(e => e.Advuncd)
                    .HasColumnName("ADVUNCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcmadr1)
                    .IsRequired()
                    .HasColumnName("ADVCMADR1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Advcmadr2)
                    .IsRequired()
                    .HasColumnName("ADVCMADR2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Advcmemail)
                    .IsRequired()
                    .HasColumnName("ADVCMEMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcmfax)
                    .IsRequired()
                    .HasColumnName("ADVCMFAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcmid)
                    .IsRequired()
                    .HasColumnName("ADVCMID")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcmsub)
                    .IsRequired()
                    .HasColumnName("ADVCMSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Advcmtel)
                    .IsRequired()
                    .HasColumnName("ADVCMTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcmwww)
                    .IsRequired()
                    .HasColumnName("ADVCMWWW")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcontjob)
                    .IsRequired()
                    .HasColumnName("ADVCONTJOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Advcontman)
                    .IsRequired()
                    .HasColumnName("ADVCONTMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Advtpcd)
                    .IsRequired()
                    .HasColumnName("ADVTPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advunname)
                    .IsRequired()
                    .HasColumnName("ADVUNNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Advunsname)
                    .IsRequired()
                    .HasColumnName("ADVUNSNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEMP");

                entity.Property(e => e.A01).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.A02).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.A03).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.A04).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Army)
                    .HasColumnName("ARMY")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bbcall)
                    .IsRequired()
                    .HasColumnName("BBCALL")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Birdt)
                    .HasColumnName("BIRDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Blood)
                    .HasColumnName("BLOOD")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Boody)
                    .HasColumnName("BOODY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BornAddr)
                    .IsRequired()
                    .HasColumnName("BORN_ADDR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Car).HasColumnName("CAR");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EmpDate)
                    .HasColumnName("EMP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FaMan).HasColumnName("FA_MAN");

                entity.Property(e => e.GoodMan).HasColumnName("GOOD_MAN");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.InMan).HasColumnName("IN_MAN");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LaMan).HasColumnName("LA_MAN");

                entity.Property(e => e.LangE)
                    .HasColumnName("LANG_E")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangJ)
                    .HasColumnName("LANG_J")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangM1)
                    .HasColumnName("LANG_M1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangM2)
                    .HasColumnName("LANG_M2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangT)
                    .HasColumnName("LANG_T")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangT1)
                    .HasColumnName("LANG_T1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LangT2)
                    .HasColumnName("LANG_T2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Marry)
                    .IsRequired()
                    .HasColumnName("MARRY")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Meno)
                    .HasColumnName("MENO")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Motor).HasColumnName("MOTOR");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NameE)
                    .HasColumnName("NAME_E")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OkMan).HasColumnName("OK_MAN");

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Resno)
                    .HasColumnName("RESNO")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RsDept)
                    .HasColumnName("RS_DEPT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RsIn).HasColumnName("RS_IN");

                entity.Property(e => e.RsJob)
                    .HasColumnName("RS_JOB")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RsName)
                    .HasColumnName("RS_NAME")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RsSchl1).HasColumnName("RS_SCHL1");

                entity.Property(e => e.RsSchl2).HasColumnName("RS_SCHL2");

                entity.Property(e => e.RsSchln)
                    .HasColumnName("RS_SCHLN")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rsoktp)
                    .IsRequired()
                    .HasColumnName("RSOKTP")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("SEX")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Wordexcl)
                    .HasColumnName("WORDEXCL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Rsemppr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEMPPR");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Pns)
                    .HasColumnName("PNS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stat)
                    .IsRequired()
                    .HasColumnName("STAT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsempreq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEMPREQ");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Adres)
                    .IsRequired()
                    .HasColumnName("ADRES")
                    .HasMaxLength(50);

                entity.Property(e => e.Appno)
                    .IsRequired()
                    .HasColumnName("APPNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bboddy).HasColumnName("BBODDY");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BwkYrs)
                    .HasColumnName("BWK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EwkYrs)
                    .HasColumnName("EWK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Lang1).HasColumnName("LANG1");

                entity.Property(e => e.Lang2).HasColumnName("LANG2");

                entity.Property(e => e.Lang3).HasColumnName("LANG3");

                entity.Property(e => e.Lang4).HasColumnName("LANG4");

                entity.Property(e => e.Lang5).HasColumnName("LANG5");

                entity.Property(e => e.Lican)
                    .IsRequired()
                    .HasColumnName("LICAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Master)
                    .IsRequired()
                    .HasColumnName("MASTER")
                    .HasMaxLength(60);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nstud).HasColumnName("NSTUD");

                entity.Property(e => e.Planno)
                    .IsRequired()
                    .HasColumnName("PLANNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pns)
                    .HasColumnName("PNS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Projno)
                    .IsRequired()
                    .HasColumnName("PROJNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rsjobname)
                    .IsRequired()
                    .HasColumnName("RSJOBNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Schl1).HasColumnName("SCHL1");

                entity.Property(e => e.Schl2).HasColumnName("SCHL2");

                entity.Property(e => e.Schl3).HasColumnName("SCHL3");

                entity.Property(e => e.Schl4).HasColumnName("SCHL4");

                entity.Property(e => e.Schl5).HasColumnName("SCHL5");

                entity.Property(e => e.Sex1).HasColumnName("SEX1");

                entity.Property(e => e.Sex2).HasColumnName("SEX2");

                entity.Property(e => e.Sex3).HasColumnName("SEX3");

                entity.Property(e => e.Special)
                    .IsRequired()
                    .HasColumnName("SPECIAL")
                    .HasMaxLength(60);

                entity.Property(e => e.Stat)
                    .IsRequired()
                    .HasColumnName("STAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Subj1).HasColumnName("SUBJ1");

                entity.Property(e => e.Subj10).HasColumnName("SUBJ10");

                entity.Property(e => e.Subj11).HasColumnName("SUBJ11");

                entity.Property(e => e.Subj12)
                    .IsRequired()
                    .HasColumnName("SUBJ12")
                    .HasMaxLength(50);

                entity.Property(e => e.Subj2).HasColumnName("SUBJ2");

                entity.Property(e => e.Subj3).HasColumnName("SUBJ3");

                entity.Property(e => e.Subj4).HasColumnName("SUBJ4");

                entity.Property(e => e.Subj5).HasColumnName("SUBJ5");

                entity.Property(e => e.Subj6).HasColumnName("SUBJ6");

                entity.Property(e => e.Subj7).HasColumnName("SUBJ7");

                entity.Property(e => e.Subj8).HasColumnName("SUBJ8");

                entity.Property(e => e.Subj9).HasColumnName("SUBJ9");

                entity.Property(e => e.WkYrs)
                    .HasColumnName("WK_YRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workadr)
                    .IsRequired()
                    .HasColumnName("WORKADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsepadv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEPADV");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Resno)
                    .IsRequired()
                    .HasColumnName("RESNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsepint>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.ToTable("RSEPINT");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsepintseq)
                    .IsRequired()
                    .HasColumnName("RSEPINTSEQ")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsevl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEVL");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Evlcd)
                    .IsRequired()
                    .HasColumnName("EVLCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Lvl)
                    .IsRequired()
                    .HasColumnName("LVL")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .HasColumnName("SCORE")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Rsevlcd>(entity =>
            {
                entity.HasKey(e => e.Evlcd);

                entity.ToTable("RSEVLCD");

                entity.Property(e => e.Evlcd)
                    .HasColumnName("EVLCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Evlname)
                    .IsRequired()
                    .HasColumnName("EVLNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsevlgp>(entity =>
            {
                entity.HasKey(e => e.Rsevlgpcd);

                entity.ToTable("RSEVLGP");

                entity.Property(e => e.Rsevlgpcd)
                    .HasColumnName("RSEVLGPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsevlgpna)
                    .IsRequired()
                    .HasColumnName("RSEVLGPNA")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsevlgpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSEVLGPD");

                entity.Property(e => e.Rsevlcd)
                    .IsRequired()
                    .HasColumnName("RSEVLCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsevlgpcd)
                    .IsRequired()
                    .HasColumnName("RSEVLGPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsevlgpseq)
                    .IsRequired()
                    .HasColumnName("RSEVLGPSEQ")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsevllvl>(entity =>
            {
                entity.HasKey(e => e.Evllvl);

                entity.ToTable("RSEVLLVL");

                entity.Property(e => e.Evllvl)
                    .HasColumnName("EVLLVL")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsintps>(entity =>
            {
                entity.HasKey(e => e.Rsintpsno);

                entity.ToTable("RSINTPS");

                entity.Property(e => e.Rsintpsno)
                    .HasColumnName("RSINTPSNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsintpsna)
                    .IsRequired()
                    .HasColumnName("RSINTPSNA")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsintpsd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSINTPSD");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Rsintpsno)
                    .IsRequired()
                    .HasColumnName("RSINTPSNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsintpsseq)
                    .IsRequired()
                    .HasColumnName("RSINTPSSEQ")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rslican>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSLICAN");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.Descs)
                    .IsRequired()
                    .HasColumnName("DESCS")
                    .HasMaxLength(50);

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Mdate)
                    .HasColumnName("MDATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Rsmaster>(entity =>
            {
                entity.HasKey(e => e.Empid);

                entity.ToTable("RSMASTER");

                entity.Property(e => e.Empid)
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Master)
                    .IsRequired()
                    .HasColumnName("MASTER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsoktp>(entity =>
            {
                entity.HasKey(e => e.Rsoktp1);

                entity.ToTable("RSOKTP");

                entity.Property(e => e.Rsoktp1)
                    .HasColumnName("RSOKTP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rsdesc)
                    .IsRequired()
                    .HasColumnName("RSDESC")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rsokname)
                    .IsRequired()
                    .HasColumnName("RSOKNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsorgpns>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSORGPNS");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobl)
                    .IsRequired()
                    .HasColumnName("JOBL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Pns)
                    .HasColumnName("PNS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Rsrejob>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSREJOB");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rescondit)
                    .IsRequired()
                    .HasColumnName("RESCONDIT")
                    .HasMaxLength(250);

                entity.Property(e => e.Resname)
                    .IsRequired()
                    .HasColumnName("RESNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Resno)
                    .IsRequired()
                    .HasColumnName("RESNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsres>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSRES");

                entity.Property(e => e.Adedate)
                    .HasColumnName("ADEDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Advdate)
                    .HasColumnName("ADVDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Advfee)
                    .HasColumnName("ADVFEE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Advqty)
                    .HasColumnName("ADVQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Advtpcd)
                    .IsRequired()
                    .HasColumnName("ADVTPCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advuncd)
                    .IsRequired()
                    .HasColumnName("ADVUNCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Resno)
                    .IsRequired()
                    .HasColumnName("RESNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Wdedate)
                    .HasColumnName("WDEDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Wdvdate)
                    .HasColumnName("WDVDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Rsresd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSRESD");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.Fee).HasColumnName("FEE");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobpns)
                    .HasColumnName("JOBPNS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Rejob)
                    .IsRequired()
                    .HasColumnName("REJOB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Resitvno)
                    .IsRequired()
                    .HasColumnName("RESITVNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Resno)
                    .IsRequired()
                    .HasColumnName("RESNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Reststno)
                    .IsRequired()
                    .HasColumnName("RESTSTNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsschl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSSCHL");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Educcode)
                    .IsRequired()
                    .HasColumnName("EDUCCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ok).HasColumnName("OK");

                entity.Property(e => e.Schl)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(50);

                entity.Property(e => e.Subj)
                    .IsRequired()
                    .HasColumnName("SUBJ")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rsworks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSWORKS");

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Leave)
                    .IsRequired()
                    .HasColumnName("LEAVE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salamt).HasColumnName("SALAMT");

                entity.Property(e => e.Shop).HasColumnName("SHOP");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(50);

                entity.Property(e => e.Wyear)
                    .HasColumnName("WYEAR")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Rule>(entity =>
            {
                entity.HasKey(e => e.RuleCode);

                entity.ToTable("RULE");

                entity.Property(e => e.RuleCode)
                    .HasColumnName("RULE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Isfix).HasColumnName("ISFIX");

                entity.Property(e => e.Isfixrate).HasColumnName("ISFIXRATE");

                entity.Property(e => e.Israte).HasColumnName("ISRATE");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RuleName)
                    .IsRequired()
                    .HasColumnName("RULE_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Rules>(entity =>
            {
                entity.HasKey(e => new { e.Rules1, e.RuleCode });

                entity.ToTable("RULES");

                entity.Property(e => e.Rules1)
                    .HasColumnName("RULES")
                    .HasMaxLength(50);

                entity.Property(e => e.RuleCode)
                    .HasColumnName("RULE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixamt)
                    .HasColumnName("FIXAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fixrate)
                    .HasColumnName("FIXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HourBegin)
                    .HasColumnName("HOUR_BEGIN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.HourEnd)
                    .HasColumnName("HOUR_END")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TimeBegin)
                    .IsRequired()
                    .HasColumnName("TIME_BEGIN")
                    .HasMaxLength(5);

                entity.Property(e => e.TimeEnd)
                    .IsRequired()
                    .HasColumnName("TIME_END")
                    .HasMaxLength(5);

                entity.Property(e => e.Type1)
                    .IsRequired()
                    .HasColumnName("TYPE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Type2)
                    .IsRequired()
                    .HasColumnName("TYPE2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salabs>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr, e.Adate, e.Btime, e.HCode, e.SalCode, e.Mlssalcode });

                entity.ToTable("SALABS");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HCode)
                    .HasColumnName("H_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Mlssalcode)
                    .HasColumnName("MLSSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.AdjCode)
                    .IsRequired()
                    .HasColumnName("ADJ_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Salseq)
                    .IsRequired()
                    .HasColumnName("SALSEQ")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Saladr>(entity =>
            {
                entity.HasKey(e => e.Saladr1);

                entity.ToTable("SALADR");

                entity.Property(e => e.Saladr1)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Salname)
                    .IsRequired()
                    .HasColumnName("SALNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SalaryPassWord>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DLoginDate)
                    .HasColumnName("dLoginDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SIp)
                    .HasColumnName("sIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SLoginIp)
                    .HasColumnName("sLoginIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50);

                entity.Property(e => e.SPassWord)
                    .IsRequired()
                    .HasColumnName("sPassWord")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<SalaryTransfer>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("BANKCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Classify)
                    .IsRequired()
                    .HasColumnName("CLASSIFY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Dateformat)
                    .HasColumnName("DATEFORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Filled)
                    .IsRequired()
                    .HasColumnName("FILLED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fixedcontent)
                    .HasColumnName("FIXEDCONTENT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.No).HasColumnName("NO");

                entity.Property(e => e.Side)
                    .IsRequired()
                    .HasColumnName("SIDE")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yeartype)
                    .HasColumnName("YEARTYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salarycalc>(entity =>
            {
                entity.HasKey(e => e.Guid)
                    .HasName("PK__SALARYCA__15B69B8EADDAE665");

                entity.ToTable("SALARYCALC");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Timeb)
                    .HasColumnName("TIMEB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timee)
                    .HasColumnName("TIMEE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasColumnName("USERID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salatt>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALATT");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.CalcType)
                    .HasColumnName("CALC_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Etime)
                    .HasColumnName("ETIME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Rote)
                    .IsRequired()
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salattr>(entity =>
            {
                entity.HasKey(e => e.Salattr1);

                entity.ToTable("SALATTR");

                entity.Property(e => e.Salattr1)
                    .HasColumnName("SALATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.AttrName)
                    .IsRequired()
                    .HasColumnName("ATTR_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Basic).HasColumnName("BASIC");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.NotDisp).HasColumnName("NOT_DISP");

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbasd>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr, e.SalCode });

                entity.ToTable("SALBASD");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salbasd1>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr, e.SalCode, e.Seq });

                entity.ToTable("SALBASD1");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salbase>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALBASE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Calctype)
                    .IsRequired()
                    .HasColumnName("CALCTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reffunction)
                    .IsRequired()
                    .HasColumnName("REFFUNCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Salname)
                    .IsRequired()
                    .HasColumnName("SALNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbasnd>(entity =>
            {
                entity.HasKey(e => e.Acno)
                    .HasName("PK_SALBASND_1");

                entity.ToTable("SALBASND");

                entity.Property(e => e.Acno)
                    .HasColumnName("ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("([DBO].[GETNEWACNO]())");

                entity.Property(e => e.ADate)
                    .HasColumnName("A_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.APer)
                    .HasColumnName("A_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AType).HasColumnName("A_TYPE");

                entity.Property(e => e.CDate)
                    .HasColumnName("C_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeAdd)
                    .IsRequired()
                    .HasColumnName("DE_ADD")
                    .HasMaxLength(60);

                entity.Property(e => e.DeDept)
                    .IsRequired()
                    .HasColumnName("DE_DEPT")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeMan)
                    .IsRequired()
                    .HasColumnName("DE_MAN")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeTel)
                    .IsRequired()
                    .HasColumnName("DE_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Dispatch)
                    .IsRequired()
                    .HasColumnName("DISPATCH")
                    .HasMaxLength(50);

                entity.Property(e => e.FAmt)
                    .HasColumnName("F_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FDate)
                    .HasColumnName("F_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawDept)
                    .IsRequired()
                    .HasColumnName("LAW_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.LawMan)
                    .IsRequired()
                    .HasColumnName("LAW_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LawTel)
                    .IsRequired()
                    .HasColumnName("LAW_TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MinCostLiving)
                    .HasColumnName("MIN_COST_LIVING")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.PAmt)
                    .HasColumnName("P_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.PDate)
                    .HasColumnName("P_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PPer)
                    .HasColumnName("P_PER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TAmt)
                    .HasColumnName("T_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TDate)
                    .HasColumnName("T_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.YymmB)
                    .IsRequired()
                    .HasColumnName("YYMM_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YymmE)
                    .IsRequired()
                    .HasColumnName("YYMM_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salbastd>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr, e.SalCode });

                entity.ToTable("SALBASTD");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Amtb)
                    .HasColumnName("AMTB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Salcode>(entity =>
            {
                entity.HasKey(e => e.SalCode1);

                entity.ToTable("SALCODE");

                entity.Property(e => e.SalCode1)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Abspay).HasColumnName("ABSPAY");

                entity.Property(e => e.Acccd)
                    .IsRequired()
                    .HasColumnName("ACCCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Advpay).HasColumnName("ADVPAY");

                entity.Property(e => e.Att).HasColumnName("ATT");

                entity.Property(e => e.CalFreq)
                    .IsRequired()
                    .HasColumnName("CAL_FREQ")
                    .HasMaxLength(50);

                entity.Property(e => e.CalType)
                    .IsRequired()
                    .HasColumnName("CAL_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Daily).HasColumnName("DAILY");

                entity.Property(e => e.Definedays)
                    .HasColumnName("DEFINEDAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forbank).HasColumnName("FORBANK");

                entity.Property(e => e.Forcash).HasColumnName("FORCASH");

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Inslab).HasColumnName("INSLAB");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Later).HasColumnName("LATER");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.MinAmt)
                    .HasColumnName("MIN_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Monthtype)
                    .IsRequired()
                    .HasColumnName("MONTHTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Notfreq).HasColumnName("NOTFREQ");

                entity.Property(e => e.Notfreqseq).HasColumnName("NOTFREQSEQ");

                entity.Property(e => e.Oldretire).HasColumnName("OLDRETIRE");

                entity.Property(e => e.Ot).HasColumnName("OT");

                entity.Property(e => e.Retire).HasColumnName("RETIRE");

                entity.Property(e => e.SalAttr)
                    .IsRequired()
                    .HasColumnName("SAL_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCodeDisp)
                    .HasColumnName("SAL_CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.SalNameVn)
                    .IsRequired()
                    .HasColumnName("SAL_NAME_VN")
                    .HasMaxLength(50);

                entity.Property(e => e.Salbasd1).HasColumnName("SALBASD1");

                entity.Property(e => e.Salbase)
                    .HasColumnName("SALBASE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalcodeGroup)
                    .HasColumnName("SALCODE_GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Salseq)
                    .IsRequired()
                    .HasColumnName("SALSEQ")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sup).HasColumnName("SUP");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Wel).HasColumnName("WEL");

                entity.Property(e => e.Yearpay).HasColumnName("YEARPAY");
            });

            modelBuilder.Entity<Salenrich>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("SALENRICH");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.FaIdno)
                    .IsRequired()
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Salfunction>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SALFUNCTION");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Calc)
                    .IsRequired()
                    .HasColumnName("CALC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Calctype)
                    .IsRequired()
                    .HasColumnName("CALCTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasColumnName("ITEM")
                    .HasMaxLength(50);

                entity.Property(e => e.Ref).HasColumnName("REF");

                entity.Property(e => e.Script)
                    .IsRequired()
                    .HasColumnName("SCRIPT");

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Salpw>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("SALPW");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.Nobr).HasMaxLength(10);

                entity.Property(e => e.Pw)
                    .HasColumnName("PW")
                    .HasMaxLength(16);
            });

            modelBuilder.Entity<Saltycd>(entity =>
            {
                entity.HasKey(e => e.Saltycd1);

                entity.ToTable("SALTYCD");

                entity.Property(e => e.Saltycd1)
                    .HasColumnName("SALTYCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Define1)
                    .HasColumnName("DEFINE1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define2)
                    .HasColumnName("DEFINE2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Define3)
                    .HasColumnName("DEFINE3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Para1)
                    .IsRequired()
                    .HasColumnName("PARA1")
                    .HasMaxLength(50);

                entity.Property(e => e.Para2)
                    .IsRequired()
                    .HasColumnName("PARA2")
                    .HasMaxLength(50);

                entity.Property(e => e.Para3)
                    .IsRequired()
                    .HasColumnName("PARA3")
                    .HasMaxLength(50);

                entity.Property(e => e.Saltyname)
                    .IsRequired()
                    .HasColumnName("SALTYNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaltycdDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_DAYS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SaltycdDiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_DIV");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SaltycdHours>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALTYCD_HOURS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Schl>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("SCHL");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateB)
                    .IsRequired()
                    .HasColumnName("DATE_B")
                    .HasMaxLength(50);

                entity.Property(e => e.DateE)
                    .IsRequired()
                    .HasColumnName("DATE_E")
                    .HasMaxLength(50);

                entity.Property(e => e.DayOrNight).HasMaxLength(50);

                entity.Property(e => e.Educcode)
                    .IsRequired()
                    .HasColumnName("EDUCCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasColumnName("MEMO")
                    .HasMaxLength(500);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Ok).HasColumnName("OK");

                entity.Property(e => e.Schl1)
                    .IsRequired()
                    .HasColumnName("SCHL")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SchlId).HasColumnName("schl_id");

                entity.Property(e => e.Subj)
                    .IsRequired()
                    .HasColumnName("SUBJ")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubjDetail).HasColumnName("SUBJ_DETAIL");

                entity.Property(e => e.Subjcode)
                    .IsRequired()
                    .HasColumnName("SUBJCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Sex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SEX");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SiteMapSalaDr>(entity =>
            {
                entity.HasKey(e => e.Pid);

                entity.Property(e => e.SaladrCode)
                    .IsRequired()
                    .HasColumnName("SALADR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.SiteMapUrl)
                    .IsRequired()
                    .HasMaxLength(1024);
            });

            modelBuilder.Entity<SosId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOS_ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Spmorganization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SPMOrganization");

                entity.Property(e => e.BossDept)
                    .HasColumnName("boss_dept")
                    .HasMaxLength(255);

                entity.Property(e => e.Cost)
                    .HasColumnName("cost_")
                    .HasMaxLength(255);

                entity.Property(e => e.Manageradid)
                    .HasColumnName("manageradid")
                    .HasMaxLength(255);

                entity.Property(e => e.Nobr).HasColumnName("NOBR");

                entity.Property(e => e.UnitCname)
                    .HasColumnName("unit_cname")
                    .HasMaxLength(255);

                entity.Property(e => e.UnitEname)
                    .HasColumnName("unit_ename")
                    .HasMaxLength(255);

                entity.Property(e => e.UnitId)
                    .HasColumnName("unit_id")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Sptyp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPTYP");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Sqlupdatetable>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("SQLUPDATETABLE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasColumnName("FILENAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasColumnType("text");

                entity.Property(e => e.Timeb)
                    .HasColumnName("TIMEB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timee)
                    .HasColumnName("TIMEE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasColumnName("USERID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Starsing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STARSING");

                entity.Property(e => e.BNo)
                    .IsRequired()
                    .HasColumnName("B_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.ENo)
                    .IsRequired()
                    .HasColumnName("E_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Singes)
                    .IsRequired()
                    .HasColumnName("SINGES")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Statchg>(entity =>
            {
                entity.HasKey(e => new { e.Adate, e.Nobr });

                entity.ToTable("STATCHG");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Stat)
                    .IsRequired()
                    .HasColumnName("STAT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Station>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("STATION");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Amt).HasColumnName("AMT");

                entity.Property(e => e.CodeDisp)
                    .HasColumnName("CODE_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.StationName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Subcode>(entity =>
            {
                entity.HasKey(e => e.Subcode1);

                entity.ToTable("SUBCODE");

                entity.Property(e => e.Subcode1)
                    .HasColumnName("SUBCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Subdesc)
                    .IsRequired()
                    .HasColumnName("SUBDESC")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Subs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUBS");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<SysDataStructure>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("sysDataStructure");

                entity.Property(e => e.BAutoKey).HasColumnName("bAutoKey");

                entity.Property(e => e.IColumnsLength).HasColumnName("iColumnsLength");

                entity.Property(e => e.IColumnsOrder).HasColumnName("iColumnsOrder");

                entity.Property(e => e.IIsNull).HasColumnName("iIsNull");

                entity.Property(e => e.SColumnsName)
                    .HasColumnName("sColumnsName")
                    .HasMaxLength(128);

                entity.Property(e => e.SColumnsType)
                    .IsRequired()
                    .HasColumnName("sColumnsType")
                    .HasMaxLength(129);

                entity.Property(e => e.STableName)
                    .IsRequired()
                    .HasColumnName("sTableName")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<SysDefault>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysDefault");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.SCategory)
                    .IsRequired()
                    .HasColumnName("sCategory")
                    .HasMaxLength(50);

                entity.Property(e => e.SKey)
                    .IsRequired()
                    .HasColumnName("sKey")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(200);

                entity.Property(e => e.SType)
                    .IsRequired()
                    .HasColumnName("sType")
                    .HasMaxLength(50);

                entity.Property(e => e.SValue)
                    .HasColumnName("sValue")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<SysLoginPw>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysLoginPW");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SKeyMan)
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SUserPwnew)
                    .IsRequired()
                    .HasColumnName("sUserPWnew")
                    .HasMaxLength(50);

                entity.Property(e => e.SUserPwold)
                    .IsRequired()
                    .HasColumnName("sUserPWold")
                    .HasMaxLength(50);

                entity.Property(e => e.SysLoginUserSUserId)
                    .IsRequired()
                    .HasColumnName("sysLoginUser_sUserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysLoginTime>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysLoginTime");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.BLoginSuccess).HasColumnName("bLoginSuccess");

                entity.Property(e => e.DLoginTime)
                    .HasColumnName("dLoginTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.DLogoutTime)
                    .HasColumnName("dLogoutTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.SLoginIp)
                    .IsRequired()
                    .HasColumnName("sLoginIP")
                    .HasMaxLength(50);

                entity.Property(e => e.SSessionid)
                    .IsRequired()
                    .HasColumnName("sSessionid")
                    .HasMaxLength(50);

                entity.Property(e => e.SysLoginUserSUserId)
                    .IsRequired()
                    .HasColumnName("sysLoginUser_sUserID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysRole>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("sysRole");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.IsVisible)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysUserRole>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("sysUserRole");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Syslog>(entity =>
            {
                entity.ToTable("SYSLOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasColumnName("NOTE");

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(500);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TableAtt>(entity =>
            {
                entity.HasKey(e => e.Fieldname);

                entity.Property(e => e.Fieldname)
                    .HasColumnName("FIELDNAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Caption)
                    .IsRequired()
                    .HasColumnName("CAPTION")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Taxlvl>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.AmtH });

                entity.ToTable("TAXLVL");

                entity.Property(e => e.Year)
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.AmtH)
                    .HasColumnName("AMT_H")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.AmtL)
                    .HasColumnName("AMT_L")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Per0)
                    .HasColumnName("PER0")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per1)
                    .HasColumnName("PER1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per10)
                    .HasColumnName("PER10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per11)
                    .HasColumnName("PER11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per2)
                    .HasColumnName("PER2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per3)
                    .HasColumnName("PER3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per4)
                    .HasColumnName("PER4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per5)
                    .HasColumnName("PER5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per6)
                    .HasColumnName("PER6")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per7)
                    .HasColumnName("PER7")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per8)
                    .HasColumnName("PER8")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Per9)
                    .HasColumnName("PER9")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Tbase>(entity =>
            {
                entity.HasKey(e => new { e.Incomp, e.Nobr });

                entity.ToTable("TBASE");

                entity.Property(e => e.Incomp).HasColumnName("INCOMP");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode1)
                    .IsRequired()
                    .HasColumnName("POSTCODE1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tcode>(entity =>
            {
                entity.HasKey(e => e.TCode1);

                entity.ToTable("TCODE");

                entity.Property(e => e.TCode1)
                    .HasColumnName("T_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TName)
                    .IsRequired()
                    .HasColumnName("T_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Temp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP1");

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ext)
                    .HasColumnName("ext")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.GrpType)
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InDate)
                    .HasColumnName("in_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plan)
                    .HasColumnName("plan")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Temp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp2");

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ext)
                    .HasColumnName("ext")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.GrpType)
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InDate)
                    .HasColumnName("in_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plan)
                    .HasColumnName("plan")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Temp3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp3");

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ext)
                    .HasColumnName("ext")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.GrpType)
                    .HasColumnName("GRP_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InDate)
                    .HasColumnName("in_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plan)
                    .HasColumnName("plan")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Temp6>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp6");

                entity.Property(e => e.Noss).HasColumnName("noss");

                entity.Property(e => e.TableCatalog)
                    .HasColumnName("TABLE_CATALOG")
                    .HasMaxLength(128);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnName("TABLE_NAME")
                    .HasMaxLength(128);

                entity.Property(e => e.TableSchema)
                    .HasColumnName("TABLE_SCHEMA")
                    .HasMaxLength(128);

                entity.Property(e => e.TableType)
                    .HasColumnName("TABLE_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpNobr>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.Property(e => e.Nobr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tmtable>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr });

                entity.ToTable("TMTABLE");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<TmtableImport>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Nobr });

                entity.ToTable("TMTABLE_IMPORT");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<TmtableTmp>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Rote });

                entity.ToTable("TMTABLE_TMP");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Rote)
                    .HasColumnName("ROTE")
                    .HasMaxLength(50);

                entity.Property(e => e.D1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D10)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D11)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D12)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D13)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D14)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D15)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D16)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D17)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D18)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D19)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D20)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D21)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D22)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D23)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D24)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D25)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D26)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D27)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D28)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D29)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D3)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D30)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D31)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D4)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D5)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D6)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D7)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D8)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.D9)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FreqNo)
                    .HasColumnName("FREQ_NO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Holis)
                    .HasColumnName("HOLIS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasColumnName("NO")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Tr2docd>(entity =>
            {
                entity.HasKey(e => e.Todocode);

                entity.ToTable("TR2DOCD");

                entity.Property(e => e.Todocode)
                    .HasColumnName("TODOCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Days).HasColumnName("DAYS");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Tododescr)
                    .IsRequired()
                    .HasColumnName("TODODESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Used).HasColumnName("USED");
            });

            modelBuilder.Entity<Traddrcd>(entity =>
            {
                entity.HasKey(e => e.Addrcd);

                entity.ToTable("TRADDRCD");

                entity.Property(e => e.Addrcd)
                    .HasColumnName("ADDRCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addrdescr)
                    .IsRequired()
                    .HasColumnName("ADDRDESCR")
                    .HasMaxLength(60);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tradecd>(entity =>
            {
                entity.HasKey(e => e.TradeCode);

                entity.ToTable("TRADECD");

                entity.Property(e => e.TradeCode)
                    .HasColumnName("TRADE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Trade)
                    .IsRequired()
                    .HasColumnName("TRADE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tradmit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRADMIT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Old)
                    .IsRequired()
                    .HasColumnName("OLD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrCheck)
                    .IsRequired()
                    .HasColumnName("TR_CHECK")
                    .HasMaxLength(50);

                entity.Property(e => e.TrDate)
                    .HasColumnName("TR_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.TrNo)
                    .IsRequired()
                    .HasColumnName("TR_NO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tradmitt>(entity =>
            {
                entity.HasKey(e => e.TrNo);

                entity.ToTable("TRADMITT");

                entity.Property(e => e.TrNo)
                    .HasColumnName("TR_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Old)
                    .IsRequired()
                    .HasColumnName("OLD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrName)
                    .IsRequired()
                    .HasColumnName("TR_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trapply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRAPPLY");

                entity.Property(e => e.Applyno)
                    .IsRequired()
                    .HasColumnName("APPLYNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rec)
                    .IsRequired()
                    .HasColumnName("REC")
                    .HasMaxLength(50);

                entity.Property(e => e.Trdate)
                    .HasColumnName("TRDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Tryearno)
                    .IsRequired()
                    .HasColumnName("TRYEARNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Traskcd>(entity =>
            {
                entity.HasKey(e => e.Askcode);

                entity.ToTable("TRASKCD");

                entity.Property(e => e.Askcode)
                    .HasColumnName("ASKCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Askdescrc)
                    .IsRequired()
                    .HasColumnName("ASKDESCRC")
                    .HasMaxLength(60);

                entity.Property(e => e.Askdescre)
                    .IsRequired()
                    .HasColumnName("ASKDESCRE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Template)
                    .IsRequired()
                    .HasColumnName("TEMPLATE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valcode)
                    .IsRequired()
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Traskdt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRASKDT");

                entity.Property(e => e.Askcode)
                    .IsRequired()
                    .HasColumnName("ASKCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Askgrd)
                    .IsRequired()
                    .HasColumnName("ASKGRD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ltot)
                    .HasColumnName("LTOT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valcode)
                    .IsRequired()
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trasscode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRASSCODE");

                entity.HasIndex(e => e.TrAsno)
                    .HasName("TR_ASNO");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tel)
                    .IsRequired()
                    .HasColumnName("TEL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrAsname)
                    .IsRequired()
                    .HasColumnName("TR_ASNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrAsno)
                    .IsRequired()
                    .HasColumnName("TR_ASNO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrAsnoDisp)
                    .IsRequired()
                    .HasColumnName("TR_ASNO_DISP")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tratt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRATT");

                entity.Property(e => e.Abs).HasColumnName("ABS");

                entity.Property(e => e.Abs1).HasColumnName("ABS1");

                entity.Property(e => e.Abshrs)
                    .HasColumnName("ABSHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Atthrs).HasColumnName("ATTHRS");

                entity.Property(e => e.Cosclose).HasColumnName("COSCLOSE");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.EarNo).HasColumnName("EAR_NO");

                entity.Property(e => e.Expect)
                    .IsRequired()
                    .HasColumnName("EXPECT")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fee).HasColumnName("FEE");

                entity.Property(e => e.Homework).HasColumnName("HOMEWORK");

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LatNo).HasColumnName("LAT_NO");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(60);

                entity.Property(e => e.Onlinesign).HasColumnName("ONLINESIGN");

                entity.Property(e => e.Score)
                    .HasColumnName("SCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Selcode)
                    .IsRequired()
                    .HasColumnName("SELCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Sharefee).HasColumnName("SHAREFEE");

                entity.Property(e => e.TrAsdate)
                    .HasColumnName("TR_ASDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trcompy>(entity =>
            {
                entity.HasKey(e => e.TrComp);

                entity.ToTable("TRCOMPY");

                entity.HasIndex(e => e.TrComp)
                    .HasName("TR_COMP");

                entity.Property(e => e.TrComp)
                    .HasColumnName("TR_COMP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel)
                    .HasColumnName("TEL")
                    .HasMaxLength(50);

                entity.Property(e => e.TrCompDisp)
                    .IsRequired()
                    .HasColumnName("TR_COMP_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.TrCompName)
                    .IsRequired()
                    .HasColumnName("TR_COMP_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trcos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRCOS");

                entity.Property(e => e.Abscnt).HasColumnName("ABSCNT");

                entity.Property(e => e.Abtcnt).HasColumnName("ABTCNT");

                entity.Property(e => e.Addrcd)
                    .IsRequired()
                    .HasColumnName("ADDRCD")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Applyno)
                    .IsRequired()
                    .HasColumnName("APPLYNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Attcnt).HasColumnName("ATTCNT");

                entity.Property(e => e.Benefit)
                    .IsRequired()
                    .HasColumnName("BENEFIT")
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Closenote)
                    .IsRequired()
                    .HasColumnName("CLOSENOTE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Clscnt).HasColumnName("CLSCNT");

                entity.Property(e => e.Clsper)
                    .HasColumnName("CLSPER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cosdateb)
                    .HasColumnName("COSDATEB")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cosdatee)
                    .HasColumnName("COSDATEE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cosintro)
                    .IsRequired()
                    .HasColumnName("COSINTRO")
                    .HasMaxLength(200);

                entity.Property(e => e.Costimeb)
                    .IsRequired()
                    .HasColumnName("COSTIMEB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costimee)
                    .IsRequired()
                    .HasColumnName("COSTIMEE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreDate)
                    .HasColumnName("CRE_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreMan)
                    .IsRequired()
                    .HasColumnName("CRE_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Homework).HasColumnName("HOMEWORK");

                entity.Property(e => e.Hours)
                    .HasColumnName("HOURS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(200);

                entity.Property(e => e.Planin).HasColumnName("PLANIN");

                entity.Property(e => e.Planto).HasColumnName("PLANTO");

                entity.Property(e => e.Prefee).HasColumnName("PREFEE");

                entity.Property(e => e.Prefinamt).HasColumnName("PREFINAMT");

                entity.Property(e => e.Relfee).HasColumnName("RELFEE");

                entity.Property(e => e.Relper)
                    .HasColumnName("RELPER")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SigndateB)
                    .HasColumnName("SIGNDATE_B")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SigndateE)
                    .HasColumnName("SIGNDATE_E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Testing).HasColumnName("TESTING");

                entity.Property(e => e.TrAsno)
                    .IsRequired()
                    .HasColumnName("TR_ASNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrCnt).HasColumnName("TR_CNT");

                entity.Property(e => e.TrIso)
                    .IsRequired()
                    .HasColumnName("TR_ISO")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrNo)
                    .IsRequired()
                    .HasColumnName("TR_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrNo1)
                    .IsRequired()
                    .HasColumnName("TR_NO1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrPerson)
                    .IsRequired()
                    .HasColumnName("TR_PERSON")
                    .HasMaxLength(200);

                entity.Property(e => e.Traddr)
                    .IsRequired()
                    .HasColumnName("TRADDR")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vallevel)
                    .IsRequired()
                    .HasColumnName("VALLEVEL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valscore)
                    .HasColumnName("VALSCORE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Web).HasColumnName("WEB");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Trcosc>(entity =>
            {
                entity.HasKey(e => e.Guid);

                entity.ToTable("TRCOSC");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(50);

                entity.Property(e => e.Aborad).HasColumnName("ABORAD");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.CosFee)
                    .HasColumnName("COS_FEE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Course)
                    .IsRequired()
                    .HasColumnName("COURSE")
                    .HasMaxLength(50);

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Handout)
                    .IsRequired()
                    .HasColumnName("HANDOUT")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Planin).HasColumnName("PLANIN");

                entity.Property(e => e.Planto).HasColumnName("PLANTO");

                entity.Property(e => e.TrAsno)
                    .IsRequired()
                    .HasColumnName("TR_ASNO")
                    .HasMaxLength(50);

                entity.Property(e => e.TrComp)
                    .IsRequired()
                    .HasColumnName("TR_COMP")
                    .HasMaxLength(60);

                entity.Property(e => e.TrDept)
                    .IsRequired()
                    .HasColumnName("TR_DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.TrHrs)
                    .HasColumnName("TR_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TrInout)
                    .IsRequired()
                    .HasColumnName("TR_INOUT")
                    .HasMaxLength(50);

                entity.Property(e => e.TrIso)
                    .IsRequired()
                    .HasColumnName("TR_ISO")
                    .HasMaxLength(60);

                entity.Property(e => e.TrMemo)
                    .IsRequired()
                    .HasColumnName("TR_MEMO")
                    .HasMaxLength(200);

                entity.Property(e => e.TrPerson)
                    .IsRequired()
                    .HasColumnName("TR_PERSON")
                    .HasMaxLength(60);

                entity.Property(e => e.TrTeach)
                    .IsRequired()
                    .HasColumnName("TR_TEACH")
                    .HasMaxLength(50);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trcoscd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRCOSCD");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Cosintro)
                    .IsRequired()
                    .HasColumnName("COSINTRO")
                    .HasMaxLength(200);

                entity.Property(e => e.Descrc)
                    .IsRequired()
                    .HasColumnName("DESCRC")
                    .HasMaxLength(50);

                entity.Property(e => e.Descre)
                    .IsRequired()
                    .HasColumnName("DESCRE")
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Subcode)
                    .IsRequired()
                    .HasColumnName("SUBCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.TrPerson)
                    .IsRequired()
                    .HasColumnName("TR_PERSON")
                    .HasMaxLength(200);

                entity.Property(e => e.Traddr)
                    .IsRequired()
                    .HasColumnName("TRADDR")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Trcosf>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("TRCOSF");

                entity.HasIndex(e => e.Course)
                    .HasName("COURSE");

                entity.HasIndex(e => e.DateB)
                    .HasName("DATE_B");

                entity.HasIndex(e => e.DateE)
                    .HasName("DATE_E");

                entity.HasIndex(e => e.Nobr)
                    .HasName("NOBR");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Aborad).HasColumnName("ABORAD");

                entity.Property(e => e.Applyno)
                    .IsRequired()
                    .HasColumnName("APPLYNO")
                    .HasMaxLength(50);

                entity.Property(e => e.AtHrs)
                    .HasColumnName("AT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Close).HasColumnName("CLOSE_");

                entity.Property(e => e.CosFee)
                    .HasColumnName("COS_FEE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Coscode)
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50);

                entity.Property(e => e.Course)
                    .IsRequired()
                    .HasColumnName("COURSE")
                    .HasMaxLength(50);

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime");

                entity.Property(e => e.Handout)
                    .IsRequired()
                    .HasColumnName("HANDOUT")
                    .HasMaxLength(50);

                entity.Property(e => e.Kavl)
                    .HasColumnName("KAVL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Planin).HasColumnName("PLANIN");

                entity.Property(e => e.Planto).HasColumnName("PLANTO");

                entity.Property(e => e.Prove)
                    .IsRequired()
                    .HasColumnName("PROVE")
                    .HasMaxLength(50);

                entity.Property(e => e.Receiver)
                    .IsRequired()
                    .HasColumnName("RECEIVER")
                    .HasMaxLength(50);

                entity.Property(e => e.TrAsdate)
                    .HasColumnName("TR_ASDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.TrAsno)
                    .IsRequired()
                    .HasColumnName("TR_ASNO")
                    .HasMaxLength(50);

                entity.Property(e => e.TrComp)
                    .IsRequired()
                    .HasColumnName("TR_COMP")
                    .HasMaxLength(60);

                entity.Property(e => e.TrHrs)
                    .HasColumnName("TR_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TrInout)
                    .IsRequired()
                    .HasColumnName("TR_INOUT")
                    .HasMaxLength(50);

                entity.Property(e => e.TrIso)
                    .IsRequired()
                    .HasColumnName("TR_ISO")
                    .HasMaxLength(60);

                entity.Property(e => e.TrMemo)
                    .IsRequired()
                    .HasColumnName("TR_MEMO")
                    .HasMaxLength(200);

                entity.Property(e => e.TrPerson)
                    .IsRequired()
                    .HasColumnName("TR_PERSON")
                    .HasMaxLength(60);

                entity.Property(e => e.TrRepo).HasColumnName("TR_REPO");

                entity.Property(e => e.TrTeach)
                    .IsRequired()
                    .HasColumnName("TR_TEACH")
                    .HasMaxLength(50);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trcosfee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRCOSFEE");

                entity.Property(e => e.Amt).HasColumnName("AMT");

                entity.Property(e => e.Cal).HasColumnName("CAL");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Feecode)
                    .IsRequired()
                    .HasColumnName("FEECODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Feetype)
                    .IsRequired()
                    .HasColumnName("FEETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Qty)
                    .HasColumnName("QTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trcosp>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("TRCOSP");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Applyno)
                    .IsRequired()
                    .HasColumnName("APPLYNO")
                    .HasMaxLength(50);

                entity.Property(e => e.AtHrs)
                    .HasColumnName("AT_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Close).HasColumnName("CLOSE_");

                entity.Property(e => e.Course)
                    .IsRequired()
                    .HasColumnName("COURSE")
                    .HasMaxLength(50);

                entity.Property(e => e.Kavl)
                    .HasColumnName("KAVL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Prove)
                    .IsRequired()
                    .HasColumnName("PROVE")
                    .HasMaxLength(50);

                entity.Property(e => e.Receiver)
                    .IsRequired()
                    .HasColumnName("RECEIVER")
                    .HasMaxLength(50);

                entity.Property(e => e.StHrs)
                    .HasColumnName("ST_HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TrAsdate)
                    .HasColumnName("TR_ASDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.TrMemo)
                    .IsRequired()
                    .HasColumnName("TR_MEMO")
                    .HasMaxLength(200);

                entity.Property(e => e.TrRepo).HasColumnName("TR_REPO");
            });

            modelBuilder.Entity<Trcostr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRCOSTR");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trdud>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRDUD");

                entity.Property(e => e.Credat)
                    .HasColumnName("CREDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Creusr)
                    .IsRequired()
                    .HasColumnName("CREUSR")
                    .HasMaxLength(50);

                entity.Property(e => e.Duedat)
                    .HasColumnName("DUEDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Effdat)
                    .HasColumnName("EFFDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Idenno)
                    .IsRequired()
                    .HasColumnName("IDENNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Toiden)
                    .IsRequired()
                    .HasColumnName("TOIDEN")
                    .HasMaxLength(50);

                entity.Property(e => e.Tranty)
                    .IsRequired()
                    .HasColumnName("TRANTY")
                    .HasMaxLength(50);

                entity.Property(e => e.Upddat)
                    .HasColumnName("UPDDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Updusr)
                    .IsRequired()
                    .HasColumnName("UPDUSR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trdur>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRDUR");

                entity.Property(e => e.Credat)
                    .HasColumnName("CREDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Creusr)
                    .IsRequired()
                    .HasColumnName("CREUSR")
                    .HasMaxLength(50);

                entity.Property(e => e.Tranna)
                    .IsRequired()
                    .HasColumnName("TRANNA")
                    .HasMaxLength(50);

                entity.Property(e => e.Tranty)
                    .IsRequired()
                    .HasColumnName("TRANTY")
                    .HasMaxLength(50);

                entity.Property(e => e.Upddat)
                    .HasColumnName("UPDDAT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Updusr)
                    .IsRequired()
                    .HasColumnName("UPDUSR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tremail>(entity =>
            {
                entity.HasKey(e => e.Idno);

                entity.ToTable("TREMAIL");

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dept1)
                    .IsRequired()
                    .HasColumnName("DEPT1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dept1mang).HasColumnName("DEPT1MANG");

                entity.Property(e => e.Dept2mang).HasColumnName("DEPT2MANG");

                entity.Property(e => e.Interemail)
                    .IsRequired()
                    .HasColumnName("INTEREMAIL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Noteemail)
                    .IsRequired()
                    .HasColumnName("NOTEEMAIL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tremlif>(entity =>
            {
                entity.HasKey(e => e.Emlifcode);

                entity.ToTable("TREMLIF");

                entity.Property(e => e.Emlifcode)
                    .HasColumnName("EMLIFCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Emlifcont)
                    .IsRequired()
                    .HasColumnName("EMLIFCONT")
                    .HasMaxLength(254)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Trfeecd>(entity =>
            {
                entity.HasKey(e => e.Feecode);

                entity.ToTable("TRFEECD");

                entity.Property(e => e.Feecode)
                    .HasColumnName("FEECODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Feename)
                    .IsRequired()
                    .HasColumnName("FEENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Feenamee)
                    .IsRequired()
                    .HasColumnName("FEENAMEE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trjbset>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRJBSET");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobclass)
                    .IsRequired()
                    .HasColumnName("JOBCLASS")
                    .HasMaxLength(50);

                entity.Property(e => e.Joblevel)
                    .IsRequired()
                    .HasColumnName("JOBLEVEL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trlearned>(entity =>
            {
                entity.HasKey(e => e.IAutoKey);

                entity.ToTable("TRLEARNED");

                entity.Property(e => e.IAutoKey).HasColumnName("iAutoKey");

                entity.Property(e => e.BAuth).HasColumnName("bAuth");

                entity.Property(e => e.BSign).HasColumnName("bSign");

                entity.Property(e => e.DDateB)
                    .HasColumnName("dDateB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DDateE)
                    .HasColumnName("dDateE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DKeyDate)
                    .HasColumnName("dKeyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ITotalHour)
                    .HasColumnName("iTotalHour")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.IdProcess).HasColumnName("idProcess");

                entity.Property(e => e.SAddress)
                    .IsRequired()
                    .HasColumnName("sAddress")
                    .HasMaxLength(100);

                entity.Property(e => e.SApplyNo)
                    .IsRequired()
                    .HasColumnName("sApplyNo")
                    .HasMaxLength(50);

                entity.Property(e => e.SComment)
                    .IsRequired()
                    .HasColumnName("sComment")
                    .HasMaxLength(50);

                entity.Property(e => e.SConditions1)
                    .IsRequired()
                    .HasColumnName("sConditions1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SConditions2)
                    .IsRequired()
                    .HasColumnName("sConditions2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SConditions3)
                    .IsRequired()
                    .HasColumnName("sConditions3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SConditions4)
                    .IsRequired()
                    .HasColumnName("sConditions4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SConditions5)
                    .IsRequired()
                    .HasColumnName("sConditions5")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SContent)
                    .IsRequired()
                    .HasColumnName("sContent")
                    .HasMaxLength(2000);

                entity.Property(e => e.SCourseName)
                    .IsRequired()
                    .HasColumnName("sCourseName")
                    .HasMaxLength(50);

                entity.Property(e => e.SDept)
                    .IsRequired()
                    .HasColumnName("sDept")
                    .HasMaxLength(50);

                entity.Property(e => e.SDeptName)
                    .IsRequired()
                    .HasColumnName("sDeptName")
                    .HasMaxLength(50);

                entity.Property(e => e.SEffor1)
                    .IsRequired()
                    .HasColumnName("sEffor1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SEffor2)
                    .IsRequired()
                    .HasColumnName("sEffor2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SEffor3)
                    .IsRequired()
                    .HasColumnName("sEffor3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SEffor4)
                    .IsRequired()
                    .HasColumnName("sEffor4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SJob)
                    .IsRequired()
                    .HasColumnName("sJob")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobName)
                    .IsRequired()
                    .HasColumnName("sJobName")
                    .HasMaxLength(50);

                entity.Property(e => e.SJobl)
                    .IsRequired()
                    .HasColumnName("sJobl")
                    .HasMaxLength(50);

                entity.Property(e => e.SJoblName)
                    .IsRequired()
                    .HasColumnName("sJoblName")
                    .HasMaxLength(50);

                entity.Property(e => e.SKeyMan)
                    .IsRequired()
                    .HasColumnName("sKeyMan")
                    .HasMaxLength(50);

                entity.Property(e => e.SLearned)
                    .IsRequired()
                    .HasColumnName("sLearned")
                    .HasMaxLength(2000);

                entity.Property(e => e.SMangAppraise)
                    .IsRequired()
                    .HasColumnName("sMangAppraise")
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SName)
                    .IsRequired()
                    .HasColumnName("sName")
                    .HasMaxLength(50);

                entity.Property(e => e.SNobr)
                    .IsRequired()
                    .HasColumnName("sNobr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SNote)
                    .IsRequired()
                    .HasColumnName("sNote")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SProcessId)
                    .IsRequired()
                    .HasColumnName("sProcessID")
                    .HasMaxLength(50);

                entity.Property(e => e.SReason)
                    .IsRequired()
                    .HasColumnName("sReason")
                    .HasMaxLength(200);

                entity.Property(e => e.SReserve1)
                    .IsRequired()
                    .HasColumnName("sReserve1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SReserve2)
                    .IsRequired()
                    .HasColumnName("sReserve2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SReserve3)
                    .IsRequired()
                    .HasColumnName("sReserve3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SState)
                    .IsRequired()
                    .HasColumnName("sState")
                    .HasMaxLength(50);

                entity.Property(e => e.STcrName1)
                    .IsRequired()
                    .HasColumnName("sTcrName1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STcrName2)
                    .IsRequired()
                    .HasColumnName("sTcrName2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STcrName3)
                    .IsRequired()
                    .HasColumnName("sTcrName3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STcrName4)
                    .IsRequired()
                    .HasColumnName("sTcrName4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STcrName5)
                    .IsRequired()
                    .HasColumnName("sTcrName5")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STimeB)
                    .IsRequired()
                    .HasColumnName("sTimeB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STimeE)
                    .IsRequired()
                    .HasColumnName("sTimeE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Trover>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TROVER");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Trgroup)
                    .IsRequired()
                    .HasColumnName("TRGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Trname)
                    .IsRequired()
                    .HasColumnName("TRNAME");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trq>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("TRQ");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("CONTENT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Footer)
                    .IsRequired()
                    .HasColumnName("FOOTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Header)
                    .IsRequired()
                    .HasColumnName("HEADER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Trqcode)
                    .IsRequired()
                    .HasColumnName("TRQCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Trqname)
                    .IsRequired()
                    .HasColumnName("TRQNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trqg>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("TRQG");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Trqcode)
                    .IsRequired()
                    .HasColumnName("TRQCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valcode)
                    .IsRequired()
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trrejet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRREJET");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RejDate)
                    .HasColumnName("REJ_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rejcd)
                    .IsRequired()
                    .HasColumnName("REJCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Send).HasColumnName("SEND");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trrejtcd>(entity =>
            {
                entity.HasKey(e => e.Rejcd);

                entity.ToTable("TRREJTCD");

                entity.Property(e => e.Rejcd)
                    .HasColumnName("REJCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Rejname)
                    .IsRequired()
                    .HasColumnName("REJNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trsub>(entity =>
            {
                entity.HasKey(e => e.Subcode);

                entity.ToTable("TRSUB");

                entity.Property(e => e.Subcode)
                    .HasColumnName("SUBCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trtcr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRTCR");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasColumnName("ADDR1")
                    .HasMaxLength(60);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(60);

                entity.Property(e => e.Bbc)
                    .IsRequired()
                    .HasColumnName("BBC")
                    .HasMaxLength(50);

                entity.Property(e => e.Compy)
                    .IsRequired()
                    .HasColumnName("COMPY")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContMa)
                    .IsRequired()
                    .HasColumnName("CONT_MA")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gsm)
                    .IsRequired()
                    .HasColumnName("GSM")
                    .HasMaxLength(50);

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Incomp).HasColumnName("INCOMP");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.School)
                    .IsRequired()
                    .HasColumnName("SCHOOL")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Speciality)
                    .IsRequired()
                    .HasColumnName("SPECIALITY")
                    .HasMaxLength(255);

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TcrName)
                    .IsRequired()
                    .HasColumnName("TCR_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.TcrNamee)
                    .IsRequired()
                    .HasColumnName("TCR_NAMEE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel1)
                    .IsRequired()
                    .HasColumnName("TEL1")
                    .HasMaxLength(50);

                entity.Property(e => e.Tel2)
                    .IsRequired()
                    .HasColumnName("TEL2")
                    .HasMaxLength(50);

                entity.Property(e => e.Truse).HasColumnName("TRUSE");
            });

            modelBuilder.Entity<Trtcrdt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRTCRDT");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hrs)
                    .HasColumnName("HRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ser)
                    .IsRequired()
                    .HasColumnName("SER")
                    .HasMaxLength(50);

                entity.Property(e => e.TcrNo)
                    .IsRequired()
                    .HasColumnName("TCR_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRTYPE");

                entity.HasIndex(e => e.TrType1)
                    .HasName("IX_TRTYPE");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TrType1)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.TrTypeDisp)
                    .IsRequired()
                    .HasColumnName("TR_TYPE_DISP")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trvalcd>(entity =>
            {
                entity.HasKey(e => e.Valcode);

                entity.ToTable("TRVALCD");

                entity.Property(e => e.Valcode)
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.L1cap)
                    .IsRequired()
                    .HasColumnName("L1CAP")
                    .HasMaxLength(50);

                entity.Property(e => e.L1cape)
                    .IsRequired()
                    .HasColumnName("L1CAPE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.L2cap)
                    .IsRequired()
                    .HasColumnName("L2CAP")
                    .HasMaxLength(50);

                entity.Property(e => e.L2cape)
                    .IsRequired()
                    .HasColumnName("L2CAPE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.L3cap)
                    .IsRequired()
                    .HasColumnName("L3CAP")
                    .HasMaxLength(50);

                entity.Property(e => e.L3cape)
                    .IsRequired()
                    .HasColumnName("L3CAPE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.L4cap)
                    .IsRequired()
                    .HasColumnName("L4CAP")
                    .HasMaxLength(50);

                entity.Property(e => e.L4cape)
                    .IsRequired()
                    .HasColumnName("L4CAPE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.L5cap)
                    .IsRequired()
                    .HasColumnName("L5CAP")
                    .HasMaxLength(50);

                entity.Property(e => e.L5cape)
                    .IsRequired()
                    .HasColumnName("L5CAPE")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Trvalgd>(entity =>
            {
                entity.HasKey(e => e.Valcode);

                entity.ToTable("TRVALGD");

                entity.Property(e => e.Valcode)
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cate)
                    .IsRequired()
                    .HasColumnName("CATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Valname)
                    .IsRequired()
                    .HasColumnName("VALNAME")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Trvalgdg>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("TRVALGDG");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Askcode)
                    .IsRequired()
                    .HasColumnName("ASKCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Sort).HasColumnName("SORT");

                entity.Property(e => e.Valcode)
                    .IsRequired()
                    .HasColumnName("VALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tryearpa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRYEARPA");

                entity.Property(e => e.Coscode)
                    .IsRequired()
                    .HasColumnName("COSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Tramt)
                    .HasColumnName("TRAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trcer)
                    .IsRequired()
                    .HasColumnName("TRCER")
                    .HasMaxLength(50);

                entity.Property(e => e.Trdate)
                    .HasColumnName("TRDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Trdate1)
                    .IsRequired()
                    .HasColumnName("TRDATE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Trdesc)
                    .IsRequired()
                    .HasColumnName("TRDESC")
                    .HasMaxLength(50);

                entity.Property(e => e.Trhrs)
                    .HasColumnName("TRHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trisosub)
                    .IsRequired()
                    .HasColumnName("TRISOSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Trmeno)
                    .IsRequired()
                    .HasColumnName("TRMENO")
                    .HasMaxLength(50);

                entity.Property(e => e.Trno1)
                    .HasColumnName("TRNO1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trno2)
                    .HasColumnName("TRNO2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trper)
                    .IsRequired()
                    .HasColumnName("TRPER")
                    .HasMaxLength(50);

                entity.Property(e => e.Trser)
                    .IsRequired()
                    .HasColumnName("TRSER")
                    .HasMaxLength(50);

                entity.Property(e => e.Trsub)
                    .IsRequired()
                    .HasColumnName("TRSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.Trter)
                    .IsRequired()
                    .HasColumnName("TRTER")
                    .HasMaxLength(50);

                entity.Property(e => e.Trthrs)
                    .HasColumnName("TRTHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Trtype)
                    .IsRequired()
                    .HasColumnName("TRTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tryearno)
                    .IsRequired()
                    .HasColumnName("TRYEARNO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Ttscd>(entity =>
            {
                entity.HasKey(e => e.Ttscd1);

                entity.ToTable("TTSCD");

                entity.Property(e => e.Ttscd1)
                    .HasColumnName("TTSCD")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.TtscdDisp)
                    .HasColumnName("TTSCD_DISP")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttsname)
                    .IsRequired()
                    .HasColumnName("TTSNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Ttscode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TTSCODE");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Ttt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTT");

                entity.Property(e => e.Autokey)
                    .HasColumnName("AUTOKEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ttt1)
                    .HasColumnName("TTT")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TwTax>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_YEARTAXSETTING");

                entity.ToTable("TW_TAX");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Datebegin)
                    .HasColumnName("DATEBEGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dateend)
                    .HasColumnName("DATEEND")
                    .HasColumnType("datetime");

                entity.Property(e => e.Islock).HasColumnName("ISLOCK");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Relasedate)
                    .HasColumnName("RELASEDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasColumnName("REMARK")
                    .HasMaxLength(1000);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnName("SUBJECT")
                    .HasMaxLength(100);

                entity.Property(e => e.Yearmonth)
                    .IsRequired()
                    .HasColumnName("YEARMONTH")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwTaxItem>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("TW_TAX_ITEM");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Forsub)
                    .IsRequired()
                    .HasColumnName("FORSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.InaId)
                    .IsRequired()
                    .HasColumnName("INA_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsFile).HasColumnName("IS_FILE");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RetAmt)
                    .HasColumnName("RET_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Subcode)
                    .HasColumnName("SUBCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwTaxSubcode>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("TW_TAX_SUBCODE");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.MFormat)
                    .IsRequired()
                    .HasColumnName("M_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.MForsub)
                    .IsRequired()
                    .HasColumnName("M_FORSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.MSubName)
                    .IsRequired()
                    .HasColumnName("M_SUB_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwTaxSummary>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("TW_TAX_SUMMARY");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR2")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Error)
                    .IsRequired()
                    .HasColumnName("ERROR")
                    .HasMaxLength(1000);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Forsub)
                    .IsRequired()
                    .HasColumnName("FORSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Import).HasColumnName("IMPORT");

                entity.Property(e => e.IsFile).HasColumnName("IS_FILE");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnName("MEMO")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Post2)
                    .IsRequired()
                    .HasColumnName("POST2")
                    .HasMaxLength(50);

                entity.Property(e => e.RetAmt)
                    .HasColumnName("RET_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Series)
                    .IsRequired()
                    .HasColumnName("SERIES")
                    .HasMaxLength(50);

                entity.Property(e => e.Subcode)
                    .HasColumnName("SUBCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Twaged>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("TWAGED");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Forsub)
                    .IsRequired()
                    .HasColumnName("FORSUB")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InaId)
                    .IsRequired()
                    .HasColumnName("INA_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Meno)
                    .IsRequired()
                    .HasColumnName("MENO")
                    .HasMaxLength(120)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Subcode)
                    .IsRequired()
                    .HasColumnName("SUBCODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupAmt)
                    .HasColumnName("SUP_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxno)
                    .IsRequired()
                    .HasColumnName("TAXNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tyrtax>(entity =>
            {
                entity.HasKey(e => new { e.Series, e.Id });

                entity.ToTable("TYRTAX");

                entity.Property(e => e.Series)
                    .HasColumnName("SERIES")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasColumnName("ACC_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR_2")
                    .HasMaxLength(60);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasColumnName("BLANK_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ErrMark)
                    .IsRequired()
                    .HasColumnName("ERR_MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nomodi).HasColumnName("NOMODI");

                entity.Property(e => e.RelAmt)
                    .HasColumnName("REL_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RetAmt)
                    .HasColumnName("RET_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("TAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxtype)
                    .IsRequired()
                    .HasColumnName("TAXTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.YearB)
                    .IsRequired()
                    .HasColumnName("YEAR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YearE)
                    .IsRequired()
                    .HasColumnName("YEAR_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UCode>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("U_CODE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Field1)
                    .IsRequired()
                    .HasColumnName("FIELD1")
                    .HasMaxLength(500);

                entity.Property(e => e.Field2)
                    .IsRequired()
                    .HasColumnName("FIELD2")
                    .HasMaxLength(500);

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.QAttr)
                    .IsRequired()
                    .HasColumnName("Q_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.QCode)
                    .IsRequired()
                    .HasColumnName("Q_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.QField)
                    .IsRequired()
                    .HasColumnName("Q_FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.QLens)
                    .HasColumnName("Q_LENS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QOrder).HasColumnName("Q_ORDER");

                entity.Property(e => e.QVar).HasColumnName("Q_VAR");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UDatagroup>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Company, e.Datagroup })
                    .HasName("PK_DATAGG1_1");

                entity.ToTable("U_DATAGROUP");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Datagroup)
                    .HasColumnName("DATAGROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Readrule).HasColumnName("READRULE");

                entity.Property(e => e.Writerule).HasColumnName("WRITERULE");

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_COMP");

                entity.HasOne(d => d.DatagroupNavigation)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => d.Datagroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_DATAGROUP");

                entity.HasOne(d => d.CompDatagroup)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => new { d.Company, d.Datagroup })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_COMP_DATAGROUP");

                entity.HasOne(d => d.UUsercomp)
                    .WithMany(p => p.UDatagroup)
                    .HasForeignKey(d => new { d.UserId, d.Company })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_DATAGROUP_U_USERCOMP");
            });

            modelBuilder.Entity<UDataid>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Dept, e.System });

                entity.ToTable("U_DATAID");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Dept)
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_ERROR");

                entity.Property(e => e.Aerror)
                    .IsRequired()
                    .HasColumnName("AERROR")
                    .HasColumnType("text");

                entity.Property(e => e.Errmsg)
                    .IsRequired()
                    .HasColumnName("ERRMSG")
                    .HasColumnType("text");

                entity.Property(e => e.Errno)
                    .HasColumnName("ERRNO")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Errpgcode)
                    .IsRequired()
                    .HasColumnName("ERRPGCODE")
                    .HasColumnType("text");

                entity.Property(e => e.Errpgline)
                    .HasColumnName("ERRPGLINE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Errpgname)
                    .IsRequired()
                    .HasColumnName("ERRPGNAME")
                    .HasColumnType("text");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.OccurTime)
                    .HasColumnName("OCCUR_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasColumnName("USER_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UFilter>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("U_FILTER");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QAttr)
                    .IsRequired()
                    .HasColumnName("Q_ATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.QCode)
                    .IsRequired()
                    .HasColumnName("Q_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.QCond)
                    .IsRequired()
                    .HasColumnName("Q_COND")
                    .HasMaxLength(120);

                entity.Property(e => e.QCond1)
                    .IsRequired()
                    .HasColumnName("Q_COND1")
                    .HasMaxLength(120);

                entity.Property(e => e.QHaving)
                    .IsRequired()
                    .HasColumnName("Q_HAVING")
                    .HasMaxLength(80);

                entity.Property(e => e.QKeycontb)
                    .IsRequired()
                    .HasColumnName("Q_KEYCONTB")
                    .HasMaxLength(50);

                entity.Property(e => e.QKeyconte)
                    .IsRequired()
                    .HasColumnName("Q_KEYCONTE")
                    .HasMaxLength(50);

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QOrder)
                    .IsRequired()
                    .HasColumnName("Q_ORDER")
                    .HasMaxLength(50);

                entity.Property(e => e.QSubq)
                    .IsRequired()
                    .HasColumnName("Q_SUBQ")
                    .HasMaxLength(160);

                entity.Property(e => e.QVarval)
                    .IsRequired()
                    .HasColumnName("Q_VARVAL")
                    .HasMaxLength(60);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UCode).HasColumnName("U_CODE");

                entity.Property(e => e.Usernobr)
                    .IsRequired()
                    .HasColumnName("USERNOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UFldlst>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_FLDLST");

                entity.Property(e => e.Dbfname)
                    .IsRequired()
                    .HasColumnName("DBFNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Flddescr)
                    .IsRequired()
                    .HasColumnName("FLDDESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Fldname)
                    .IsRequired()
                    .HasColumnName("FLDNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.Prog });

                entity.ToTable("U_GROUP");

                entity.Property(e => e.GroupId)
                    .HasColumnName("GROUP_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Prog)
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.Add).HasColumnName("ADD_");

                entity.Property(e => e.Dele).HasColumnName("DELE");

                entity.Property(e => e.Edit).HasColumnName("EDIT");

                entity.Property(e => e.GroupName)
                    .HasColumnName("GROUP_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Print).HasColumnName("PRINT_");

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ULogin>(entity =>
            {
                entity.HasKey(e => e.InTime);

                entity.ToTable("U_LOGIN");

                entity.Property(e => e.InTime)
                    .HasColumnName("IN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mangsuper).HasColumnName("MANGSUPER");

                entity.Property(e => e.Procsuper).HasColumnName("PROCSUPER");

                entity.Property(e => e.Super).HasColumnName("SUPER");

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasColumnName("USER_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Workadr)
                    .HasColumnName("WORKADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_ORDER");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.QAsc)
                    .IsRequired()
                    .HasColumnName("Q_ASC")
                    .HasMaxLength(50);

                entity.Property(e => e.QField)
                    .IsRequired()
                    .HasColumnName("Q_FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.QName)
                    .IsRequired()
                    .HasColumnName("Q_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usernobr)
                    .IsRequired()
                    .HasColumnName("USERNOBR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UPrg>(entity =>
            {
                entity.HasKey(e => e.Prog);

                entity.ToTable("U_PRG");

                entity.Property(e => e.Prog)
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ProgName)
                    .IsRequired()
                    .HasColumnName("PROG_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Root).HasColumnName("ROOT");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UPrgid>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Prog, e.System });

                entity.ToTable("U_PRGID");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Prog)
                    .HasColumnName("PROG")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.Add).HasColumnName("ADD_");

                entity.Property(e => e.Dele).HasColumnName("DELE");

                entity.Property(e => e.Edit).HasColumnName("EDIT");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Print).HasColumnName("PRINT_");
            });

            modelBuilder.Entity<UQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_QUERY");

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasMaxLength(50);

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("FORMNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Sys2007)
                    .IsRequired()
                    .HasColumnName("SYS2007")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys>(entity =>
            {
                entity.HasKey(e => e.Auto)
                    .HasName("PK_U_SYS_1");

                entity.ToTable("U_SYS");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Addupamt01)
                    .HasColumnName("ADDUPAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt02)
                    .HasColumnName("ADDUPAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt03)
                    .HasColumnName("ADDUPAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt04)
                    .HasColumnName("ADDUPAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt05)
                    .HasColumnName("ADDUPAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt)
                    .HasColumnName("ATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt1)
                    .HasColumnName("ATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attawardsalcode)
                    .HasColumnName("ATTAWARDSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Attmonamt)
                    .HasColumnName("ATTMONAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attmonth).HasColumnName("ATTMONTH");

                entity.Property(e => e.Attqty)
                    .HasColumnName("ATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attqty1)
                    .HasColumnName("ATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Bankno)
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Carddateformat)
                    .HasColumnName("CARDDATEFORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardfilename)
                    .HasColumnName("CARDFILENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardnoeuqalnobr).HasColumnName("CARDNOEUQALNOBR");

                entity.Property(e => e.Cardtype)
                    .HasColumnName("CARDTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Compaddr)
                    .HasColumnName("COMPADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Company1)
                    .HasColumnName("COMPANY1")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankac)
                    .HasColumnName("COMPANYBANKAC")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankno)
                    .HasColumnName("COMPANYBANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Compersoncnt)
                    .HasColumnName("COMPERSONCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Compfax)
                    .HasColumnName("COMPFAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Comphelid)
                    .HasColumnName("COMPHELID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid1)
                    .HasColumnName("COMPID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Complabid)
                    .HasColumnName("COMPLABID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compman)
                    .HasColumnName("COMPMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Comptel)
                    .HasColumnName("COMPTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.DateLen).HasColumnName("DATE_LEN");

                entity.Property(e => e.DatePos).HasColumnName("DATE_POS");

                entity.Property(e => e.Eatsalcode)
                    .HasColumnName("EATSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Empfamilycnt)
                    .HasColumnName("EMPFAMILYCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empsalcode)
                    .HasColumnName("EMPSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Entryday)
                    .HasColumnName("ENTRYDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt1)
                    .HasColumnName("FATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty)
                    .HasColumnName("FATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty1)
                    .HasColumnName("FATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Femalemaxhrs)
                    .HasColumnName("FEMALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ff0407)
                    .HasColumnName("FF0407")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff04071)
                    .HasColumnName("FF04071")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff103)
                    .HasColumnName("FF103")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixtaxrate)
                    .HasColumnName("FIXTAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Forsalbasd)
                    .HasColumnName("FORSALBASD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate01)
                    .HasColumnName("FORTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate02)
                    .HasColumnName("FORTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate03)
                    .HasColumnName("FORTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp1)
                    .HasColumnName("GROUPEXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp2)
                    .HasColumnName("GROUPEXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp51)
                    .HasColumnName("GROUPEXP51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp52)
                    .HasColumnName("GROUPEXP52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupsalcd)
                    .HasColumnName("GROUPSALCD")
                    .HasMaxLength(50);

                entity.Property(e => e.Heacomprate)
                    .HasColumnName("HEACOMPRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Healthoversalcode)
                    .HasColumnName("HEALTHOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Healthrepairsalcode)
                    .HasColumnName("HEALTHREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Helorgname)
                    .HasColumnName("HELORGNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Hsalcode)
                    .HasColumnName("HSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Inday).HasColumnName("INDAY");

                entity.Property(e => e.Laboversalcode)
                    .HasColumnName("LABOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Labrepairsalcode)
                    .HasColumnName("LABREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Lattamt)
                    .HasColumnName("LATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattamt1)
                    .HasColumnName("LATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty)
                    .HasColumnName("LATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty1)
                    .HasColumnName("LATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ljobper)
                    .HasColumnName("LJOBPER")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ljobper1)
                    .HasColumnName("LJOBPER1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Lsalcode)
                    .HasColumnName("LSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Malemaxhrs)
                    .HasColumnName("MALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Maxdays).HasColumnName("MAXDAYS");

                entity.Property(e => e.Month01day1)
                    .HasColumnName("MONTH01DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day2)
                    .HasColumnName("MONTH01DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day3)
                    .HasColumnName("MONTH01DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day4)
                    .HasColumnName("MONTH01DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day1)
                    .HasColumnName("MONTH02DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day2)
                    .HasColumnName("MONTH02DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day3)
                    .HasColumnName("MONTH02DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day4)
                    .HasColumnName("MONTH02DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day1)
                    .HasColumnName("MONTH03DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day2)
                    .HasColumnName("MONTH03DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day3)
                    .HasColumnName("MONTH03DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day4)
                    .HasColumnName("MONTH03DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day1)
                    .HasColumnName("MONTH04DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day2)
                    .HasColumnName("MONTH04DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day3)
                    .HasColumnName("MONTH04DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day4)
                    .HasColumnName("MONTH04DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day1)
                    .HasColumnName("MONTH05DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day2)
                    .HasColumnName("MONTH05DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day3)
                    .HasColumnName("MONTH05DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day4)
                    .HasColumnName("MONTH05DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day1)
                    .HasColumnName("MONTH06DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day2)
                    .HasColumnName("MONTH06DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day3)
                    .HasColumnName("MONTH06DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day4)
                    .HasColumnName("MONTH06DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day1)
                    .HasColumnName("MONTH07DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day2)
                    .HasColumnName("MONTH07DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day3)
                    .HasColumnName("MONTH07DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day4)
                    .HasColumnName("MONTH07DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day1)
                    .HasColumnName("MONTH08DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day2)
                    .HasColumnName("MONTH08DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day3)
                    .HasColumnName("MONTH08DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day4)
                    .HasColumnName("MONTH08DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day1)
                    .HasColumnName("MONTH09DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day2)
                    .HasColumnName("MONTH09DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day3)
                    .HasColumnName("MONTH09DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day4)
                    .HasColumnName("MONTH09DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day1)
                    .HasColumnName("MONTH10DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day2)
                    .HasColumnName("MONTH10DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day3)
                    .HasColumnName("MONTH10DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day4)
                    .HasColumnName("MONTH10DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day1)
                    .HasColumnName("MONTH11DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day2)
                    .HasColumnName("MONTH11DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day3)
                    .HasColumnName("MONTH11DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day4)
                    .HasColumnName("MONTH11DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day1)
                    .HasColumnName("MONTH12DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day2)
                    .HasColumnName("MONTH12DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day3)
                    .HasColumnName("MONTH12DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day4)
                    .HasColumnName("MONTH12DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt01)
                    .HasColumnName("NETTAXAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt02)
                    .HasColumnName("NETTAXAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt03)
                    .HasColumnName("NETTAXAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt04)
                    .HasColumnName("NETTAXAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt05)
                    .HasColumnName("NETTAXAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt06)
                    .HasColumnName("NETTAXAMT06")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt07)
                    .HasColumnName("NETTAXAMT07")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt08)
                    .HasColumnName("NETTAXAMT08")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt09)
                    .HasColumnName("NETTAXAMT09")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt10)
                    .HasColumnName("NETTAXAMT10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate01)
                    .HasColumnName("NETTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate02)
                    .HasColumnName("NETTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate03)
                    .HasColumnName("NETTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate04)
                    .HasColumnName("NETTAXRATE04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate05)
                    .HasColumnName("NETTAXRATE05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nextyearday)
                    .HasColumnName("NEXTYEARDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.NobrLen).HasColumnName("NOBR_LEN");

                entity.Property(e => e.NobrPos).HasColumnName("NOBR_POS");

                entity.Property(e => e.Notaxsalcode)
                    .HasColumnName("NOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nretirerate)
                    .HasColumnName("NRETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Nretirerate1)
                    .HasColumnName("NRETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ondutyamt)
                    .HasColumnName("ONDUTYAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutysalcode)
                    .HasColumnName("ONDUTYSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode)
                    .HasColumnName("OTFOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode1)
                    .HasColumnName("OTFOODSALCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ottrasalcode)
                    .HasColumnName("OTTRASALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit)
                    .HasColumnName("OTUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Retirerate)
                    .HasColumnName("RETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate1)
                    .HasColumnName("RETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retsalcode)
                    .HasColumnName("RETSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salarydedutamt)
                    .HasColumnName("SALARYDEDUTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Sendmail)
                    .HasColumnName("SENDMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.SerLen).HasColumnName("SER_LEN");

                entity.Property(e => e.SerPos).HasColumnName("SER_POS");

                entity.Property(e => e.Smtpid)
                    .HasColumnName("SMTPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtppw)
                    .HasColumnName("SMTPPW")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpserver)
                    .HasColumnName("SMTPSERVER")
                    .HasMaxLength(50);

                entity.Property(e => e.Specialcaltype).HasColumnName("SPECIALCALTYPE");

                entity.Property(e => e.Stdeduetamtmar)
                    .HasColumnName("STDEDUETAMTMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtnmar)
                    .HasColumnName("STDEDUETAMTNMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Sysdisk)
                    .HasColumnName("SYSDISK")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxamtamonth)
                    .HasColumnName("TAXAMTAMONTH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70down)
                    .HasColumnName("TAXFREE70DOWN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70up)
                    .HasColumnName("TAXFREE70UP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxsalcode)
                    .HasColumnName("TAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");

                entity.Property(e => e.TimeLen).HasColumnName("TIME_LEN");

                entity.Property(e => e.TimePos).HasColumnName("TIME_POS");

                entity.Property(e => e.Totaxsalcode)
                    .HasColumnName("TOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Vacationdays01)
                    .HasColumnName("VACATIONDAYS01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays02)
                    .HasColumnName("VACATIONDAYS02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays03)
                    .HasColumnName("VACATIONDAYS03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays04)
                    .HasColumnName("VACATIONDAYS04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Welpay)
                    .HasColumnName("WELPAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Welsalcode)
                    .HasColumnName("WELSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Year01)
                    .HasColumnName("YEAR01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year02)
                    .HasColumnName("YEAR02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year03)
                    .HasColumnName("YEAR03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year04)
                    .HasColumnName("YEAR04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year0efftype1).HasColumnName("YEAR0EFFTYPE1");

                entity.Property(e => e.Year0efftype2).HasColumnName("YEAR0EFFTYPE2");

                entity.Property(e => e.Year0efftype3).HasColumnName("YEAR0EFFTYPE3");

                entity.Property(e => e.Year0efftype4).HasColumnName("YEAR0EFFTYPE4");

                entity.Property(e => e.Year0type1).HasColumnName("YEAR0TYPE1");

                entity.Property(e => e.Year0type2).HasColumnName("YEAR0TYPE2");

                entity.Property(e => e.Year0type3).HasColumnName("YEAR0TYPE3");

                entity.Property(e => e.Year0type4).HasColumnName("YEAR0TYPE4");

                entity.Property(e => e.Year11)
                    .HasColumnName("YEAR11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year12)
                    .HasColumnName("YEAR12")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year21)
                    .HasColumnName("YEAR21")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year22)
                    .HasColumnName("YEAR22")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year31)
                    .HasColumnName("YEAR31")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year32)
                    .HasColumnName("YEAR32")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year41)
                    .HasColumnName("YEAR41")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year42)
                    .HasColumnName("YEAR42")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year51)
                    .HasColumnName("YEAR51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yearbase).HasColumnName("YEARBASE");
            });

            modelBuilder.Entity<USys1>(entity =>
            {
                entity.HasKey(e => e.Comp)
                    .HasName("PK_U_SYS1_1");

                entity.ToTable("U_SYS1");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Compaddr)
                    .HasColumnName("COMPADDR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Company1)
                    .HasColumnName("COMPANY1")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankac)
                    .HasColumnName("COMPANYBANKAC")
                    .HasMaxLength(50);

                entity.Property(e => e.Companybankno)
                    .HasColumnName("COMPANYBANKNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Compfax)
                    .HasColumnName("COMPFAX")
                    .HasMaxLength(50);

                entity.Property(e => e.Comphelid)
                    .HasColumnName("COMPHELID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid)
                    .HasColumnName("COMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compid1)
                    .HasColumnName("COMPID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Complabid)
                    .HasColumnName("COMPLABID")
                    .HasMaxLength(50);

                entity.Property(e => e.Compman)
                    .HasColumnName("COMPMAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Comptel)
                    .HasColumnName("COMPTEL")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff0407)
                    .HasColumnName("FF0407")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff04071)
                    .HasColumnName("FF04071")
                    .HasMaxLength(50);

                entity.Property(e => e.Ff103)
                    .HasColumnName("FF103")
                    .HasMaxLength(50);

                entity.Property(e => e.Helorgname)
                    .HasColumnName("HELORGNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys10>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS10");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Sendmail)
                    .HasColumnName("SENDMAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpid)
                    .HasColumnName("SMTPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtppw)
                    .HasColumnName("SMTPPW")
                    .HasMaxLength(50);

                entity.Property(e => e.Smtpserver)
                    .HasColumnName("SMTPSERVER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys2>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS2");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Attamt)
                    .HasColumnName("ATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attamt1)
                    .HasColumnName("ATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attawardsalcode)
                    .HasColumnName("ATTAWARDSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Attmonamt)
                    .HasColumnName("ATTMONAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attmonth).HasColumnName("ATTMONTH");

                entity.Property(e => e.Attqty)
                    .HasColumnName("ATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Attqty1)
                    .HasColumnName("ATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Eatsalcode)
                    .HasColumnName("EATSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Empsalcode)
                    .HasColumnName("EMPSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Fattamt)
                    .HasColumnName("FATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattamt1)
                    .HasColumnName("FATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty)
                    .HasColumnName("FATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fattqty1)
                    .HasColumnName("FATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Foodsalcode)
                    .HasColumnName("FOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Inday).HasColumnName("INDAY");

                entity.Property(e => e.Lattamt)
                    .HasColumnName("LATTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattamt1)
                    .HasColumnName("LATTAMT1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty)
                    .HasColumnName("LATTQTY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Lattqty1)
                    .HasColumnName("LATTQTY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutyamt)
                    .HasColumnName("ONDUTYAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Ondutysalcode)
                    .HasColumnName("ONDUTYSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Salmonth).HasColumnName("SALMONTH");

                entity.Property(e => e.Welpay)
                    .HasColumnName("WELPAY")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Welsalcode)
                    .HasColumnName("WELSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys3>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS3");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Femalemaxhrs)
                    .HasColumnName("FEMALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Malemaxhrs)
                    .HasColumnName("MALEMAXHRS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Notaxsalcode)
                    .HasColumnName("NOTAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode)
                    .HasColumnName("OTFOODSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otfoodsalcode1)
                    .HasColumnName("OTFOODSALCODE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Ottrasalcode)
                    .HasColumnName("OTTRASALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Otunit)
                    .HasColumnName("OTUNIT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Totaxsalcode)
                    .HasColumnName("TOTAXSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys4>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS4");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Laboversalcode)
                    .HasColumnName("LABOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Labrepairsalcode)
                    .HasColumnName("LABREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Ljobper)
                    .HasColumnName("LJOBPER")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Ljobper1)
                    .HasColumnName("LJOBPER1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Lsalcode)
                    .HasColumnName("LSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Nretirerate)
                    .HasColumnName("NRETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Nretirerate1)
                    .HasColumnName("NRETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate)
                    .HasColumnName("RETIRERATE")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retirerate1)
                    .HasColumnName("RETIRERATE1")
                    .HasColumnType("decimal(16, 3)");

                entity.Property(e => e.Retsalcode)
                    .HasColumnName("RETSALCODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys5>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS5");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Bonusyearratemax)
                    .HasColumnName("BONUSYEARRATEMAX")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Compersoncnt)
                    .HasColumnName("COMPERSONCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Empfamilycnt)
                    .HasColumnName("EMPFAMILYCNT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Heacomprate)
                    .HasColumnName("HEACOMPRATE")
                    .HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Healthoversalcode)
                    .HasColumnName("HEALTHOVERSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Healthrepairsalcode)
                    .HasColumnName("HEALTHREPAIRSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hsalcode)
                    .HasColumnName("HSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplehinslabsalcode)
                    .HasColumnName("SUPPLEHINSLABSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Suppleinslabrate)
                    .HasColumnName("SUPPLEINSLABRATE")
                    .HasColumnType("decimal(16, 4)");
            });

            modelBuilder.Entity<USys6>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS6");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Groupexp1)
                    .HasColumnName("GROUPEXP1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp2)
                    .HasColumnName("GROUPEXP2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp51)
                    .HasColumnName("GROUPEXP51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupexp52)
                    .HasColumnName("GROUPEXP52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Groupsalcd)
                    .HasColumnName("GROUPSALCD")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys7>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("U_SYS7");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CardName)
                    .HasColumnName("CARD_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Carddateformat)
                    .HasColumnName("CARDDATEFORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Cardnoeuqalnobr).HasColumnName("CARDNOEUQALNOBR");

                entity.Property(e => e.CodeLen).HasColumnName("CODE_LEN");

                entity.Property(e => e.CodePos).HasColumnName("CODE_POS");

                entity.Property(e => e.DateFormat)
                    .HasColumnName("DATE_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.DateLen).HasColumnName("DATE_LEN");

                entity.Property(e => e.DatePos).HasColumnName("DATE_POS");

                entity.Property(e => e.IgnoreSignal)
                    .HasColumnName("IGNORE_SIGNAL")
                    .HasMaxLength(50);

                entity.Property(e => e.NobrLen).HasColumnName("NOBR_LEN");

                entity.Property(e => e.NobrPos).HasColumnName("NOBR_POS");

                entity.Property(e => e.SerLen).HasColumnName("SER_LEN");

                entity.Property(e => e.SerPos).HasColumnName("SER_POS");

                entity.Property(e => e.SpiltSignal)
                    .HasColumnName("SPILT_SIGNAL")
                    .HasMaxLength(50);

                entity.Property(e => e.TextType)
                    .HasColumnName("TEXT_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.TimeFormat)
                    .HasColumnName("TIME_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.TimeLen).HasColumnName("TIME_LEN");

                entity.Property(e => e.TimePos).HasColumnName("TIME_POS");
            });

            modelBuilder.Entity<USys7a>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("U_SYS7A");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.CardName)
                    .IsRequired()
                    .HasColumnName("CARD_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColAdate)
                    .HasColumnName("COL_ADATE")
                    .HasMaxLength(50);

                entity.Property(e => e.ColCardno)
                    .HasColumnName("COL_CARDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.ColChecktime)
                    .HasColumnName("COL_CHECKTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColIpadd)
                    .HasColumnName("COL_IPADD")
                    .HasMaxLength(50);

                entity.Property(e => e.ColNobr)
                    .HasColumnName("COL_NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.ColOntime)
                    .HasColumnName("COL_ONTIME")
                    .HasMaxLength(50);

                entity.Property(e => e.ColSource)
                    .HasColumnName("COL_SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.DataSource)
                    .IsRequired()
                    .HasColumnName("DATA_SOURCE")
                    .HasMaxLength(50);

                entity.Property(e => e.Datatable)
                    .IsRequired()
                    .HasColumnName("DATATABLE")
                    .HasMaxLength(50);

                entity.Property(e => e.InitailCatalog)
                    .IsRequired()
                    .HasColumnName("INITAIL_CATALOG")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.LatestCheck)
                    .HasColumnName("LATEST_CHECK")
                    .HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.Sql)
                    .HasColumnName("SQL")
                    .HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<USys8>(entity =>
            {
                entity.HasKey(e => e.Comp)
                    .HasName("PK_U_SYS8_1");

                entity.ToTable("U_SYS8");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Maxdays).HasColumnName("MAXDAYS");

                entity.Property(e => e.Month01day1)
                    .HasColumnName("MONTH01DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day2)
                    .HasColumnName("MONTH01DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day3)
                    .HasColumnName("MONTH01DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day4)
                    .HasColumnName("MONTH01DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month01day5)
                    .HasColumnName("MONTH01DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day1)
                    .HasColumnName("MONTH02DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day2)
                    .HasColumnName("MONTH02DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day3)
                    .HasColumnName("MONTH02DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day4)
                    .HasColumnName("MONTH02DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month02day5)
                    .HasColumnName("MONTH02DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day1)
                    .HasColumnName("MONTH03DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day2)
                    .HasColumnName("MONTH03DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day3)
                    .HasColumnName("MONTH03DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day4)
                    .HasColumnName("MONTH03DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month03day5)
                    .HasColumnName("MONTH03DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day1)
                    .HasColumnName("MONTH04DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day2)
                    .HasColumnName("MONTH04DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day3)
                    .HasColumnName("MONTH04DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day4)
                    .HasColumnName("MONTH04DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month04day5)
                    .HasColumnName("MONTH04DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day1)
                    .HasColumnName("MONTH05DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day2)
                    .HasColumnName("MONTH05DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day3)
                    .HasColumnName("MONTH05DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day4)
                    .HasColumnName("MONTH05DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month05day5)
                    .HasColumnName("MONTH05DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day1)
                    .HasColumnName("MONTH06DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day2)
                    .HasColumnName("MONTH06DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day3)
                    .HasColumnName("MONTH06DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day4)
                    .HasColumnName("MONTH06DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month06day5)
                    .HasColumnName("MONTH06DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day1)
                    .HasColumnName("MONTH07DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day2)
                    .HasColumnName("MONTH07DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day3)
                    .HasColumnName("MONTH07DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day4)
                    .HasColumnName("MONTH07DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month07day5)
                    .HasColumnName("MONTH07DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day1)
                    .HasColumnName("MONTH08DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day2)
                    .HasColumnName("MONTH08DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day3)
                    .HasColumnName("MONTH08DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day4)
                    .HasColumnName("MONTH08DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month08day5)
                    .HasColumnName("MONTH08DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day1)
                    .HasColumnName("MONTH09DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day2)
                    .HasColumnName("MONTH09DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day3)
                    .HasColumnName("MONTH09DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day4)
                    .HasColumnName("MONTH09DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month09day5)
                    .HasColumnName("MONTH09DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day1)
                    .HasColumnName("MONTH10DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day2)
                    .HasColumnName("MONTH10DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day3)
                    .HasColumnName("MONTH10DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day4)
                    .HasColumnName("MONTH10DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month10day5)
                    .HasColumnName("MONTH10DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day1)
                    .HasColumnName("MONTH11DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day2)
                    .HasColumnName("MONTH11DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day3)
                    .HasColumnName("MONTH11DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day4)
                    .HasColumnName("MONTH11DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month11day5)
                    .HasColumnName("MONTH11DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day1)
                    .HasColumnName("MONTH12DAY1")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day2)
                    .HasColumnName("MONTH12DAY2")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day3)
                    .HasColumnName("MONTH12DAY3")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day4)
                    .HasColumnName("MONTH12DAY4")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Month12day5)
                    .HasColumnName("MONTH12DAY5")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nextyearday)
                    .HasColumnName("NEXTYEARDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Specialcaltype).HasColumnName("SPECIALCALTYPE");

                entity.Property(e => e.Vacationdays01)
                    .HasColumnName("VACATIONDAYS01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays02)
                    .HasColumnName("VACATIONDAYS02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays03)
                    .HasColumnName("VACATIONDAYS03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays04)
                    .HasColumnName("VACATIONDAYS04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Vacationdays05)
                    .HasColumnName("VACATIONDAYS05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year01)
                    .HasColumnName("YEAR01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year02)
                    .HasColumnName("YEAR02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year03)
                    .HasColumnName("YEAR03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year04)
                    .HasColumnName("YEAR04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year05)
                    .HasColumnName("YEAR05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year0efftype1).HasColumnName("YEAR0EFFTYPE1");

                entity.Property(e => e.Year0efftype2).HasColumnName("YEAR0EFFTYPE2");

                entity.Property(e => e.Year0efftype3).HasColumnName("YEAR0EFFTYPE3");

                entity.Property(e => e.Year0efftype4).HasColumnName("YEAR0EFFTYPE4");

                entity.Property(e => e.Year0efftype5).HasColumnName("YEAR0EFFTYPE5");

                entity.Property(e => e.Year0type1).HasColumnName("YEAR0TYPE1");

                entity.Property(e => e.Year0type2).HasColumnName("YEAR0TYPE2");

                entity.Property(e => e.Year0type3).HasColumnName("YEAR0TYPE3");

                entity.Property(e => e.Year0type4).HasColumnName("YEAR0TYPE4");

                entity.Property(e => e.Year0type5).HasColumnName("YEAR0TYPE5");

                entity.Property(e => e.Year11)
                    .HasColumnName("YEAR11")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year12)
                    .HasColumnName("YEAR12")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year21)
                    .HasColumnName("YEAR21")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year22)
                    .HasColumnName("YEAR22")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year31)
                    .HasColumnName("YEAR31")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year32)
                    .HasColumnName("YEAR32")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year41)
                    .HasColumnName("YEAR41")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year42)
                    .HasColumnName("YEAR42")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year51)
                    .HasColumnName("YEAR51")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year52)
                    .HasColumnName("YEAR52")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Year61)
                    .HasColumnName("YEAR61")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Yearbase).HasColumnName("YEARBASE");
            });

            modelBuilder.Entity<USys9>(entity =>
            {
                entity.HasKey(e => e.Comp);

                entity.ToTable("U_SYS9");

                entity.Property(e => e.Comp).HasMaxLength(50);

                entity.Property(e => e.Addupamt01)
                    .HasColumnName("ADDUPAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt02)
                    .HasColumnName("ADDUPAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt03)
                    .HasColumnName("ADDUPAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt04)
                    .HasColumnName("ADDUPAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Addupamt05)
                    .HasColumnName("ADDUPAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Entryday)
                    .HasColumnName("ENTRYDAY")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fixtaxrate)
                    .HasColumnName("FIXTAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Forsalbasd)
                    .HasColumnName("FORSALBASD")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate01)
                    .HasColumnName("FORTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate02)
                    .HasColumnName("FORTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Fortaxrate03)
                    .HasColumnName("FORTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt01)
                    .HasColumnName("NETTAXAMT01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt02)
                    .HasColumnName("NETTAXAMT02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt03)
                    .HasColumnName("NETTAXAMT03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt04)
                    .HasColumnName("NETTAXAMT04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt05)
                    .HasColumnName("NETTAXAMT05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt06)
                    .HasColumnName("NETTAXAMT06")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt07)
                    .HasColumnName("NETTAXAMT07")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt08)
                    .HasColumnName("NETTAXAMT08")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt09)
                    .HasColumnName("NETTAXAMT09")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxamt10)
                    .HasColumnName("NETTAXAMT10")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate01)
                    .HasColumnName("NETTAXRATE01")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate02)
                    .HasColumnName("NETTAXRATE02")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate03)
                    .HasColumnName("NETTAXRATE03")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate04)
                    .HasColumnName("NETTAXRATE04")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Nettaxrate05)
                    .HasColumnName("NETTAXRATE05")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Salarydedutamt)
                    .HasColumnName("SALARYDEDUTAMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtmar)
                    .HasColumnName("STDEDUETAMTMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Stdeduetamtnmar)
                    .HasColumnName("STDEDUETAMTNMAR")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxamtamonth)
                    .HasColumnName("TAXAMTAMONTH")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70down)
                    .HasColumnName("TAXFREE70DOWN")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxfree70up)
                    .HasColumnName("TAXFREE70UP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Taxsalcode)
                    .HasColumnName("TAXSALCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Taxtype).HasColumnName("TAXTYPE");
            });

            modelBuilder.Entity<UTts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_TTS");

                entity.Property(e => e.Cont)
                    .IsRequired()
                    .HasColumnName("CONT")
                    .HasColumnType("text");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyTime)
                    .IsRequired()
                    .HasColumnName("KEY_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OpCode).HasColumnName("OP_CODE");

                entity.Property(e => e.PrgName)
                    .IsRequired()
                    .HasColumnName("PRG_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UUser>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.System })
                    .HasName("PK_U_USER_1");

                entity.ToTable("U_USER");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.Admin).HasColumnName("ADMIN");

                entity.Property(e => e.EMail)
                    .IsRequired()
                    .HasColumnName("E_MAIL")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mangsuper).HasColumnName("MANGSUPER");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasMaxLength(50);

                entity.Property(e => e.Procsuper).HasColumnName("PROCSUPER");

                entity.Property(e => e.Super).HasColumnName("SUPER");

                entity.Property(e => e.Workadr)
                    .IsRequired()
                    .HasColumnName("WORKADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UUsercomp>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Company })
                    .HasName("PK_DATAGG2_1");

                entity.ToTable("U_USERCOMP");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.UUsercomp)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_U_USERCOMP_COMP");
            });

            modelBuilder.Entity<UWkid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("U_WKID");

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("USER_ID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkCode)
                    .IsRequired()
                    .HasColumnName("WORK_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UNIT");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<UpBaseRecord>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Updescr)
                    .IsRequired()
                    .HasColumnName("UPDESCR")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Upfile>(entity =>
            {
                entity.HasKey(e => e.Autokey);

                entity.ToTable("UPFILE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Filedesc)
                    .IsRequired()
                    .HasColumnName("FILEDESC")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Filesize)
                    .IsRequired()
                    .HasColumnName("FILESIZE")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Filetype)
                    .IsRequired()
                    .HasColumnName("FILETYPE")
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Newsfileid)
                    .IsRequired()
                    .HasColumnName("NEWSFILEID")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Serverfilename)
                    .IsRequired()
                    .HasColumnName("SERVERFILENAME")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Upfiledate)
                    .HasColumnName("UPFILEDATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Upfilename)
                    .IsRequired()
                    .HasColumnName("UPFILENAME")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Uptype)
                    .IsRequired()
                    .HasColumnName("UPTYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Uptype>(entity =>
            {
                entity.HasKey(e => e.Uptype1);

                entity.ToTable("UPTYPE");

                entity.Property(e => e.Uptype1)
                    .HasColumnName("UPTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.UpName)
                    .IsRequired()
                    .HasColumnName("UP_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserDefine>(entity =>
            {
                entity.HasKey(e => e.Nobr);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime1)
                    .HasColumnName("DATETIME1")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime10)
                    .HasColumnName("DATETIME10")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime2)
                    .HasColumnName("DATETIME2")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime3)
                    .HasColumnName("DATETIME3")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime4)
                    .HasColumnName("DATETIME4")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime5)
                    .HasColumnName("DATETIME5")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime6)
                    .HasColumnName("DATETIME6")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime7)
                    .HasColumnName("DATETIME7")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime8)
                    .HasColumnName("DATETIME8")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Datetime9)
                    .HasColumnName("DATETIME9")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Decimal1)
                    .HasColumnName("DECIMAL1")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal10)
                    .HasColumnName("DECIMAL10")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal2)
                    .HasColumnName("DECIMAL2")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal3)
                    .HasColumnName("DECIMAL3")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal4)
                    .HasColumnName("DECIMAL4")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal5)
                    .HasColumnName("DECIMAL5")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal6)
                    .HasColumnName("DECIMAL6")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal7)
                    .HasColumnName("DECIMAL7")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal8)
                    .HasColumnName("DECIMAL8")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Decimal9)
                    .HasColumnName("DECIMAL9")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('1900/01/01')");

                entity.Property(e => e.Nvarchar1)
                    .IsRequired()
                    .HasColumnName("NVARCHAR1")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar10)
                    .IsRequired()
                    .HasColumnName("NVARCHAR10")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar2)
                    .IsRequired()
                    .HasColumnName("NVARCHAR2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar3)
                    .IsRequired()
                    .HasColumnName("NVARCHAR3")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar4)
                    .IsRequired()
                    .HasColumnName("NVARCHAR4")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar5)
                    .IsRequired()
                    .HasColumnName("NVARCHAR5")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar6)
                    .IsRequired()
                    .HasColumnName("NVARCHAR6")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar7)
                    .IsRequired()
                    .HasColumnName("NVARCHAR7")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar8)
                    .IsRequired()
                    .HasColumnName("NVARCHAR8")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nvarchar9)
                    .IsRequired()
                    .HasColumnName("NVARCHAR9")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Userdefinegroup>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINEGROUP");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Columncnt).HasColumnName("COLUMNCNT");

                entity.Property(e => e.Itemsheight).HasColumnName("ITEMSHEIGHT");

                entity.Property(e => e.Itemswidth).HasColumnName("ITEMSWIDTH");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(500);

                entity.Property(e => e.Rowcnt).HasColumnName("ROWCNT");

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Userdefinegroupname)
                    .HasColumnName("USERDEFINEGROUPNAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Userdefinelayout>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINELAYOUT");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Anchor)
                    .HasColumnName("ANCHOR")
                    .HasMaxLength(50);

                entity.Property(e => e.Columnspan).HasColumnName("COLUMNSPAN");

                entity.Property(e => e.Controlid).HasColumnName("CONTROLID");

                entity.Property(e => e.Dock)
                    .HasColumnName("DOCK")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Layoutcolumn).HasColumnName("LAYOUTCOLUMN");

                entity.Property(e => e.Layoutrow).HasColumnName("LAYOUTROW");

                entity.Property(e => e.Rowspan).HasColumnName("ROWSPAN");

                entity.Property(e => e.Tag).HasColumnName("TAG");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Userdefinegroupid).HasColumnName("USERDEFINEGROUPID");

                entity.Property(e => e.Visible).HasColumnName("VISIBLE");
            });

            modelBuilder.Entity<Userdefinesource>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINESOURCE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Displaymember)
                    .HasColumnName("DISPLAYMEMBER")
                    .HasMaxLength(100);

                entity.Property(e => e.Sourceid).HasColumnName("SOURCEID");

                entity.Property(e => e.Sourcename)
                    .IsRequired()
                    .HasColumnName("SOURCENAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Sourcescript).HasColumnName("SOURCESCRIPT");

                entity.Property(e => e.Sourcetype)
                    .IsRequired()
                    .HasColumnName("SOURCETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valuemember)
                    .HasColumnName("VALUEMEMBER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Userdefinevalue>(entity =>
            {
                entity.HasKey(e => e.Ak);

                entity.ToTable("USERDEFINEVALUE");

                entity.Property(e => e.Ak).HasColumnName("AK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Controlid).HasColumnName("CONTROLID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Sourceid).HasColumnName("SOURCEID");

                entity.Property(e => e.Value)
                    .HasColumnName("VALUE")
                    .HasMaxLength(50);

                entity.Property(e => e.Valuetype)
                    .IsRequired()
                    .HasColumnName("VALUETYPE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE");

                entity.Property(e => e.Idno)
                    .IsRequired()
                    .HasColumnName("IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.NameE)
                    .IsRequired()
                    .HasColumnName("NAME_E")
                    .HasMaxLength(50);

                entity.Property(e => e.NameP)
                    .IsRequired()
                    .HasColumnName("NAME_P")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAbswriteoff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_ABSWRITEOFF");

                entity.Property(e => e.假別).HasMaxLength(50);

                entity.Property(e => e.假別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.假別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.單位)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.屬性)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.扣款金額).HasMaxLength(50);

                entity.Property(e => e.班別).HasMaxLength(50);

                entity.Property(e => e.班別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.編號).HasMaxLength(50);

                entity.Property(e => e.計薪年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.請假日期).HasColumnType("datetime");

                entity.Property(e => e.請假時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.請假起)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.請假迄)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewEmployeeLanaguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeLanaguage");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Lanaguage)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewRotechg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_ROTECHG");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.班別代碼).HasMaxLength(50);

                entity.Property(e => e.班別名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.調班日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewTwTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TW_TAX");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.啟用查詢日期).HasColumnType("datetime");

                entity.Property(e => e.年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.標題)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.結束日期).HasColumnType("datetime");

                entity.Property(e => e.編號).ValueGeneratedOnAdd();

                entity.Property(e => e.起始日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewTwTaxItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TW_TAX_ITEM");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.來源)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.公司)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.公司名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得格式)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得註記).HasMaxLength(50);

                entity.Property(e => e.扣繳稅額).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.期別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.稅籍編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.給付總額).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.自提退休金).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ViewTwTaxSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TW_TAX_SUMMARY");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.公司別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.公司名稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.公司統編)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.勞退自提).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.媒體代號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得格式)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.所得註記).HasMaxLength(50);

                entity.Property(e => e.扣繳稅額).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.機關別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.流水號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.登錄日期).HasColumnType("datetime");

                entity.Property(e => e.登錄者)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.稅籍編號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.給付總額).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.證號別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.錯誤註記)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<Wage>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Nobr });

                entity.ToTable("WAGE");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AttDateb)
                    .HasColumnName("ATT_DATEB")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDatee)
                    .HasColumnName("ATT_DATEE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deduct)
                    .HasColumnName("DEDUCT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkDays)
                    .HasColumnName("WK_DAYS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WageB>(entity =>
            {
                entity.HasKey(e => new { e.Yymm, e.Seq, e.Nobr });

                entity.ToTable("WAGE_B");

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AttDateb)
                    .HasColumnName("ATT_DATEB")
                    .HasColumnType("datetime");

                entity.Property(e => e.AttDatee)
                    .HasColumnName("ATT_DATEE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankno)
                    .IsRequired()
                    .HasColumnName("BANKNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateB)
                    .HasColumnName("DATE_B")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateE)
                    .HasColumnName("DATE_E")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Taxrate)
                    .HasColumnName("TAXRATE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WkDays)
                    .HasColumnName("WK_DAYS")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Waged>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("WAGED");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WagedB>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.SalCode });

                entity.ToTable("WAGED_B");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<WagedSal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WagedSal");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasColumnName("FLAG")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.SalEname)
                    .IsRequired()
                    .HasColumnName("SAL_ENAME")
                    .HasMaxLength(60);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("SAL_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Salattr)
                    .IsRequired()
                    .HasColumnName("SALATTR")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wagedd>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Yymm, e.Seq, e.Acno });

                entity.ToTable("WAGEDD");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Yymm)
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);

                entity.Property(e => e.Seq)
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Acno)
                    .HasColumnName("ACNO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wagesos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WAGESOS");

                entity.Property(e => e.Field)
                    .IsRequired()
                    .HasColumnName("FIELD")
                    .HasMaxLength(50);

                entity.Property(e => e.SosDescr)
                    .IsRequired()
                    .HasColumnName("SOS_DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.SosId)
                    .IsRequired()
                    .HasColumnName("SOS_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Subsystem)
                    .IsRequired()
                    .HasColumnName("SUBSYSTEM")
                    .HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasColumnName("SYSTEM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Wbsptyp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WBSPTYP");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Wcode>(entity =>
            {
                entity.HasKey(e => e.WCode1);

                entity.ToTable("WCODE");

                entity.Property(e => e.WCode1)
                    .HasColumnName("W_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.WName)
                    .IsRequired()
                    .HasColumnName("W_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Websalbasd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("websalbasd");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("key_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("key_man")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("sal_code")
                    .HasMaxLength(50);

                entity.Property(e => e.SalName)
                    .IsRequired()
                    .HasColumnName("sal_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Welf>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.ToTable("WELF");

                entity.Property(e => e.Auto).HasColumnName("AUTO");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.DAmt)
                    .HasColumnName("D_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.SalCode)
                    .IsRequired()
                    .HasColumnName("SAL_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Seq)
                    .IsRequired()
                    .HasColumnName("SEQ")
                    .HasMaxLength(50);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasColumnName("TR_TYPE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Yymm)
                    .IsRequired()
                    .HasColumnName("YYMM")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Workcd>(entity =>
            {
                entity.HasKey(e => e.WorkCode);

                entity.ToTable("WORKCD");

                entity.Property(e => e.WorkCode)
                    .HasColumnName("WORK_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkAddr)
                    .IsRequired()
                    .HasColumnName("WORK_ADDR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Works>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Company, e.Bdate });

                entity.ToTable("WORKS");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasMaxLength(50);

                entity.Property(e => e.Bdate)
                    .HasColumnName("BDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addr)
                    .IsRequired()
                    .HasColumnName("ADDR")
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DirTitle)
                    .IsRequired()
                    .HasColumnName("DIR_TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Edate)
                    .HasColumnName("EDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.InCabinet).HasColumnName("IN_CABINET");

                entity.Property(e => e.InMark).HasColumnName("IN_MARK");

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasColumnName("JOB")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasMaxLength(300)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.People)
                    .HasColumnName("PEOPLE")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.SecTitle)
                    .IsRequired()
                    .HasColumnName("SEC_TITLE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelNo)
                    .IsRequired()
                    .HasColumnName("TEL_NO")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(50);

                entity.Property(e => e.TradeCode)
                    .IsRequired()
                    .HasColumnName("TRADE_CODE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Volume)
                    .HasColumnName("VOLUME")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.WorkId).HasColumnName("work_id");
            });

            modelBuilder.Entity<Writerulenobrtable>(entity =>
            {
                entity.HasKey(e => e.Autokey)
                    .HasName("PK__WRITERUL__FE925FC12A80B4DA");

                entity.ToTable("WRITERULENOBRTABLE");

                entity.Property(e => e.Autokey).HasColumnName("AUTOKEY");

                entity.Property(e => e.Empid)
                    .IsRequired()
                    .HasColumnName("EMPID")
                    .HasMaxLength(50);

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<YearHoliday>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Years });

                entity.ToTable("YEAR_HOLIDAY");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Years)
                    .HasColumnName("YEARS")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BackDate)
                    .HasColumnName("BACK_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dept)
                    .IsRequired()
                    .HasColumnName("DEPT")
                    .HasMaxLength(50);

                entity.Property(e => e.GetDays)
                    .HasColumnName("GET_DAYS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Indt)
                    .HasColumnName("INDT")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasMaxLength(50);

                entity.Property(e => e.Note1)
                    .HasColumnName("NOTE1")
                    .HasMaxLength(50);

                entity.Property(e => e.Note2)
                    .HasColumnName("NOTE2")
                    .HasMaxLength(50);

                entity.Property(e => e.Note3)
                    .HasColumnName("NOTE3")
                    .HasMaxLength(50);

                entity.Property(e => e.Note4)
                    .HasColumnName("NOTE4")
                    .HasMaxLength(50);

                entity.Property(e => e.Note5)
                    .HasColumnName("NOTE5")
                    .HasMaxLength(50);

                entity.Property(e => e.Ntrans).HasColumnName("NTRANS");

                entity.Property(e => e.Ptrans).HasColumnName("PTRANS");

                entity.Property(e => e.StopDate)
                    .HasColumnName("STOP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.StopTimes).HasColumnName("STOP_TIMES");

                entity.Property(e => e.StopYears)
                    .HasColumnName("STOP_YEARS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Syscreat).HasColumnName("SYSCREAT");

                entity.Property(e => e.TotalYears)
                    .HasColumnName("TOTAL_YEARS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("UNIT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<YearRest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YEAR_REST");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Yrermak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRERMAK");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.Errmark)
                    .IsRequired()
                    .HasColumnName("ERRMARK")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrerr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRERR");

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(50);

                entity.Property(e => e.ErrNote)
                    .IsRequired()
                    .HasColumnName("ERR_NOTE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrfomat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YRFOMAT");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Display).HasColumnName("DISPLAY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(200);

                entity.Property(e => e.Sort).HasColumnName("SORT");
            });

            modelBuilder.Entity<Yrformat>(entity =>
            {
                entity.HasKey(e => e.MFormat);

                entity.ToTable("YRFORMAT");

                entity.Property(e => e.MFormat)
                    .HasColumnName("M_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixrate)
                    .HasColumnName("FIXRATE")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Incometype)
                    .IsRequired()
                    .HasColumnName("INCOMETYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.MFmtName)
                    .IsRequired()
                    .HasColumnName("M_FMT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplemax)
                    .HasColumnName("SUPPLEMAX")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Supplemin)
                    .HasColumnName("SUPPLEMIN")
                    .HasColumnType("decimal(14, 4)");
            });

            modelBuilder.Entity<Yrforsub>(entity =>
            {
                entity.HasKey(e => e.MForsub);

                entity.ToTable("YRFORSUB");

                entity.Property(e => e.MForsub)
                    .HasColumnName("M_FORSUB")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MFormat)
                    .IsRequired()
                    .HasColumnName("M_FORMAT")
                    .HasMaxLength(50);

                entity.Property(e => e.MSubName)
                    .IsRequired()
                    .HasColumnName("M_SUB_NAME")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrhsn>(entity =>
            {
                entity.HasKey(e => new { e.CoCtid, e.CoArid });

                entity.ToTable("YRHSN");

                entity.Property(e => e.CoCtid)
                    .HasColumnName("CO_CTID")
                    .HasMaxLength(50);

                entity.Property(e => e.CoArid)
                    .HasColumnName("CO_ARID")
                    .HasMaxLength(50);

                entity.Property(e => e.HHsnName)
                    .IsRequired()
                    .HasColumnName("H_HSN_NAME")
                    .HasMaxLength(62);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Yrid>(entity =>
            {
                entity.HasKey(e => e.IdCode);

                entity.ToTable("YRID");

                entity.Property(e => e.IdCode)
                    .HasColumnName("ID_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("DESCR")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Yrina>(entity =>
            {
                entity.HasKey(e => e.InaId);

                entity.ToTable("YRINA");

                entity.Property(e => e.InaId)
                    .HasColumnName("INA_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InaName)
                    .IsRequired()
                    .HasColumnName("INA_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Yrinsur>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.Nobr, e.FaIdno });

                entity.ToTable("YRINSUR");

                entity.Property(e => e.Year)
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.FaIdno)
                    .HasColumnName("FA_IDNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Equal).HasColumnName("EQUAL");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.RelGrp)
                    .HasColumnName("REL_GRP")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelHel)
                    .HasColumnName("REL_HEL")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelLab)
                    .HasColumnName("REL_LAB")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RelSup)
                    .HasColumnName("REL_SUP")
                    .HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<Yrmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YRMARK");

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.MarkDescr)
                    .IsRequired()
                    .HasColumnName("MARK_DESCR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrtax>(entity =>
            {
                entity.HasKey(e => new { e.Series, e.Id, e.Year });

                entity.ToTable("YRTAX");

                entity.Property(e => e.Series)
                    .HasColumnName("SERIES")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Year)
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasColumnName("ACC_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR_2")
                    .HasMaxLength(60);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasColumnName("BLANK_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Comp)
                    .IsRequired()
                    .HasColumnName("COMP")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ErrMark)
                    .IsRequired()
                    .HasColumnName("ERR_MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Postcode2)
                    .IsRequired()
                    .HasColumnName("POSTCODE2")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelAmt)
                    .HasColumnName("REL_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.RetAmt)
                    .HasColumnName("RET_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOk).HasColumnName("T_OK");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("TAX_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.YearB)
                    .IsRequired()
                    .HasColumnName("YEAR_B")
                    .HasMaxLength(50);

                entity.Property(e => e.YearE)
                    .IsRequired()
                    .HasColumnName("YEAR_E")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Yrwel>(entity =>
            {
                entity.HasKey(e => new { e.Series, e.Id });

                entity.ToTable("YRWEL");

                entity.Property(e => e.Series)
                    .HasColumnName("SERIES")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasColumnName("ACC_NO")
                    .HasMaxLength(50);

                entity.Property(e => e.Addr2)
                    .IsRequired()
                    .HasColumnName("ADDR_2")
                    .HasMaxLength(60);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasColumnName("BLANK_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE")
                    .HasMaxLength(50);

                entity.Property(e => e.ErrMark)
                    .IsRequired()
                    .HasColumnName("ERR_MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.F0103)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.F0407)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasColumnName("FORMAT")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Id1)
                    .IsRequired()
                    .HasColumnName("ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcode)
                    .IsRequired()
                    .HasColumnName("IDCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Mark)
                    .IsRequired()
                    .HasColumnName("MARK")
                    .HasMaxLength(50);

                entity.Property(e => e.NameC)
                    .IsRequired()
                    .HasColumnName("NAME_C")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.RelAmt)
                    .HasColumnName("REL_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Saladr)
                    .IsRequired()
                    .HasColumnName("SALADR")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOk).HasColumnName("T_OK");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("TAX_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TotAmt)
                    .HasColumnName("TOT_AMT")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasColumnName("YEAR")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<人事系統加班資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_加班資料表");

                entity.Property(e => e.上班卡).HasMaxLength(50);

                entity.Property(e => e.下班卡).HasMaxLength(50);

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.出勤班別).HasMaxLength(50);

                entity.Property(e => e.出勤班別名稱).HasMaxLength(50);

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.加班原因).HasMaxLength(50);

                entity.Property(e => e.加班日期).HasColumnType("datetime");

                entity.Property(e => e.加班時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.加班班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班班別名稱).HasMaxLength(50);

                entity.Property(e => e.加班總時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.加班費).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.加班起時間)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.加班迄時間)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別代碼).HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名).HasMaxLength(50);

                entity.Property(e => e.基本薪資).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.工號).HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別).HasMaxLength(50);

                entity.Property(e => e.成本中心).HasMaxLength(50);

                entity.Property(e => e.成本代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼).HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別).HasMaxLength(50);

                entity.Property(e => e.直間接).HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼).HasMaxLength(50);

                entity.Property(e => e.職等代碼).HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼).HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名).HasMaxLength(50);

                entity.Property(e => e.補休時數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.計薪年月)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.部門代碼).HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統員工基本資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工基本資料表");

                entity.Property(e => e.As通訊電話)
                    .IsRequired()
                    .HasColumnName("AS通訊電話")
                    .HasMaxLength(50);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工作地).HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因).HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動失效日).HasColumnType("datetime");

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動生效日).HasColumnType("datetime");

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統員工基本資料表需加異動日>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工基本資料表_需加異動日");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.As通訊電話)
                    .IsRequired()
                    .HasColumnName("as通訊電話")
                    .HasMaxLength(50);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因).HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統員工異動資料表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_員工異動資料表");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.原成本部門).HasMaxLength(50);

                entity.Property(e => e.原成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原職等)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.原部門).HasMaxLength(50);

                entity.Property(e => e.原部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.異動原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後成本部門).HasMaxLength(50);

                entity.Property(e => e.異動後成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職稱)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後職等)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動後部門).HasMaxLength(50);

                entity.Property(e => e.異動後部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<人事系統留停人員報表>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_留停人員報表");

                entity.Property(e => e.As通訊電話)
                    .IsRequired()
                    .HasColumnName("as通訊電話")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.停復日期).HasColumnType("datetime");

                entity.Property(e => e.停薪日期).HasColumnType("datetime");

                entity.Property(e => e.備註)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.公司名稱).HasMaxLength(50);

                entity.Property(e => e.出生日期).HasColumnType("smalldatetime");

                entity.Property(e => e.到職日期).HasColumnType("datetime");

                entity.Property(e => e.員別代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.員別員稱).HasMaxLength(50);

                entity.Property(e => e.員工姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.國籍)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姻婚)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證到期日).HasColumnType("datetime");

                entity.Property(e => e.居留證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.居留證起始日).HasColumnType("datetime");

                entity.Property(e => e.工作地).HasMaxLength(50);

                entity.Property(e => e.工號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.年資).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.性別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.成本部門名稱).HasMaxLength(50);

                entity.Property(e => e.戶籍地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.戶籍郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.戶籍電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.扶養人數).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.狀態)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.班別)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動原因).HasMaxLength(50);

                entity.Property(e => e.異動原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.異動狀態)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.直間接)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職稱).HasMaxLength(50);

                entity.Property(e => e.職稱代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職等名稱).HasMaxLength(50);

                entity.Property(e => e.職類代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.職類名稱).HasMaxLength(50);

                entity.Property(e => e.英文姓名)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.血型)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.行動電話)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.試用期滿日).HasColumnType("datetime");

                entity.Property(e => e.護照號碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份別).HasMaxLength(50);

                entity.Property(e => e.身分證號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳帳號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.轉帳行號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.通訊地址)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.通訊郵遞區號)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.部門名稱).HasMaxLength(50);

                entity.Property(e => e.離職原因)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職原因代碼)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.離職或復職日).HasColumnType("datetime");

                entity.Property(e => e.離職日期).HasColumnType("datetime");
            });

            modelBuilder.Entity<人事系統留停復職日期>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("人事系統_留停復職日期");

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Ttscode)
                    .IsRequired()
                    .HasColumnName("TTSCODE")
                    .HasMaxLength(50);

                entity.Property(e => e.狀態)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.生效日).HasColumnType("datetime");

                entity.Property(e => e.離職或復職日).HasColumnType("datetime");
            });

            modelBuilder.Entity<SysPage>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("sysPage");

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.Property(e => e.IOrder).HasColumnName("iOrder");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SUrl)
                    .HasColumnName("sUrl")
                    .HasMaxLength(500);

                entity.Property(e => e.SName)
                    .HasColumnName("sName")
                    .HasMaxLength(255);

                entity.Property(e => e.SParentKey)
                    .IsRequired()
                    .HasColumnName("sParentKey")
                    .HasMaxLength(200);

                entity.Property(e => e.SPath)
                    .HasColumnName("sPath")
                    .HasMaxLength(255);
            });



            modelBuilder.Entity<SysApiVoid>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("sysApiVoid");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.RoutePath).HasMaxLength(500);
            });

            modelBuilder.Entity<SysPageApiVoid>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("sysPageApiVoid");

                entity.HasIndex(e => new { e.PageCode, e.ApiVoidCode })
                    .HasName("IX_sysPageApiVoid")
                    .IsUnique();

                entity.Property(e => e.ApiVoidCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PageCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysRolePage>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("sysRolePage");

                entity.HasIndex(e => new { e.PageCode, e.RoleCode })
                    .HasName("IX_sysRolePage")
                    .IsUnique();

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.PageCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AttendAbnormal>(entity =>
            {
                entity.HasKey(e => new { e.Nobr, e.Adate, e.Type });

                entity.ToTable("ATTEND_ABNORMAL");

                entity.Property(e => e.Nobr)
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .HasColumnName("CREATE_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.ErrorMins)
                    .HasColumnName("ERROR_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IsError).HasColumnName("IS_ERROR");

                entity.Property(e => e.OffTime)
                    .IsRequired()
                    .HasColumnName("OFF_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OffTimeActual)
                    .IsRequired()
                    .HasColumnName("OFF_TIME_ACTUAL")
                    .HasMaxLength(50);

                entity.Property(e => e.OffTimeBufferMins)
                    .HasColumnName("OFF_TIME_BUFFER_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OnTiemBufferMins)
                    .HasColumnName("ON_TIEM_BUFFER_MINS")
                    .HasColumnType("decimal(16, 2)");

                entity.Property(e => e.OnTime)
                    .IsRequired()
                    .HasColumnName("ON_TIME")
                    .HasMaxLength(50);

                entity.Property(e => e.OnTimeActual)
                    .IsRequired()
                    .HasColumnName("ON_TIME_ACTUAL")
                    .HasMaxLength(50);

                entity.Property(e => e.RoteCode)
                    .IsRequired()
                    .HasColumnName("ROTE_CODE")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateMan)
                    .HasColumnName("UPDATE_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AttendAbnormalCheck>(entity =>
            {
                entity.ToTable("ATTEND_ABNORMAL_CHECK");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adate)
                    .HasColumnName("ADATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasColumnName("CREATE_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasColumnName("REMARK");

                entity.Property(e => e.RemarkType)
                    .IsRequired()
                    .HasColumnName("REMARK_TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Serno)
                    .HasColumnName("SERNO")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateMan)
                    .IsRequired()
                    .HasColumnName("UPDATE_MAN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.HasKey(e => e.RefreshToken1);

                entity.Property(e => e.RefreshToken1)
                    .HasColumnName("RefreshToken")
                    .HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Nobr).HasMaxLength(50);

                entity.Property(e => e.UpdateTime).HasColumnType("datetime");

                entity.Property(e => e.Valid)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ResetPasswordKey>(entity =>
            {
                entity.HasKey(e => e.ResetKey);

                entity.Property(e => e.ResetKey).HasMaxLength(50);

                entity.Property(e => e.DeadLineTime).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysClients>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("PK_Clients");

                entity.ToTable("sysClients");

                entity.Property(e => e.ClientId).HasMaxLength(100);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SysClientByMoudle>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.MoudleId })
                    .HasName("PK_ClientByMoudle");

                entity.ToTable("sysClientByMoudle");

                entity.Property(e => e.ClientId).HasMaxLength(100);

                entity.Property(e => e.MoudleId).HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(50);

                entity.Property(e => e.UpadateDate).HasColumnType("datetime");
            });


            modelBuilder.Entity<SysMoudles>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_Moudles");

                entity.ToTable("sysMoudles");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SysMoudleByApiVoid>(entity =>
            {
                entity.HasKey(e => new { e.MoudleId, e.ApiId })
                    .HasName("PK_MoudleByApi");

                entity.ToTable("sysMoudleByApiVoid ");

                entity.Property(e => e.MoudleId).HasMaxLength(50);

                entity.Property(e => e.ApiId).HasMaxLength(50);

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SysApiVoidBlackList>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("sysApiVoidBlackList");

                entity.Property(e => e.ApiVoidCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysApiVoidWhiteList>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.ToTable("sysApiVoidWhiteList");

                entity.Property(e => e.ApiVoidCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FileInfo>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtensionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileGuid)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FileStream).IsRequired();

                entity.Property(e => e.FileTicket)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<DiversionShift>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AttendDate).HasColumnType("datetime");

                entity.Property(e => e.DiversionAttendType).HasMaxLength(50);

                entity.Property(e => e.DiversionGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DiversionGroup>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.DiversionGroupType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkLocation)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WorkLog>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AttendDate).HasColumnType("datetime");

                entity.Property(e => e.BeginTime)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndTime)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FileId).HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkHours).HasColumnType("decimal(16, 2)");

                entity.Property(e => e.Workitem).HasMaxLength(50);
            });

            modelBuilder.Entity<TemperoturyReport>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.AttendDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Temperotury).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<DiversionAttendType>(entity =>
            {
                entity.HasKey(e => e.AutoKey);

                entity.Property(e => e.CheckWfhAttend).HasColumnName("CheckWFH_Attend");

                entity.Property(e => e.DiversionAttendType1)
                    .IsRequired()
                    .HasColumnName("DiversionAttendType")
                    .HasMaxLength(50);

                entity.Property(e => e.DiversionAttendTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KeyDate).HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EmployeeRule>(entity =>
            {
                entity.HasKey(e => e.Auto);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.KeyDate)
                    .HasColumnName("KEY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.KeyMan)
                    .IsRequired()
                    .HasColumnName("KEY_MAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Nobr)
                    .IsRequired()
                    .HasColumnName("NOBR")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RuleType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
